(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

module.exports = {
	"caret-down": require('./views/templates/lib/caret-down'),
	"checkmark": require('./views/templates/lib/checkmark'),
	"error": require('./views/templates/lib/error'),
	"ex": require('./views/templates/lib/ex'),
	"facebook": require('./views/templates/lib/facebook'),
	"garbage": require('./views/templates/lib/garbage'),
	"leftArrow": require('./views/templates/lib/leftArrow'),
	"logoBlack": require('./views/templates/lib/logoBlack'),
	"logoWhite": require('./views/templates/lib/logoWhite'),
	"pencil": require('./views/templates/lib/pencil'),
	"profile": require('./views/templates/lib/profile'),
	"search": require('./views/templates/lib/search'),
	"shoppingCart": require('./views/templates/lib/shoppingCart')
};

},{"./views/templates/lib/caret-down":111,"./views/templates/lib/checkmark":112,"./views/templates/lib/error":113,"./views/templates/lib/ex":114,"./views/templates/lib/facebook":115,"./views/templates/lib/garbage":116,"./views/templates/lib/leftArrow":117,"./views/templates/lib/logoBlack":118,"./views/templates/lib/logoWhite":119,"./views/templates/lib/pencil":120,"./views/templates/lib/profile":121,"./views/templates/lib/search":122,"./views/templates/lib/shoppingCart":123}],2:[function(require,module,exports){
'use strict';

module.exports = {
	Admin: require('./views/templates/Admin'),
	Array: require('./views/templates/Array'),
	ButtonFlow: require('./views/templates/ButtonFlow'),
	Byop: require('./views/templates/Byop'),
	ByopNumbers: require('./views/templates/ByopNumbers'),
	ByopPlayers: require('./views/templates/ByopPlayers'),
	ByopResults: require('./views/templates/ByopResults'),
	ByopSponsors: require('./views/templates/ByopSponsors'),
	ByopTeamEditor: require('./views/templates/ByopTeamEditor'),
	ByopWaitingListSwap: require('./views/templates/ByopWaitingListSwap'),
	Cart: require('./views/templates/Cart'),
	CartAddition: require('./views/templates/CartAddition'),
	CartItem: require('./views/templates/CartItem'),
	Checkout: require('./views/templates/Checkout'),
	CheckoutItem: require('./views/templates/CheckoutItem'),
	CollectionManager: require('./views/templates/CollectionManager'),
	Deleter: require('./views/templates/Deleter'),
	Device: require('./views/templates/Device'),
	Disc: require('./views/templates/Disc'),
	DiscDetails: require('./views/templates/DiscDetails'),
	DiscSelection: require('./views/templates/DiscSelection'),
	DiscShopping: require('./views/templates/DiscShopping'),
	DiscType: require('./views/templates/DiscType'),
	Division: require('./views/templates/Division'),
	DivisionDropdown: require('./views/templates/DivisionDropdown'),
	DivisionResult: require('./views/templates/DivisionResult'),
	Dragger: require('./views/templates/Dragger'),
	Filter: require('./views/templates/Filter'),
	Footer: require('./views/templates/Footer'),
	Form: require('./views/templates/Form'),
	GiftCards: require('./views/templates/GiftCards'),
	Header: require('./views/templates/Header'),
	Home: require('./views/templates/Home'),
	JSON: require('./views/templates/JSON'),
	JsonProperty: require('./views/templates/JsonProperty'),
	List: require('./views/templates/List'),
	Literal: require('./views/templates/Literal'),
	Login: require('./views/templates/Login'),
	ManageByop: require('./views/templates/ManageByop'),
	ManageDevices: require('./views/templates/ManageDevices'),
	PaidCash: require('./views/templates/PaidCash'),
	ProductDetails: require('./views/templates/ProductDetails'),
	Shop: require('./views/templates/Shop'),
	Sponsor: require('./views/templates/Sponsor'),
	Team: require('./views/templates/Team'),
	Toast: require('./views/templates/Toast'),
	ToastMessage: require('./views/templates/ToastMessage'),
	TypeAhead: require('./views/templates/TypeAhead'),
	ViewList: require('./views/templates/ViewList')
};

},{"./views/templates/Admin":62,"./views/templates/Array":63,"./views/templates/ButtonFlow":64,"./views/templates/Byop":65,"./views/templates/ByopNumbers":66,"./views/templates/ByopPlayers":67,"./views/templates/ByopResults":68,"./views/templates/ByopSponsors":69,"./views/templates/ByopTeamEditor":70,"./views/templates/ByopWaitingListSwap":71,"./views/templates/Cart":72,"./views/templates/CartAddition":73,"./views/templates/CartItem":74,"./views/templates/Checkout":75,"./views/templates/CheckoutItem":76,"./views/templates/CollectionManager":77,"./views/templates/Deleter":78,"./views/templates/Device":79,"./views/templates/Disc":80,"./views/templates/DiscDetails":81,"./views/templates/DiscSelection":82,"./views/templates/DiscShopping":83,"./views/templates/DiscType":84,"./views/templates/Division":85,"./views/templates/DivisionDropdown":86,"./views/templates/DivisionResult":87,"./views/templates/Dragger":88,"./views/templates/Filter":89,"./views/templates/Footer":90,"./views/templates/Form":91,"./views/templates/GiftCards":92,"./views/templates/Header":93,"./views/templates/Home":94,"./views/templates/JSON":95,"./views/templates/JsonProperty":96,"./views/templates/List":97,"./views/templates/Literal":98,"./views/templates/Login":99,"./views/templates/ManageByop":100,"./views/templates/ManageDevices":101,"./views/templates/PaidCash":102,"./views/templates/ProductDetails":103,"./views/templates/Shop":104,"./views/templates/Sponsor":105,"./views/templates/Team":106,"./views/templates/Toast":107,"./views/templates/ToastMessage":108,"./views/templates/TypeAhead":109,"./views/templates/ViewList":110}],3:[function(require,module,exports){
'use strict';

module.exports = {
	Admin: require('./views/Admin'),
	Array: require('./views/Array'),
	ButtonFlow: require('./views/ButtonFlow'),
	Byop: require('./views/Byop'),
	ByopNumbers: require('./views/ByopNumbers'),
	ByopPlayers: require('./views/ByopPlayers'),
	ByopResults: require('./views/ByopResults'),
	ByopSponsors: require('./views/ByopSponsors'),
	ByopTeamEditor: require('./views/ByopTeamEditor'),
	ByopWaitingListSwap: require('./views/ByopWaitingListSwap'),
	Cart: require('./views/Cart'),
	CartAddition: require('./views/CartAddition'),
	Checkout: require('./views/Checkout'),
	CollectionManager: require('./views/CollectionManager'),
	Deleter: require('./views/Deleter'),
	DiscShopping: require('./views/DiscShopping'),
	Division: require('./views/Division'),
	DivisionDropdown: require('./views/DivisionDropdown'),
	Dragger: require('./views/Dragger'),
	Footer: require('./views/Footer'),
	Form: require('./views/Form'),
	GiftCards: require('./views/GiftCards'),
	Header: require('./views/Header'),
	Home: require('./views/Home'),
	Json: require('./views/Json'),
	JsonProperty: require('./views/JsonProperty'),
	List: require('./views/List'),
	Literal: require('./views/Literal'),
	Login: require('./views/Login'),
	ManageByop: require('./views/ManageByop'),
	ManageDevices: require('./views/ManageDevices'),
	ProductDetails: require('./views/ProductDetails'),
	Shop: require('./views/Shop'),
	Submitter: require('./views/Submitter'),
	Toast: require('./views/Toast'),
	ToastMessage: require('./views/ToastMessage'),
	TypeAhead: require('./views/TypeAhead'),
	ViewList: require('./views/ViewList')
};

},{"./views/Admin":21,"./views/Array":22,"./views/ButtonFlow":23,"./views/Byop":24,"./views/ByopNumbers":25,"./views/ByopPlayers":26,"./views/ByopResults":27,"./views/ByopSponsors":28,"./views/ByopTeamEditor":29,"./views/ByopWaitingListSwap":30,"./views/Cart":31,"./views/CartAddition":32,"./views/Checkout":33,"./views/CollectionManager":34,"./views/Deleter":35,"./views/DiscShopping":36,"./views/Division":37,"./views/DivisionDropdown":38,"./views/Dragger":39,"./views/Footer":40,"./views/Form":41,"./views/GiftCards":42,"./views/Header":43,"./views/Home":44,"./views/Json":45,"./views/JsonProperty":46,"./views/List":47,"./views/Literal":48,"./views/Login":49,"./views/ManageByop":50,"./views/ManageDevices":51,"./views/ProductDetails":52,"./views/Shop":53,"./views/Submitter":54,"./views/Toast":55,"./views/ToastMessage":56,"./views/TypeAhead":57,"./views/ViewList":58}],4:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = {

    Currency: new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2
    }),

    Moment: require('moment'),

    GetFormField: function GetFormField(datum, value, meta) {
        var isNested = datum.range === 'List' || _typeof(datum.range) === 'object';

        var image = datum.range === 'ImageUrl' ? '<div><img data-src="' + value + '" /></div>' : '';

        var options = datum.range === 'Boolean' ? [{ label: 'True', name: 'true' }, { label: 'False', name: 'false' }] : datum.metadata ? datum.metadata.options : false;

        var icon = datum.metadata && datum.metadata.icon ? this.GetIcon(datum.metadata.icon) : options ? this.GetIcon('caret-down') : '';

        var label = isNested || datum.fk || datum.label && !meta.noLabel ? '<label>' + (datum.fk || datum.label) + '</label>' : '';

        value = value === undefined ? '' : value;

        if (options) {
            if (typeof options === 'function') {
                options();return this.GetSelect(datum, value, [], icon, label);
            } else if (Array.isArray(options)) return this.GetSelect(datum, value, options, icon, label);
        }

        var prompt = datum.prompt ? '<div class="prompt">' + datum.prompt + '</div>' : '';

        var input = datum.fk ? '<div data-view="typeAhead" data-name="' + datum.fk + '"></div>' : datum.range === 'Text' ? '<textarea data-js="' + datum.name + '" placeholder="' + (datum.label || '') + '" rows="3">' + value + '</textarea>' : datum.range === 'List' || datum.range === 'View' || _typeof(datum.range) === 'object' ? '<div data-js="' + datum.name + '" data-name="' + datum.name + '"></div>' : '<input type="' + this.RangeToInputType[datum.range] + '" data-js="' + datum.name + '" placeholder="' + (datum.label || '') + '" value="' + value + '" />';

        return '' + ('<div class="form-group ' + (image ? 'has-image' : '') + ' ' + (isNested ? 'nested' : '') + '">\n            ' + label + '\n            ' + prompt + '\n            ' + input + '\n            ' + image + '\n            ' + icon + '\n        </div>');
    },
    GetFormFields: function GetFormFields(data) {
        var _this = this;

        var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var meta = arguments[2];

        if (!data) return '';

        return data.filter(function (datum) {
            return meta[datum.name || datum.fk] && meta[datum.name || datum.fk].hide ? false : true;
        }).map(function (datum) {
            return _this.GetFormField(datum, model && model[datum.name], meta);
        }).join('');
    },
    GetIcon: function GetIcon(name) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        opts = Object.assign({ IconDataJs: this.IconDataJs, name: name }, opts);
        return Reflect.apply(this.Icons[name], this, [opts]);
    },
    GetListItems: function GetListItems() {
        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return items.map(function (item) {
            var attr = opts.dataAttr ? 'data-' + opts.dataAttr + '="' + item[opts.dataAttr] + '"' : '';
            return '<li ' + attr + '>' + (item.label || item) + '</li>';
        }).join('');
    },
    GetSelect: function GetSelect(datum, selectedValue, optionsData, icon) {
        var label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';

        if (typeof selectedValue === 'boolean' || typeof selectedValue === 'number') selectedValue = selectedValue.toString();

        var options = optionsData.length ? this.GetSelectOptions(optionsData, selectedValue, { valueAttr: 'name' }) : '';

        return '' + ('<div class="form-group">\n            ' + label + '\n            <select data-js="' + datum.name + '">\n                <option disabled ' + (!selectedValue ? 'selected' : '') + ' value>' + datum.label + '</option>\n                ' + options + '\n            </select>\n            ' + icon + '\n        </div>');
    },
    GetSelectOptions: function GetSelectOptions() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var selectedValue = arguments[1];
        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { valueAttr: 'value' };

        return options.map(function (option) {
            return '<option ' + (selectedValue === option[opts.valueAttr] ? 'selected' : '') + ' value="' + option[opts.valueAttr] + '">' + option.label + '</option>';
        }).join('');
    },


    Icons: require('./.IconMap'),

    IconDataJs: function IconDataJs(p) {
        return p.name ? 'data-js="' + p.name + '"' : '';
    },
    ImageSrc: function ImageSrc(name) {
        return 'https://storage.googleapis.com/mega-poetry-9665/' + name;
    },
    Range: function Range(int) {
        return Array.from(Array(int).keys());
    },


    RangeToInputType: {
        Email: 'email',
        Password: 'password',
        String: 'text'
    }

};

},{"./.IconMap":1,"moment":137}],5:[function(require,module,exports){
'use strict';

module.exports = Object.create(Object.assign({}, require('../../lib/MyObject'), require('events').EventEmitter.prototype, {
    constructor: function constructor() {
        var _this = this;

        var protocol = window.location.protocol === 'http:' ? 'ws' : 'wss';

        this.socket = new WebSocket(protocol + '://' + window.location.hostname + ':1342');

        this.socket.onopen = function (event) {
            _this.isOpen = true;
        };

        this.socket.onmessage = function (event) {
            var data = event.data;

            try {
                data = JSON.parse(data);
            } catch (e) {
                console.log(data, e);return;
            }

            if (_this.user.git('id') === data.userId) _this.emit(data.type, data);
        };

        return this;
    },
    send: function send(data) {
        this.socket.send(JSON.stringify(data));
    },


    user: require('./models/User')

}), {}).constructor();

},{"../../lib/MyObject":126,"./models/User":17,"events":136}],6:[function(require,module,exports){
"use strict";

module.exports = Object.create(Object.assign({}, require('../../lib/MyObject'), {

    Request: {
        constructor: function constructor(data) {
            var _this = this;

            var req = new XMLHttpRequest();

            if (data.onProgress) req.addEventListener("progress", function (e) {
                return data.onProgress(e.lengthComputable ? Math.floor(e.loaded / e.total * 100) : 0);
            });

            return new Promise(function (resolve, reject) {

                req.onload = function () {
                    [500, 404, 401].includes(this.status) ? reject(this.response ? JSON.parse(this.response) : this.status) : resolve(JSON.parse(this.response));
                };

                data.method = data.method || "get";

                var path = "/" + data.resource + (data.id ? "/" + data.id : '');
                if (data.method === "get" || data.method === "options") {
                    var qs = data.qs ? "?" + window.encodeURIComponent(data.qs) : '';
                    req.open(data.method, "" + path + qs);
                    _this.setHeaders(req, data.headers);
                    req.send(null);
                } else {
                    req.open(data.method.toUpperCase(), path, true);
                    _this.setHeaders(req, data.headers);
                    req.send(data.data || null);
                }

                if (data.onProgress) data.onProgress('sent');
            });
        },
        setHeaders: function setHeaders(req) {
            var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            req.setRequestHeader("Accept", headers.accept || 'application/json');
            req.setRequestHeader("Content-Type", headers.contentType || 'text/plain');
        }
    },

    _factory: function _factory(data) {
        return Object.create(this.Request, {}).constructor(data);
    },
    constructor: function constructor() {

        if (!XMLHttpRequest.prototype.sendAsBinary) {
            XMLHttpRequest.prototype.sendAsBinary = function (sData) {
                var nBytes = sData.length,
                    ui8Data = new Uint8Array(nBytes);
                for (var nIdx = 0; nIdx < nBytes; nIdx++) {
                    ui8Data[nIdx] = sData.charCodeAt(nIdx) & 0xff;
                }
                this.send(ui8Data);
            };
        }

        return this._factory.bind(this);
    }
}), {}).constructor();

},{"../../lib/MyObject":126}],7:[function(require,module,exports){
'use strict';

module.exports = Object.create({
    constructor: function constructor() {
        this.range = document.createRange();
        this.range.selectNode(document.getElementsByTagName("div").item(0));
        return this;
    },
    create: function create(name, opts) {
        var lower = name;
        name = (name.charAt(0).toUpperCase() + name.slice(1)).replace('-', '');

        return Object.create(this.Views[name], Object.assign({
            Dragger: { value: this.Dragger },
            Header: { value: this.Header },
            Toast: { value: this.Toast },
            name: { value: name },
            factory: { value: this },
            range: { value: this.range },
            template: { value: this.Templates[name], writable: true },
            user: { value: this.User }
        })).constructor(opts);
    }
}, {
    Dragger: { value: require('../views/Dragger') },
    Header: { value: require('../views/Header') },
    Templates: { value: require('../.TemplateMap') },
    Toast: { value: require('../views/Toast') },
    User: { value: require('../models/User') },
    Views: { value: require('../.ViewMap') }
});

},{"../.TemplateMap":2,"../.ViewMap":3,"../models/User":17,"../views/Dragger":39,"../views/Header":43,"../views/Toast":55}],8:[function(require,module,exports){
'use strict';

var User = require('./models/User'),
    router = require('./router'),
    onLoad = new Promise(function (resolve) {
    return window.onload = function () {
        return resolve();
    };
});

require('./polyfill');

Promise.all([User.get(), onLoad]).then(function () {
    return router.initialize();
}).catch(function (e) {
    return console.log('Error initializing client -> ' + (e.stack || e));
});

},{"./models/User":17,"./polyfill":19,"./router":20}],9:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    attributes: {
        divisionId: {
            label: 'Division',
            type: 'select'
        },

        name1: {
            label: 'Player 1 Name',
            type: 'text'
        },

        shirtSize1: {
            label: 'Player 1 Shirt Size',
            type: 'select',
            range: 'shirtSizes'
        },

        ace1: {
            label: 'Player 1 Ace Fund',
            type: 'select',
            range: 'aceOptions'
        },

        disc1: {
            label: 'Player 1 Disc',
            type: 'select',
            range: 'discs'
        },

        weight1: {
            label: 'Player 1 Weight',
            type: 'text'
        },

        name2: {
            label: 'Player 2 Name',
            type: 'text'
        },

        shirtSize2: {
            label: 'Player 2 Shirt Size',
            type: 'select',
            range: 'shirtSizes'
        },

        ace2: {
            label: 'Player 2 Ace Fund',
            type: 'select',
            range: 'aceOptions'
        },

        disc2: {
            label: 'Player 2 Disc',
            type: 'select',
            range: 'discs'
        },

        weight2: {
            label: 'Player 2 Weight',
            type: 'text'
        },

        email: {
            label: 'Email',
            type: 'email',
            range: 'email'
        },

        phone: {
            label: 'Phone',
            type: 'phone',
            range: 'phone'
        },

        hasPaid: {
            label: 'Has Paid',
            type: 'select',
            range: 'Boolean'
        },

        refunded: {
            label: 'Refunded',
            type: 'select',
            range: 'Boolean'
        },

        total: {
            label: 'Total',
            type: 'text'
        },

        waitList: {
            label: 'On Waiting List',
            type: 'select',
            range: 'Boolean'
        },

        removedFromEvent: {
            label: 'Removed From Event',
            type: 'select',
            range: 'Boolean'
        }
    },

    data: {
        total: 123.5
    },

    meta: {

        basePrice: 123.5,

        Boolean: [{ value: 'true', label: 'True' }, { value: 'false', label: 'False' }],

        aceOptions: [{ value: 'true', label: 'Yes!' }, { value: 'false', label: 'Not right now' }],

        discs: [{ value: 'luster-gator', label: 'Luster Gator (173g-175g)' }, { value: 'star-roc', label: 'Star Roc (178g-180g)' }, { value: 'star-destroyer', label: 'Star Destroyer (151g-175g)' },
        //{ value: 'star-aviar-three', label: 'Star Aviar3 (173g-175g)' },
        { value: 'xt-nova', label: 'XT Nova (165g-175g)' }, { value: 'champion-leopard-three', label: 'Champion Leopard 3 (165g-175g)' }, { value: 'champion-flattop-firebird', label: 'Champion Flattop Firebird (165g-175g)' }],

        shirtSizes: [{ value: 'f-sx', label: 'Female X-Small' }, { value: 'f-s', label: 'Female Small' }, { value: 'f-m', label: 'Female Medium' }, { value: 'f-l', label: 'Female Large' }, { value: 'f-xl', label: 'Female X-Large' }, { value: 'f-xxl', label: 'Female XX-Large' }, { value: 'm-s', label: 'Male Small' }, { value: 'm-m', label: 'Male Medium' }, { value: 'm-l', label: 'Male Large' }, { value: 'm-xl', label: 'Male X-Large' }, { value: 'm-xxl', label: 'Male XX-Large' }, { value: 'm-xxxl', label: 'Male XXX-Large' }, { value: 'm-xxxxl', label: 'Male XXXX-Large' }],

        divisionId: {
            type: 'select'
        },

        name1: {
            type: 'text',
            error: 'Player 1 name required'
        },

        shirtSize1: {
            type: 'select',
            error: 'Player 1 shirt size required'
        },

        name2: {
            type: 'text',
            error: 'Player 2 name required'
        },

        shirtSize2: {
            type: 'select',
            error: 'Player 2 shirt size required'
        },

        email: {
            type: 'email',
            error: 'A valid email address is required'
        },

        phone: {
            type: 'phone',
            error: 'A valid phone number is required'
        },

        ccName: {
            type: 'text',
            error: 'A credit card name is required'
        },

        ccNo: {
            type: 'text',
            error: 'A credit card number is required'
        },

        ccMonth: {
            type: 'select',
            error: 'A credit card month expiration is required'
        },

        ccYear: {
            type: 'select',
            error: 'A credit card year expiration is required'
        },

        'cvc': {
            type: 'text',
            error: 'A credit card cvc is required'
        }
    },

    resource: 'byop',

    validate: function validate(field, value) {
        if (!this.meta[field]) return true;

        if (value === "null" && this.meta[field].type === "select") return false;

        if (value.trim() === "" && this.meta[field].type === "text") return false;

        if (this.meta[field].type === "email" && !this._emailRegex.test(value)) return false;

        if (this.meta[field].type === "phone" && !this._phoneRegex.test(value)) return false;

        return true;
    },


    _emailRegex: /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,

    _phoneRegex: /^\(?(\d{3})\)?[-. ]?(\d{3})[-. ]?(\d{4})$/
});

},{"./__proto__":18}],10:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    attributes: [{
        name: 'name',
        label: 'Name',
        range: 'String',
        error: 'Please enter a name with no spaces.',
        validate: function validate(val) {
            return val.trim() !== '' && !/\s/.test(val);
        },
        metadata: {}
    }],

    meta: {
        key: 'name'
    },

    resource: 'Collection'
});

},{"./__proto__":18}],11:[function(require,module,exports){
'use strict';

module.exports = Object.create(Object.assign({}, require('./__proto__'), {

    data: {
        currentCollection: 'DiscType',
        currentView: ''
    },

    meta: {
        DeviceLog: {
            add: false,
            displayAttr: 'createdAt',
            sort: { createdAt: -1 },
            templateOptions: { hideButtonRow: true }
        },
        GiftCardTransaction: {
            add: false,
            payment: { hide: true }
        },
        StoreTransaction: {
            add: false,
            payment: { hide: true }
        }
    }

}));

},{"./__proto__":18}],12:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    meta: {
        filterCategories: [{ name: 'DiscClass', label: 'Class', collection: 'DiscType', fk: true }, { name: 'Manufacturer', label: 'Manufacturer', collection: 'DiscType', fk: true }, { name: 'weight', label: 'Weight (g)', collection: 'Disc', minMax: true }, { name: 'color', label: 'Color', collection: 'Disc' }]
    },

    resource: 'Filter'

});

},{"./__proto__":18}],13:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = Object.assign({}, require('./__proto__'), {

    attributes: {},

    data: {},

    meta: {
        key: '_id'
    },

    toList: function toList(document) {
        document = document || this.data;
        return Object.keys(document).sort().map(function (key) {
            return { key: key, value: document[key] };
        });
    },
    toObj: function toObj() {
        this.data = this.reducer(this.data, function (datum) {
            return _defineProperty({}, datum.key, datum.value);
        });
        return this;
    }
});

},{"./__proto__":18}],14:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = Object.assign({}, require('./__proto__'), {
    getViewName: function getViewName(value) {
        return Array.isArray(value) ? 'Array' : (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? 'Json' : 'Literal';
    },
    isEditable: function isEditable(key) {
        return key === '_id';
    }
});

},{"./__proto__":18}],15:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    attributes: [{
        default: function _default() {
            return 'key-' + new Date().getTime();
        },
        name: 'key',
        label: 'Key'
    }, {
        default: 'value',
        name: 'value',
        label: 'Value'
    }],

    data: {},

    isEditable: function isEditable(key) {
        return key !== '_id';
    }
});

},{"./__proto__":18}],16:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    data: {
        collections: [{ name: 'discShopping', url: 'disc-shopping', label: 'Discs' }, { name: 'hats', url: 'hats', label: 'Hats' }]
    }

});

},{"./__proto__":18}],17:[function(require,module,exports){
'use strict';

module.exports = Object.create(Object.assign({}, require('./__proto__.js'), {
    addToCart: function addToCart(item) {
        if (!this.git('cart')) this.data.cart = [];

        var itemAlreadyInCart = this.data.cart.find(function (datum) {
            return datum.id === item._id;
        });

        if (itemAlreadyInCart) {
            //item.quantity = window.parseFloat( item.quantity ) + window.parseFloat( itemAlreadyInCart.quantity )
        } else this.data.cart.push({
            id: item._id,
            quantity: item.quantity || 1,
            price: item.price || 0,
            collectionName: item.collectionName || 'Disc'
        });

        this.set('cart', this.data.cart);
        this.calculateSubtotal();

        this.emit('addToCart', item);
        return this.setCookie();
    },
    calculateSubtotal: function calculateSubtotal() {
        this.meta.subtotal = this.git('cart').reduce(function (memo, datum) {
            memo += window.parseFloat(datum.price) * window.parseFloat(datum.quantity);
            return memo;
        }, 0);
    },
    deleteFromCart: function deleteFromCart(id) {
        var index = this.data.cart.findIndex(function (datum) {
            return datum.id === id;
        });
        this.data.cart.splice(index, 1);

        this.set('cart', this.data.cart);
        this.calculateSubtotal();

        this.emit('deleteFromCart', id);
        return this.setCookie();
    },
    isLoggedIn: function isLoggedIn() {
        return Boolean(this.data && this.data.id);
    },
    logout: function logout() {
        document.cookie = 'hzy=; domain=' + window.location.hostname + '; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';

        this.data = {};
        this.emit('logout');
    },
    resetCart: function resetCart() {
        this.set('cart', []);
        this.meta.subtotal = 0;
        this.emit('cartReset');
        return this.setCookie();
    },
    setCookie: function setCookie() {
        return this.Xhr({ method: 'post', resource: 'cart-item', data: JSON.stringify(this.data) }).catch(this.Error);
    }
}), { resource: { value: 'me' } });

},{"./__proto__.js":18}],18:[function(require,module,exports){
'use strict';

var _Object$assign;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = Object.assign({}, require('../../../lib/Model'), require('events').EventEmitter.prototype, (_Object$assign = {

    Xhr: require('../Xhr'),

    add: function add(datum) {
        this.data.push(datum);

        if (this.storeBy) this._storeOne(datum);

        return this;
    },
    delete: function _delete() {
        var _this = this;

        var keyValue = this.data[this.meta.key];
        return this.Xhr({ method: 'DELETE', resource: this.resource, id: keyValue }).then(function () {
            var key = _this.meta.key;

            if (Array.isArray(_this.data)) {
                var datum = _this.data.find(function (datum) {
                    return datum[key] == keyValue;
                });

                if (_this.store) {
                    Object.keys(_this.store).forEach(function (attr) {
                        _this.store[attr][datum[attr]] = _this.store[attr][datum[attr]].filter(function (datum) {
                            return datum[key] != keyValue;
                        });
                        if (_this.store[attr][datum[attr]].length === 0) {
                            _this.store[attr][datum[attr]] = undefined;
                        }
                    });
                }

                _this.data = _this.data.filter(function (datum) {
                    return datum[key] != keyValue;
                });
            }

            return Promise.resolve(_this.data);
        });
    },
    git: function git(attr) {
        return this.data[attr];
    },
    get: function get() {
        var _this2 = this;

        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { query: {} };

        if (opts.query || this.pagination) Object.assign(opts.query, this.pagination);

        return this.Xhr({ method: opts.method || 'get', resource: this.resource, id: opts.id, headers: this.headers || {}, qs: opts.query ? JSON.stringify(opts.query) : undefined }).then(function (response) {
            if (Array.isArray(_this2.data)) {
                _this2.data = _this2.data.concat(opts.parse ? opts.parse(response, opts.storeBy) : response);
            } else {
                if (opts.storeBy) _this2._resetStore(opts.storeBy);
                _this2.data = _this2.parse ? _this2.parse(response, opts.storeBy) : response;
                if (opts.storeBy) _this2._store();
            }

            _this2.emit('got');

            return Promise.resolve(response);
        });
    },
    getCount: function getCount() {
        var _this3 = this;

        return this.Xhr({ method: 'get', resource: this.resource, headers: this.headers || {}, qs: JSON.stringify({ countOnly: true }) }).then(function (_ref) {
            var result = _ref.result;

            _this3.meta.count = result;
            return Promise.resolve(result);
        });
    }
}, _defineProperty(_Object$assign, 'git', function git(attr) {
    return this.data[attr];
}), _defineProperty(_Object$assign, 'patch', function patch(id, data) {
    var _this4 = this;

    return this.Xhr({ method: 'patch', id: id, resource: this.resource, headers: this.headers || {}, data: JSON.stringify(data || this.data) }).then(function (response) {

        if (Array.isArray(_this4.data)) {
            _this4.data = _this4.data ? _this4.data.concat(response) : [response];
            if (_this4.store) Object.keys(_this4.store).forEach(function (attr) {
                return _this4._store(response, attr);
            });
        } else {
            _this4.data = response;
        }

        return Promise.resolve(response);
    });
}), _defineProperty(_Object$assign, '_put', function _put(keyValue, data) {
    var _this5 = this;

    var item = this.data.find(function (datum) {
        return datum[_this5.meta.key] == keyValue;
    });
    if (item) item = data;
    return this;
}), _defineProperty(_Object$assign, 'put', function put(id, data) {
    var _this6 = this;

    return this.Xhr({ method: 'put', id: id, resource: this.resource, headers: this.headers || {}, data: JSON.stringify(data) }).then(function (response) {

        if (Array.isArray(_this6.data)) {} else {
            _this6.data = response;
        }

        return Promise.resolve(response);
    });
}), _defineProperty(_Object$assign, 'post', function post(model) {
    var _this7 = this;

    return this.Xhr({ method: 'post', resource: this.resource, headers: this.headers || {}, data: JSON.stringify(model || this.data) }).then(function (response) {

        if (Array.isArray(_this7.data)) {
            _this7.data = _this7.data ? _this7.data.concat(response) : [response];
            if (_this7.store) Object.keys(_this7.store).forEach(function (attr) {
                return _this7._store(response, attr);
            });
        } else {
            _this7.data = response;
        }

        return Promise.resolve(response);
    });
}), _defineProperty(_Object$assign, 'remove', function remove(item) {
    var index = this.data.findIndex(function (datum) {
        return JSON.stringify(datum) === JSON.stringify(item);
    });

    if (index === -1) return;

    this.data.splice(index, 1);
}), _defineProperty(_Object$assign, 'set', function set(attr, value) {
    this.data[attr] = value;
    this.emit(attr + 'Changed');
}), _defineProperty(_Object$assign, 'validate', function validate(data) {
    var _this8 = this;

    var valid = true;

    Object.keys(data).forEach(function (name) {
        var val = data[name],
            attribute = _this8.attributes.find(function (attr) {
            return attr.name === name;
        });

        if (attribute === undefined || !attribute.validate) {
            _this8.data[name] = val ? typeof val === 'string' ? val.trim() : val : undefined;
        } else if (valid && !_this8.validateDatum(attribute, val)) {
            _this8.emit('validationError', attribute);
            valid = false;
        } else if (_this8.validateDatum(attribute, val)) {
            _this8.data[name] = val.trim();
        }
    });

    return valid;
}), _defineProperty(_Object$assign, 'validateDatum', function validateDatum(attr, val) {
    return attr.validate.call(this, val.trim());
}), _Object$assign));

},{"../../../lib/Model":124,"../Xhr":6,"events":136}],19:[function(require,module,exports){
'use strict';

if (typeof Object.assign != 'function') {
    Object.assign = function (target, varArgs) {
        // .length of function is 2
        'use strict';

        if (target == null) {
            // TypeError if undefined or null
            throw new TypeError('Cannot convert undefined or null to object');
        }

        var to = Object(target);

        for (var index = 1; index < arguments.length; index++) {
            var nextSource = arguments[index];

            if (nextSource != null) {
                // Skip over if undefined or null
                for (var nextKey in nextSource) {
                    // Avoid bugs when hasOwnProperty is shadowed
                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
        }
        return to;
    };
}

//https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
if (window.Element && !Element.prototype.closest) {
    Element.prototype.closest = function (s) {
        var matches = (this.document || this.ownerDocument).querySelectorAll(s),
            i,
            el = this;
        do {
            i = matches.length;
            while (--i >= 0 && matches.item(i) !== el) {};
        } while (i < 0 && (el = el.parentElement));
        return el;
    };
}

//https://gist.github.com/paulirish/1579671
var requestAnimationFramePolyfill = function () {
    var clock = Date.now();

    return function (callback) {

        var currentTime = Date.now();

        if (currentTime - clock > 16) {
            clock = currentTime;
            callback(currentTime);
        } else {
            setTimeout(function () {
                polyfill(callback);
            }, 0);
        }
    };
}();

window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || requestAnimationFramePolyfill;

require('smoothscroll-polyfill').polyfill();

module.exports = true;

},{"smoothscroll-polyfill":138}],20:[function(require,module,exports){
'use strict';

module.exports = Object.create({

    Error: require('../../lib/MyError'),

    ViewFactory: require('./factory/View'),

    Views: require('./.ViewMap'),

    Singletons: ['Dragger', 'Header', 'Toast'],

    User: require('./models/User'),

    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    initialize: function initialize() {
        var _this = this;

        this.contentContainer = document.querySelector('#content');

        this.ViewFactory.constructor();

        this.Singletons.forEach(function (name) {
            return _this.Views[name].constructor({ factory: _this.ViewFactory });
        });

        window.onpopstate = this.handle.bind(this);

        this.User.on('logout', function () {
            return Promise.all(Object.keys(_this.views).map(function (view) {
                return _this.views[view].delete();
            })).then(function () {
                _this.currentView = undefined;return _this.handle();
            }).catch(_this.Error);
        });

        this.Views.Header.on('navigate', function (route) {
            return _this.navigate(route);
        });

        this.footer = this.ViewFactory.create('footer', { insertion: { el: document.body, method: 'appendChild' } });

        this.handle();
    },
    handle: function handle() {
        this.handler(window.location.pathname.split('/').slice(1));
    },
    handler: function handler(path) {
        var _this2 = this;

        var name = this.pathToView(path[0]),
            view = this.Views[name] ? name : 'home';

        this.Views.Header.disableTypeAhead();

        if (view === this.currentView) return this.views[view].onNavigation(path.slice(1));

        this.scrollToTop();

        Promise.all(Object.keys(this.views).map(function (view) {
            return _this2.views[view].hide();
        })).then(function () {

            _this2.currentView = view;

            if (_this2.views[view]) return _this2.views[view].onNavigation(path);

            return Promise.resolve(_this2.views[view] = _this2.ViewFactory.create(view, { insertion: { el: _this2.contentContainer }, path: path }).on('navigate', function (route, options) {
                return _this2.navigate(route, options);
            }).on('deleted', function () {
                return delete _this2.views[view];
            }));
        }).catch(this.Error);

        this.footer.els.container.classList.toggle('hidden', view === 'Admin');
        this.contentContainer.classList.toggle('is-admin', view === 'Admin');
    },
    navigate: function navigate(location) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.Views.Header.displayingTypeAhead) this.Views.Header.removeTypeAhead();

        if (options.replace || options.up) {
            var path = ('' + window.location.pathname).split('/');
            path.pop();
            if (options.replace) path.push(location);
            location = path.join('/');
        } else if (options.append) {
            location = window.location.pathname + '/' + location;
        }

        if (location !== window.location.pathname) history.pushState({}, '', location);
        if (!options.silent) this.handle();
    },
    pathToView: function pathToView(path) {
        var _this3 = this;

        var hyphenSplit = path.split('-');
        return hyphenSplit.map(function (item) {
            return _this3.capitalizeFirstLetter(item);
        }).join('');
    },
    scrollToTop: function scrollToTop() {
        window.scroll({ top: 0, left: 0, behavior: 'smooth' });
    }
}, { currentView: { value: '', writable: true }, views: { value: {} } });

},{"../../lib/MyError":125,"./.ViewMap":3,"./factory/View":7,"./models/User":17}],21:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    events: {
        collectionManager: 'click',
        manageByop: 'click',
        manageDevices: 'click'
    },

    model: {

        manageByop: { label: 'Manage Byop', roles: new Set(['superuser']), url: 'manage-byop' },

        manageDevices: { label: 'Manage Devices', roles: new Set(['device', 'superuser']), url: 'manage-devices' },

        collectionManager: {
            label: 'Collection Manager',
            roles: new Set(['superuser']),
            url: 'collection-manager'
        }
    },

    onHeaderTypeAheadSelection: function onHeaderTypeAheadSelection(item) {
        this.currentView.onItemSelected(item);
    },
    onManageByopClick: function onManageByopClick() {
        this.emit('navigate', 'manage-byop', { append: true });
    },
    onManageDevicesClick: function onManageDevicesClick() {
        this.emit('navigate', 'manage-devices', { append: true });
    },
    onCollectionManagerClick: function onCollectionManagerClick() {
        this.emit('navigate', 'collection-manager', { append: true });
    },
    onNavigation: function onNavigation(path) {
        var _this = this;

        this.path = path;

        var key = this.keys.find(function (key) {
            return _this.model[key].url === path[0];
        });

        if (key !== undefined) return this.showView(key);

        Promise.all(Object.keys(this.model).map(function (key) {
            var view = _this.model[key].view;
            return view ? view.hide() : Promise.resolve();
        })).then(function () {
            _this.currentEl = _this.els.splash;return _this.showEl(_this.els.splash);
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this2 = this;

        this.keys = Object.keys(this.model);

        this.keys.forEach(function (name, i) {
            if (_this2.user.data.roles.filter(function (role) {
                return _this2.model[name].roles.has(role);
            }).length) {
                _this2.slurpTemplate({ template: '<button data-js="' + name + '">' + _this2.model[name].label + '</button>', insertion: { el: _this2.els['column' + i % 2] } });
            }
        });

        this.currentEl = this.els.splash;

        if (this.path.length > 1) this.onNavigation(this.path.slice(1));

        return this;
    },


    requiresLogin: true,

    requiresRole: 'admin',

    showView: function showView(key) {
        var _this3 = this;

        return this.hideEl(this.currentEl).then(function () {
            _this3.model[key].view ? _this3.model[key].view.onNavigation(_this3.path.slice(1)) : _this3.model[key].view = _this3.factory.create(key, { insertion: { el: _this3.els.views }, path: _this3.path.slice(1) }).on('navigate', function (route, opts) {
                return _this3.emit('navigate', route, opts);
            });

            _this3.currentView = _this3.model[key].view;
            _this3.currentEl = _this3.model[key].view.getContainer();
            return Promise.resolve();
        }).catch(this.Error);
    }
});

},{"./__proto__":59}],22:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Model: require('../models/Json'),

    addItem: function addItem(value) {
        this.views.push(this.factory.create(this.Model.getViewName(value), { model: { data: value }, insertion: { el: this.els.container } }));
    },
    displayData: function displayData() {
        var _this = this;

        Object.keys(this.model.data).forEach(function (value) {
            return _this.addItem(value);
        });
    },
    postRender: function postRender() {
        this.views = [];

        if (!this.model) return;

        this.model = this.Model.constructor(this.model.data);

        this.displayData();

        return this;
    },
    update: function update(data) {
        var _this2 = this;

        Promise.all(Object.keys(this.views).forEach(function (view) {
            return view.delete();
        })).then(function () {
            Object.assign(_this2, { model: { data: data }, views: [] });
            _this2.displayData();
            return Promise.resolve();
        }).catch(this.Error);
    }
});

},{"../models/Json":14,"./__proto__":59}],23:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {
    disable: function disable() {
        var _this = this;

        Object.keys(this.model.data.states).forEach(function (stateName) {
            return _this.model.data.states[stateName].forEach(function (button) {
                var el = _this.els[button.name];
                el.removeEventListener('click', button.clickListener);
                el.classList.add('disabled');
            });
        });
    },
    enable: function enable() {
        var _this2 = this;

        Object.keys(this.model.data.states).forEach(function (stateName) {
            return _this2.model.data.states[stateName].forEach(function (button) {
                var el = _this2.els[button.name];
                el.addEventListener('click', button.clickListener);
                el.classList.remove('disabled');
            });
        });
    },
    getListener: function getListener(name, button) {
        var _this3 = this;

        return function (e) {
            _this3.onNextState(button.nextState || 'start');
            if (button.emit) _this3.emit(name + 'Clicked', e);
        };
    },
    onNextState: function onNextState(newState) {
        var _this4 = this;

        return this.hideEl(this.els[this.state]).then(function () {
            _this4.showEl(_this4.els[newState]);
            return Promise.resolve(_this4.state = newState);
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this5 = this;

        this.state = 'start';

        Object.keys(this.model.data.states).forEach(function (stateName) {
            return _this5.model.data.states[stateName].forEach(function (button) {
                var el = _this5.els[button.name];
                button.clickListener = _this5.getListener(button.name, button);
                if (!_this5.model.data.disabled) {
                    el.addEventListener('click', button.clickListener);
                }
            });
        });

        return this;
    },
    toggle: function toggle(name, klas, bool) {
        this.els[name].classList.toggle(klas, bool);
    }
});

},{"./__proto__":59}],24:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Divisions: Object.create(require('../models/__proto__'), { resource: { value: 'division' } }),

    Templates: {
        PaidCash: require('./templates/PaidCash')
    },

    addDivisions: function addDivisions() {
        var _this = this;

        this.Divisions.data.forEach(function (division) {
            return _this.slurpTemplate({ template: '<option value="' + division.id + '">' + division.label + '</option>', insertion: { el: _this.els.divisionId } });
        });

        return Promise.resolve();
    },
    clear: function clear() {
        this.els.name1.value = '';
        this.els.ace1.value = 'null';
        this.els.shirtSize1.value = 'null';
        this.els.disc1.value = 'null';
        this.els.weight1.value = '';
        this.els.name2.value = '';
        this.els.ace2.value = 'null';
        this.els.shirtSize2.value = 'null';
        this.els.disc2.value = 'null';
        this.els.weight2.value = '';
        this.els.email.value = '';
        this.els.phone.value = '';
        this.els.belmontDonation.value = '';
        this.els.ccName.value = '';
        this.els.ccNo.value = '';
        this.els.ccMonth.value = 'null';
        this.els.ccYear.value = 'null';
        this.els.cvc.value = '';
        this.updateTotal();
    },
    disablePayment: function disablePayment() {
        var _this2 = this;

        this.els.payment.classList.add('disabled');
        this.els.payment.querySelectorAll('input, select').forEach(function (el) {
            if (!el.isEqualNode(_this2.els.paidCash)) el.setAttribute('disabled', 'true');
        });

        if (this.waitList === true && this.user.data.roles.includes('admin')) this.els.paidCash.setAttribute('disabled', 'true');
    },
    enablePayment: function enablePayment() {
        this.els.payment.classList.remove('disabled');
        this.els.payment.querySelectorAll('input, select').forEach(function (el) {
            return el.removeAttribute('disabled');
        });
        if (this.els.paidCash) this.els.paidCash.removeAttribute('disabled');
    },


    model: Object.create(require('../models/Byop')),

    events: {
        ace1: 'change',
        ace2: 'change',
        belmontDonation: 'input',
        divisionId: 'change',
        lastYearResults: 'click',
        paidCash: 'change',
        playersPageLink: 'click',
        submitBtn: 'click'
    },

    onAce1Change: function onAce1Change() {
        this.updateTotal();
    },
    onAce2Change: function onAce2Change() {
        this.updateTotal();
    },
    onBelmontDonationInput: function onBelmontDonationInput() {
        this.updateTotal();
    },
    onDivisionIdChange: function onDivisionIdChange() {
        var _this3 = this;

        if (this.els.divisionId.value === "null") {
            this.els.spotsLeft.textContent = '';
            this.enablePayment();
            return;
        }

        this.Xhr({ resource: 'spotsLeft', qs: JSON.stringify({ divisionId: this.els.divisionId.value }) }).then(function (_ref) {
            var spotsLeft = _ref.spotsLeft;

            if (spotsLeft <= 0) {
                _this3.waitList = true;
                _this3.els.spotsLeft.textContent = 'No spots left.  Please register to be placed on the waiting list.';
                _this3.disablePayment();
                _this3.model.set('total', 0);
            } else {
                _this3.els.spotsLeft.textContent = spotsLeft + ' spots left!';
                _this3.enablePayment();
            }
            return Promise.resolve();
        }).catch(this.Error);
    },
    onPaidCashChange: function onPaidCashChange() {
        this.els.paidCash.checked ? this.disablePayment() : this.enablePayment();

        this.updateTotal();
    },
    onLastYearResultsClick: function onLastYearResultsClick() {
        this.emit('navigate', '/byop-2016');
    },
    onPlayersPageLinkClick: function onPlayersPageLinkClick() {
        this.emit('navigate', '/byop-players');
    },
    onSubmitBtnClick: function onSubmitBtnClick() {
        var _this4 = this;

        if (this.submitting) return;

        this.onSubmitStart();

        this.validate().then(function (result) {
            if (!result) return Promise.resolve(_this4.onSubmitEnd());

            return _this4.model.post().then(function (response) {
                return _this4.Toast.createMessage('success', response.message).then(function () {
                    _this4.emit('navigate', '/byop-players');
                    _this4.onSubmitEnd();
                    _this4.clear();
                });
            }).catch(function (e) {
                _this4.Toast.createMessage('error', e && e.message ? e.message : 'There was a problem.  Please try again or contact us.');
                _this4.onSubmitEnd();
            });
        }).catch(function (e) {
            _this4.Error(e);_this4.submitting = false;
        });
    },
    onSubmitEnd: function onSubmitEnd() {
        this.submitting = false;
        this.els.submitBtn.classList.remove('submitting');
    },
    onSubmitStart: function onSubmitStart() {
        this.submitting = true;
        this.els.submitBtn.classList.add('submitting');
    },
    postRender: function postRender() {
        var _this5 = this;

        this.model.on('totalChanged', function () {
            return _this5.els.total.textContent = _this5.Format.Currency.format(_this5.model.git('total'));
        });
        this.els.container.querySelectorAll('input, select').forEach(function (el) {
            return el.addEventListener('focus', function (e) {
                return e.target.classList.remove('error');
            });
        });

        this.Divisions.get().then(function () {
            return _this5.addDivisions();
        }).catch(function (e) {
            return _this5.Error(e);
        });

        if (this.user.data.roles.includes('admin')) {
            this.slurpTemplate({ template: this.Templates.PaidCash(), insertion: { method: 'insertBefore', el: this.els.totalWrap } });
        }

        return this;
    },
    updateTotal: function updateTotal() {
        if (this.waitList) return this.model.set('total', 0);

        var total = this.model.meta.basePrice;

        if (this.els.paidCash && this.els.paidCash.checked) total -= 3.5;

        if (this.els.ace1.value === "true") total += 5;
        if (this.els.ace2.value === "true") total += 5;

        var belmontDonation = window.parseFloat(this.els.belmontDonation.value);
        if (!window.isNaN(belmontDonation) && belmontDonation > 0) total += belmontDonation;

        this.model.set('total', total);
    },
    validate: function validate() {
        var _this6 = this;

        var rv = true;

        Object.keys(this.els).forEach(function (attr) {
            var el = _this6.els[attr];

            if (el.tagName !== "INPUT" && el.tagName !== "SELECT") return;

            if ((_this6.waitList === true || _this6.els.paidCash && _this6.els.paidCash.checked) && ['ccName', 'ccNo', 'ccMonth', 'ccYear', 'cvc'].includes(attr)) return;

            if (rv === true && !_this6.model.validate(attr, el.value)) {
                _this6.Toast.createMessage('error', _this6.model.meta[attr].error || attr + ' required');
                el.scrollIntoView({ behavior: 'smooth' });
                el.classList.add('error');
                rv = false;
            } else if (_this6.model.validate(attr, el.value)) {
                _this6.model.data[attr] = attr === "paidCash" ? Boolean(el.checked) : attr === "ace1" || attr === "ace2" ? Boolean(el.value === "true") : el.value;
            }
        });

        return Promise.resolve(rv);
    }
});

},{"../models/Byop":9,"../models/__proto__":18,"./__proto__":59,"./templates/PaidCash":102}],25:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = Object.assign({}, require('./__proto__'), {

    Byop: Object.create(require('../models/Byop')),

    Divisions: Object.create(require('../models/__proto__'), { resource: { value: 'division' } }),

    Templates: {
        ByopDiscSelection: require('./templates/DiscSelection')
    },

    events: {
        heading: 'click',
        getAceSheet: 'click',
        getAllNames: 'click'
    },

    getDiscWeightClasses: function getDiscWeightClasses() {
        return [{ min: 150, max: 160, count: 0 }, { min: 161, max: 164, count: 0 }, { min: 165, max: 169, count: 0 }, { min: 170, max: 172, count: 0 }, { min: 173, max: 175, count: 0 }];
    },
    handleAceFund: function handleAceFund() {
        var _this = this;

        this.satAce = 0;
        this.sunAce = 0;

        var satDivisions = this.Divisions.data.filter(function (datum) {
            return datum.name === 'rec' || datum.name === 'int';
        }).reduce(function (memo, datum) {
            return Object.assign(memo, _defineProperty({}, datum.id, true));
        }, {});

        this.Byop.data.forEach(function (datum) {
            if (satDivisions[datum.divisionId]) {
                if (datum.ace1 === true) _this.satAce += 5;
                if (datum.ace2 === true) _this.satAce += 5;
            } else {
                if (datum.ace1 === true) _this.sunAce += 5;
                if (datum.ace2 === true) _this.sunAce += 5;
            }
        });

        this.slurpTemplate({ template: '<div>Saturday: ' + this.Format.Currency.format(this.satAce) + '</div>', insertion: { el: this.els.aceFund } });
        this.slurpTemplate({ template: '<div>Sunday: ' + this.Format.Currency.format(this.sunAce) + '</div>', insertion: { el: this.els.aceFund } });
    },
    handleDiscs: function handleDiscs() {
        var _this2 = this;

        this.discs = {};

        Object.keys(this.Byop.store.disc1).forEach(function (disc) {
            if (_this2.discs[disc] === undefined) _this2.discs[disc] = { weightClasses: _this2.getDiscWeightClasses(), unknowns: [] };

            var store = _this2.Byop.store.disc1[disc];
            if (!Array.isArray(store)) store = [store];

            store.forEach(function (datum) {
                var klass = _this2.discs[disc].weightClasses.find(function (klass) {
                    return klass.min <= parseInt(datum.weight1) && klass.max >= parseInt(datum.weight1);
                });
                klass === undefined ? _this2.discs[disc].unknowns.push(datum.weight1 || '(no value)') : klass.count++;
            });
        });
        Object.keys(this.Byop.store.disc2).forEach(function (disc) {
            if (_this2.discs[disc] === undefined) _this2.discs[disc] = { weightClasses: _this2.getDiscWeightClasses(), unknowns: [] };

            var store = _this2.Byop.store.disc2[disc];
            if (!Array.isArray(store)) store = [store];

            store.forEach(function (datum) {
                var klass = _this2.discs[disc].weightClasses.find(function (klass) {
                    return klass.min <= parseInt(datum.weight2) && klass.max >= parseInt(datum.weight2);
                });
                klass === undefined ? _this2.discs[disc].unknowns.push(datum.weight2 || '(no value)') : klass.count++;
            });
        });

        Object.keys(this.discs).forEach(function (disc) {
            var total = (_this2.Byop.store.disc1[disc] ? _this2.Byop.store.disc1[disc].length : 0) + (_this2.Byop.store.disc2[disc] ? _this2.Byop.store.disc2[disc].length : 0);
            _this2.slurpTemplate({ template: _this2.Templates.ByopDiscSelection({ disc: disc, total: total, meta: _this2.discs[disc] }), insertion: { el: _this2.els.playerPack } });
        });
    },
    handlePaymentType: function handlePaymentType() {
        var cashTotal = this.Byop.store.paidCash['true'].reduce(function (sum, datum) {
            return sum + parseFloat(datum.total);
        }, 0),
            ccTotal = this.Byop.store.paidCash['false'].reduce(function (sum, datum) {
            return sum + parseFloat(datum.total);
        }, 0);

        this.slurpTemplate({ template: '<div>Cash: ' + this.Format.Currency.format(cashTotal) + '</div>', insertion: { el: this.els.paidType } });
        this.slurpTemplate({ template: '<div>Credit: ' + this.Format.Currency.format(ccTotal) + '</div>', insertion: { el: this.els.paidType } });
    },
    handleShirts: function handleShirts() {
        var _this3 = this;

        this.shirts = {};

        Object.keys(this.Byop.store.shirtSize1).forEach(function (size) {
            if (_this3.shirts[size] === undefined) _this3.shirts[size] = 0;
            _this3.shirts[size] += Array.isArray(_this3.Byop.store.shirtSize1[size]) ? _this3.Byop.store.shirtSize1[size].length : 1;
        });

        Object.keys(this.Byop.store.shirtSize2).forEach(function (size) {
            if (_this3.shirts[size] === undefined) _this3.shirts[size] = 0;
            _this3.shirts[size] += Array.isArray(_this3.Byop.store.shirtSize2[size]) ? _this3.Byop.store.shirtSize2[size].length : 1;
        });

        Object.keys(this.shirts).forEach(function (size) {
            _this3.slurpTemplate({ template: '<div>' + size + ': ' + _this3.shirts[size] + '</div>', insertion: { el: _this3.els.shirts } });
        });
    },
    onHeadingClick: function onHeadingClick() {
        this.els.content.classList.contains('hidden') ? this.showEl(this.els.content) : this.hideEl(this.els.content);
    },
    onGetAceSheetClick: function onGetAceSheetClick() {
        window.open('/report?' + window.encodeURIComponent(JSON.stringify({ id: 'byopAce' })));
    },
    onGetAllNamesClick: function onGetAllNamesClick() {
        window.open('/report?' + window.encodeURIComponent(JSON.stringify({ id: 'byopNames' })));
    },
    postRender: function postRender() {
        var _this4 = this;

        Promise.all([this.Divisions.get(), this.Byop.get({ query: { waitList: false, removedFromEvent: false }, storeBy: ['shirtSize1', 'shirtSize2', 'disc1', 'disc2', 'paidCash'] })]).then(function () {

            _this4.handleDiscs();

            _this4.handleShirts();

            _this4.els.belmontDonation.textContent = _this4.Format.Currency.format(_this4.Byop.data.reduce(function (sum, datum) {
                var value = parseFloat(datum.belmontDonation);
                return sum + (Number.isNaN(value) ? 0 : value);
            }, 0));

            _this4.handlePaymentType();

            _this4.handleAceFund();
        }).catch(this.Error);

        return this;
    }
});

},{"../models/Byop":9,"../models/__proto__":18,"./__proto__":59,"./templates/DiscSelection":82}],26:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = Object.assign({}, require('./__proto__'), {

    Divisions: Object.create(require('../models/__proto__'), { resource: { value: 'division' } }),
    Byops: Object.create(require('../models/__proto__'), { resource: { value: 'byop' } }),
    WaitingList: Object.create(require('../models/__proto__'), { resource: { value: 'waiting-list' } }),

    events: {
        byopRegisterLink: 'click'
    },

    onByopRegisterLinkClick: function onByopRegisterLinkClick() {
        this.emit('navigate', '/byop');
    },
    postRender: function postRender() {
        var _this = this;

        Promise.all([this.Divisions.get(), this.Byops.get()]).then(function () {
            return _this.renderPlayers();
        }).catch(function (e) {
            return _this.Error(e);
        });

        this.WaitingList.get().then(function () {
            return _this.renderWaitingList();
        }).catch(function (e) {
            return _this.Error(e);
        });

        return this;
    },
    renderPlayers: function renderPlayers() {
        var _this2 = this;

        this.divisions = this.Divisions.data.reduce(function (memo, division) {
            return Object.assign(memo, _defineProperty({}, division.id, _this2.factory.create('division', { model: { data: division }, insertion: { el: _this2.els.divisions } })));
        }, {});

        this.Byops.data.forEach(function (byop) {
            return _this2.divisions[byop.divisionId].addTeam(byop);
        });

        Object.keys(this.divisions).forEach(function (divisionId) {
            return _this2.divisions[divisionId].notifyIfEmpty();
        });
    },
    renderWaitingList: function renderWaitingList() {
        var _this3 = this;

        this.WaitingList.data.forEach(function (datum) {
            return _this3.slurpTemplate({ template: '<li>' + datum.name1 + ', ' + datum.name2 + '</li>', insertion: { el: _this3.els.waitingList } });
        });
    }
});

},{"../models/__proto__":18,"./__proto__":59}],27:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Byops: Object.create(require('../models/__proto__'), { resource: { value: 'byop2017Results' } }),
    Divisions: Object.create(require('../models/__proto__'), { resource: { value: 'division' } }),

    events: {
        divisionsList: 'click'
    },

    Templates: {
        DivisionResult: require('./templates/DivisionResult')
    },

    insertAllDivisions: function insertAllDivisions(data) {
        var _this = this;

        Object.keys(data).sort().forEach(function (division) {
            _this.slurpTemplate({
                template: _this.Templates.DivisionResult({ name: division, data: data[division] }),
                insertion: { el: _this.els.divisionResults }
            });
        });

        return this;
    },
    insertDivisionList: function insertDivisionList() {
        var _this2 = this;

        this.Divisions.sort({ name: 1 });
        this.Divisions.data.unshift({ name: 'all', label: 'All' });

        Object.keys(this.Byops.store.division).forEach(function (label) {
            if (!_this2.Divisions.data.find(function (datum) {
                return datum.label === label;
            })) delete _this2.Byops.store.division[label];
        });

        this.slurpTemplate({
            template: this.Format.GetListItems(this.Divisions.data, { dataAttr: 'label' }),
            insertion: { el: this.els.divisionsList }
        });

        this.selectedDivision = this.els.divisionsList.children[0];
        this.els.divisionsList.children[0].classList.add('selected');

        this.update('All', this.Byops.store.division);
    },
    onDivisionsListClick: function onDivisionsListClick(e) {
        if (e.target.tagName !== 'LI' || e.target === this.selectedDivision) return;

        var el = e.target,
            division = el.getAttribute('data-label');

        this.selectedDivision.classList.remove('selected');
        el.classList.add('selected');
        this.selectedDivision = el;

        var data = division === 'All' ? this.Byops.store.division : this.Byops.store.division[division];

        this.update(division, data);
    },
    postRender: function postRender() {
        var _this3 = this;

        Promise.all([this.Divisions.get(), this.Byops.get({ storeBy: ['division'] })]).then(function () {
            _this3.Byops.data.sort(function (a, b) {
                var aTotal = window.parseInt(a.total),
                    bTotal = window.parseInt(b.total);

                return window.isNaN(aTotal) ? 1 : window.isNaN(bTotal) ? -1 : aTotal - b.Total;
            });

            _this3.insertDivisionList();
        }).catch(this.Error);

        return this;
    },
    update: function update(name, data) {
        var _this4 = this;

        this.hideEl(this.els.divisionResults).then(function () {
            _this4.els.divisionResults.innerHTML = '';

            if (name === 'All') return _this4.insertAllDivisions(data);

            _this4.slurpTemplate({
                template: _this4.Templates.DivisionResult({ name: name, data: data }),
                insertion: { el: _this4.els.divisionResults }
            });
        }).then(function () {
            return _this4.showEl(_this4.els.divisionResults);
        }).catch(this.Error);
    }
});

},{"../models/__proto__":18,"./__proto__":59,"./templates/DivisionResult":87}],28:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Sponsor: require('./templates/Sponsor'),

    Sponsors: Object.create(require('../models/__proto__'), { resource: { value: 'byopSponsor' } }),

    postRender: function postRender() {
        var _this = this;

        this.Sponsors.get({ query: { organizationId: { operation: 'join', value: { table: 'organization', column: 'id' } } } }).then(function () {
            return _this.shuffleArray(_this.Sponsors.data).sort(function (a, b) {
                return b['byopSponsor.year'] - a['byopSponsor.year'];
            }).forEach(function (datum) {
                _this.slurpTemplate({ template: _this.Sponsor(datum, _this.Format.ImageSrc), insertion: { el: _this.els.sponsors } });
            });
        }).catch(this.Error);

        return this;
    }
});

},{"../models/__proto__":18,"./__proto__":59,"./templates/Sponsor":105}],29:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = Object.assign({}, require('./__proto__'), {

    Byop: Object.create(require('../models/Byop')),

    Divisions: Object.create(require('../models/__proto__'), { resource: { value: 'division' } }),

    Views: {

        byopTeamEdit: { model: { data: {
                    disabled: true,
                    states: {
                        start: [{ name: 'updateByopTeam', class: '', text: 'Save', nextState: 'confirm' }, { name: 'cancelUpdate', class: '', text: 'Cancel', nextState: 'start', emit: true }],
                        confirm: [{ name: 'confirmUpdate', class: '', text: 'Are you Sure?', emit: true, nextState: 'start' }, { name: 'cancel', class: '', nextState: 'start', text: 'Cancel', emit: true }]
                    }
                } } },

        typeAhead: {
            templateOptions: { label: 'Search Byop 2017 by player name' }
        }

    },

    addChange: function addChange(name) {
        this.slurpTemplate({
            template: '<div data-name="' + name + '">' + this.getChangeText(name) + '</div>',
            insertion: { el: this.els.changes }
        });
        this.changes[name] = true;
    },
    addDivisions: function addDivisions() {
        var _this = this;

        this.Divisions.data.forEach(function (division) {
            return _this.slurpTemplate({ template: '<option value="' + division.id + '">' + division.label + '</option>', insertion: { el: _this.els.divisionId } });
        });

        return Promise.resolve();
    },


    events: {
        heading: 'click'
    },

    reset: function reset() {
        this.changes = {};
        while (this.els.changes.firstChild) {
            this.els.changes.removeChild(this.els.changes.firstChild);
        }this.populateByopForm();
        this.updateByopButtons();
    },
    getChangeText: function getChangeText(name) {
        var from = this.Byop.attributes[name].type === 'select' ? this.els[name].querySelector('option[value="' + this.Byop.data[name] + '"]').innerText : this.Byop.data[name];

        var to = this.Byop.attributes[name].type === 'select' ? this.els[name].querySelector('option[value="' + this.els[name].value + '"]').innerText : this.els[name].value;

        return this.Byop.attributes[name].label + ' changed from ' + from + ' to ' + to + '.';
    },
    onHeadingClick: function onHeadingClick() {
        this.els.content.classList.contains('hidden') ? this.showEl(this.els.content) : this.hideEl(this.els.content);
    },
    onPatchingByop: function onPatchingByop() {
        this.patchingByop = true;
        this.views.byopTeamEdit.toggle('confirmUpdate', 'patching', this.patchingByop);
    },
    onPatchingByopDone: function onPatchingByopDone() {
        this.patchingByop = false;
        this.views.byopTeamEdit.toggle('confirmUpdate', 'patching', this.patchingByop);
    },
    patchByop: function patchByop() {
        var _this2 = this;

        if (this.patchingByop) return;

        this.onPatchingByop();

        var payload = Object.keys(this.changes).reduce(function (memo, key) {
            var el = _this2.els[key],
                name = el.getAttribute('data-name');
            return Object.assign(memo, _defineProperty({}, name, _this2.Byop.attributes[name].range === "Boolean" ? Boolean(el.value === "true") : el.value));
        }, {});

        this.Byop.patch(this.Byop.data.id, payload).then(function (result) {
            _this2.reset();
            _this2.onPatchingByopDone();
            return _this2.Toast.createMessage('success', 'Record updated.').catch(_this2.Error);
        }).catch(function (e) {
            _this2.Toast.createMessage('error', 'Something went wrong.  Try again, or email Mike Baron\'s brother.').catch(_this2.Error);
            _this2.onPatchingByopDone();
        });
    },
    populateByopForm: function populateByopForm() {
        var _this3 = this;

        Object.keys(this.Byop.data).forEach(function (attr) {
            var el = _this3.els[attr];

            if (!el) return;

            var elAttr = ['INPUT', 'SELECT'].includes(el.tagName) ? 'value' : 'textContent';
            el[elAttr] = _this3.Byop.data[attr].toString();

            el.classList.remove('changed');
        });

        if (Object.keys(this.Byop.data).length === 0) return this.hideEl(this.els.selectedTeam);

        this.showEl(this.els.selectedTeam).catch(function (e) {
            return _this3.Error;
        });
    },
    postRender: function postRender() {
        var _this4 = this;

        this.changes = {};

        this.Divisions.get().then(function () {
            return _this4.addDivisions();
        }).catch(function (e) {
            return _this4.Error(e);
        });

        this.views.typeAhead.on('teamSelected', function (team) {
            _this4.Byop.data = team;
            _this4.reset();
        });

        this.views.typeAhead.on('cleared', function () {
            _this4.Byop.data = {};_this4.reset();
        });

        this.views.byopTeamEdit.on('cancelUpdateClicked', function () {
            return _this4.reset();
        });
        this.views.byopTeamEdit.on('cancelClicked', function () {
            return _this4.reset();
        });
        this.views.byopTeamEdit.on('confirmUpdateClicked', function () {
            return _this4.patchByop();
        });

        this.$(this.els.selectedTeam, 'input,select').forEach(function (el) {
            return el.addEventListener('blur', function (e) {
                return _this4.onByopInputBlur(e);
            });
        });
        return this;
    },
    onByopInputBlur: function onByopInputBlur(e) {
        var el = e.target,
            name = el.getAttribute('data-name'),
            modelValue = this.Byop.data[name],
            hasChanged = Boolean((typeof modelValue === 'string' ? modelValue.trim() : modelValue) != (this.Byop.attributes[name].range === "Boolean" ? Boolean(el.value === "true") : el.value.trim()));

        el.classList.toggle('changed', hasChanged);

        if (hasChanged && this.changes[name] === undefined) this.addChange(name);else if (hasChanged && this.changes[name] !== undefined) this.updateChange(name);else if (!hasChanged && this.changes[name] !== undefined) this.removeChange(name);

        this.updateByopButtons();
    },
    removeChange: function removeChange(name) {
        this.els.changes.removeChild(this.els.changes.querySelector('div[data-name="' + name + '"]'));
        delete this.changes[name];
    },
    templateOptions: function templateOptions() {
        return { byopAttributes: this.Byop.attributes, byopKeys: Object.keys(this.Byop.attributes), byopMeta: this.Byop.meta };
    },
    updateByopButtons: function updateByopButtons() {
        this.views.byopTeamEdit[Object.keys(this.changes).length ? 'enable' : 'disable']();
    },
    updateChange: function updateChange(name) {
        this.els.changes.querySelector('div[data-name="' + name + '"]').textContent = this.getChangeText(name);
        this.changes[name] = true;
    }
});

},{"../models/Byop":9,"../models/__proto__":18,"./__proto__":59}],30:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Views: {

        buttonFlow: { model: { data: {
                    disabled: true,
                    states: {
                        start: [{ name: 'doSwap', class: '', text: 'Swap!', nextState: 'confirm' }, { name: 'cancelSwap', class: '', text: 'Cancel', nextState: 'start', emit: true }],
                        confirm: [{ name: 'confirmSwap', class: '', text: 'Are you Sure?', emit: true, nextState: 'start' }, { name: 'cancel', class: '', nextState: 'start', text: 'Cancel', emit: true }]
                    }
                } } },

        typeAhead: {
            query: { waitList: false },
            templateOptions: { label: 'Player name' }
        }
    },

    WaitingList: Object.create(require('../models/__proto__'), { resource: { value: 'waiting-list' } }),

    clear: function clear() {
        this.initWaitingList();

        this.removeTeam = undefined;
        this.updateExplanation();
        this.views.buttonFlow.disable();
        this.views.typeAhead.clear(true);
    },


    events: {
        heading: 'click',
        waitingList: 'change'
    },

    initWaitingList: function initWaitingList() {
        if (this.WaitingList.data.length > 0) {
            this.views.divisionDropdown.select(this.WaitingList.data[0].divisionId);
            this.waitingDivision = this.views.divisionDropdown.getModel(this.WaitingList.data[0].divisionId);
        }
    },
    onHeadingClick: function onHeadingClick() {
        this.els.content.classList.contains('hidden') ? this.showEl(this.els.content) : this.hideEl(this.els.content);
    },
    onSubmitting: function onSubmitting() {
        this.submitting = true;
        this.views.buttonFlow.disable();
    },
    onDoneSubmitting: function onDoneSubmitting() {
        this.submitting = false;
        this.views.buttonFlow.enable;
    },
    onWaitingListChange: function onWaitingListChange() {
        this.updateExplanation();
        this.views.divisionDropdown.select(this.WaitingList.store.id[this.els.waitingList.value].divisionId);
    },
    postRender: function postRender() {
        var _this = this;

        this.views.typeAhead.on('teamSelected', function (team) {
            _this.removeTeam = team;
            _this.updateExplanation();
            _this.views.buttonFlow.enable();
        });

        this.views.typeAhead.on('cleared', function () {
            return _this.clear();
        });

        this.views.divisionDropdown.on('changed', function (division) {
            _this.waitingDivision = division;
            _this.updateExplanation();
        });

        this.views.divisionDropdown.on('added', function () {
            return _this.WaitingList.get({ storeBy: ['id'] }).then(function () {
                return _this.renderWaitingList();
            }).then(function () {
                _this.initWaitingList();
                return Promise.resolve();
            }).catch(function (e) {
                return _this.Error(e);
            });
        });

        this.views.buttonFlow.on('cancelSwapClicked', function () {
            return _this.clear();
        });
        this.views.buttonFlow.on('cancelClicked', function () {
            return _this.clear();
        });
        this.views.buttonFlow.on('confirmSwapClicked', function () {
            if (_this.submitting) return;

            _this.onSubmitting();

            _this.Xhr({ method: 'POST', resource: 'byop-swap', data: JSON.stringify({ out: _this.removeTeam.id, in: _this.els.waitingList.value, divisionId: _this.waitingDivision.id }) }).then(function (result) {
                return _this.Toast.createMessage('success', 'Swapped!').then(function () {
                    _this.els.waitingList.removeChild(_this.els.waitingList.querySelector('option[value="' + _this.els.waitingList.value + '"]'));
                    _this.clear();
                    _this.onDoneSubmitting();
                    return Promise.resolve();
                }).catch(_this.Error);
            }).catch(function (e) {
                _this.Toast.createMessage('error', e.message).catch(_this.Error);
                _this.onDoneSubmitting();
            });
        });

        return this;
    },
    renderWaitingList: function renderWaitingList() {
        var _this2 = this;

        this.WaitingList.data.forEach(function (datum) {
            return _this2.slurpTemplate({ template: '<option value="' + datum.id + '">' + datum.name1 + ', ' + datum.name2 + '</option>', insertion: { el: _this2.els.waitingList } });
        });

        return Promise.resolve();
    },
    updateExplanation: function updateExplanation() {
        if (this.removeTeam === undefined) return this.els.explanation.textContent = '';

        var waitingTeam = this.WaitingList.store.id[this.els.waitingList.value],
            waitingTeamLabel = waitingTeam.name1 + ', ' + waitingTeam.name2,
            removeTeam = this.removeTeam.name1 + ', ' + this.removeTeam.name2,
            removeDivision = this.views.divisionDropdown.getModel(this.removeTeam.divisionId).label;

        var explanation = 'Remove ' + removeTeam + ' ( division: ' + removeDivision + ' ) from event, and put ' + waitingTeamLabel + ' ( division: ' + this.waitingDivision.label + ' ) in their place?  ';

        explanation += this.removeTeam.hasPaid ? this.removeTeam.paidCash ? removeTeam + ' paid in cash, so you will have to manage the refund in person, then update their \'refund\' record attribute.' : this.removeTeam.stripeChargeId ? removeTeam + ' paid via Stripe, so they will be refunded automatically.' : removeTeam + ' has slipped through the system, ask CBaron what\'s up here.' : removeTeam + ' have not paid, so there is no need to refund them.';

        this.els.explanation.textContent = explanation;
    }
});

},{"../models/__proto__":18,"./__proto__":59}],31:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Templates: {
        CartItem: require('./templates/CartItem')
    },

    Views: {
        cartContents: function cartContents() {
            var _this = this;

            return {
                events: { deleteBtn: 'click' },
                model: Object.create(this.Model).constructor({
                    collection: Object.create(this.Model).constructor([], { meta: { key: '_id' } })

                }),
                itemTemplate: function itemTemplate(datum, format) {
                    return _this.Templates.CartItem(Object.assign({ datum: datum, ImageSrc: format.ImageSrc, Currency: format.Currency }));
                },
                onDeleteBtnClick: function onDeleteBtnClick(e) {
                    var listEl = e.target.closest('li');
                    if (!listEl) return;
                    return this.user.deleteFromCart(listEl.getAttribute('data-key'));
                }
            };
        }
    },

    events: {
        checkoutBtn: 'click'
    },

    updateSubtotal: function updateSubtotal() {
        this.els.itemCount.textContent = '(' + this.user.git('cart').length + ' items):';
        this.els.subtotal.textContent = this.Format.Currency.format(this.user.meta.subtotal);
    },


    fkNames: ['DiscClass', 'DiscType'],

    onCheckoutBtnClick: function onCheckoutBtnClick() {
        this.emit('navigate', 'checkout');
    },
    onNavigation: function onNavigation() {
        var _this2 = this;

        (this.isHidden() ? this.show() : Promise.resolve()).then(function () {
            return _this2.els.container.scrollIntoView({ behavior: 'smooth' });
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this3 = this;

        this.cartPromise = new Promise(function (resolve) {
            return _this3.resolver = resolve;
        });

        this.DiscClass = Object.create(this.Model).constructor({}, { resource: 'DiscClass' });
        this.Disc = Object.create(this.Model).constructor({}, { resource: 'Disc' });

        this.DiscClass.get().then(function () {
            return _this3.retrieveCart();
        }).then(function () {
            _this3.updateSubtotal();
            _this3.resolver();
        }).catch(this.Error);

        this.user.on('addToCart', function (item) {
            var existingCartDatum = _this3.views.cartContents.collection.data.find(function (datum) {
                return datum._id === item._id;
            });

            if (existingCartDatum) {
                return _this3.Toast.createMessage('error', 'Item already in shopping cart.');
                //cartDatum.quantity = window.parseFloat( cartDatum.quantity ) + window.parseFloat( item.quantity )
                //this.views.cartContents.update( this.views.cartContents.collection.data )
            } else _this3.views.cartContents.add(item);

            _this3.updateSubtotal();
        });

        this.user.on('deleteFromCart', function (id) {
            var cartDatum = _this3.views.cartContents.collection.data.find(function (datum) {
                return datum._id === id;
            });
            _this3.views.cartContents.remove(cartDatum);
            _this3.updateSubtotal();
        });

        this.user.on('cartReset', function () {
            _this3.views.cartContents.collection.data = [];
            _this3.views.cartContents.empty();
            _this3.updateSubtotal();
        });

        return this;
    },
    retrieveCart: function retrieveCart() {
        var _this4 = this;

        if (!this.user.git('cart') || !this.user.git('cart').length) return Promise.resolve(this.user.set('cart', []));

        this.user.calculateSubtotal();

        return Promise.all(this.user.git('cart').map(function (cartDatum) {
            if (!_this4[cartDatum.collectionName]) _this4[cartDatum.collectionName] = Object.create(_this4.Model).constructor({}, { resource: cartDatum.collectionName });

            var model = _this4[cartDatum.collectionName];

            return model.get({ id: cartDatum.id }).then(function (response) {
                var keys = Object.keys(response);
                if (!keys.length) return Promise.resolve();

                return Promise.all(keys.map(function (key) {
                    if (!_this4.fkNames.includes(key)) return Promise.resolve();

                    return _this4.Xhr({ resource: key, id: response[key] }).then(function (fkDatum) {
                        return response[key] = fkDatum.label;
                    }).catch(_this4.Error);
                })).then(function () {
                    response.collectionName = cartDatum.collectionName;
                    response.quantity = cartDatum.quantity;
                    return Promise.resolve(_this4.views.cartContents.add(response));
                }).catch(_this4.Error);
            }).catch(_this4.Error);
        }));
    }
});

},{"./__proto__":59,"./templates/CartItem":74}],32:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    events: {
        closeBtn: 'click',
        viewCartBtn: 'click'
    },

    onCloseBtnClick: function onCloseBtnClick() {
        this.hide().catch(this.Error);
    },
    onViewCartBtnClick: function onViewCartBtnClick() {
        var _this = this;

        this.hide().then(function () {
            return _this.emit('viewCartClicked');
        }).catch(this.Error);
    },
    update: function update(item, typeDatum) {
        this.addedItem = item;

        this.els.itemImage.src = item.PhotoUrls[0];
        this.els.label.textContent = typeDatum.label;
        this.els.manufacturer.textContent = typeDatum.Manufacturer;
        this.els.price.textContent = this.Format.Currency.format(item.price);

        this.els.subtotal.textContent = 'Subtotal: ' + this.user.meta.subtotal;
        this.els.cartCount.textContent = 'Number of items in cart: ' + this.user.git('cart').length;

        return this;
    }
});

},{"./__proto__":59}],33:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Templates: {
        CheckoutItem: require('./templates/CheckoutItem')
    },

    Views: {
        cartContents: function cartContents() {
            var _this = this;

            return {
                model: Object.create(this.Model).constructor({
                    collection: Object.create(this.Model).constructor([], { meta: { key: '_id' } })
                }),
                itemTemplate: function itemTemplate(datum, format) {
                    return _this.Templates.CheckoutItem(Object.assign({ datum: datum, ImageSrc: format.ImageSrc, Currency: format.Currency }));
                }
            };
        },
        storeTransaction: function storeTransaction() {
            return {
                model: Object.create(this.Model).constructor({}, {
                    attributes: require('../../../models/StoreTransaction').attributes,
                    data: { total: 0 },
                    meta: {
                        noLabel: true,
                        isSold: { hide: true }
                    },
                    resource: 'StoreTransaction'
                }),
                templateOptions: function templateOptions() {
                    return {
                        displayTotal: true
                    };
                },

                toastSuccess: 'Thank you for your purchase! You will receive an email confirmation shortly.'
            };
        }
    },

    events: {
        views: {
            storeTransaction: [['posted', function () {
                var _this2 = this;

                return this.reset().then(function () {
                    return _this2.emit('navigate', '/');
                }).catch(this.Error);
            }]]
        }
    },

    calclulateTotal: function calclulateTotal() {
        var total = this.views.storeTransaction.model.git('shoppingCart').reduce(function (memo, item) {
            if (item.price) memo += window.parseFloat(item.price);
            return memo;
        }, 0);

        this.views.storeTransaction.model.set('total', total);
    },
    onNavigation: function onNavigation(path, data) {
        var _this3 = this;

        (this.isHidden() ? this.show() : Promise.resolve()).then(function () {
            return _this3.els.container.scrollIntoView({ behavior: 'smooth' });
        }).then(function () {
            return _this3.update(data.shoppingCart);
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this4 = this;

        this.views.storeTransaction.model.on('totalChanged', function () {
            return _this4.views.storeTransaction.els.total.textContent = _this4.Format.Currency.format(_this4.views.storeTransaction.model.git('total'));
        });

        this.views.storeTransaction.on('error', function (err) {
            if (err.item) {
                _this4.user.deleteFromCart(err.item._id);
                _this4.emit('navigate', '/shop/cart');
            }
        });

        this.update(this.shoppingCart);

        return this;
    },
    reset: function reset() {
        var _this5 = this;

        this.views.storeTransaction.clear();
        this.views.storeTransaction.data = {};
        this.views.storeTransaction.model.set('total', 0);

        return this.user.resetCart().then(function () {
            return Promise.resolve(_this5.els.container.scrollIntoView({ behavior: 'smooth' }));
        });
    },
    update: function update(cartData) {
        if (!Array.isArray(cartData)) cartData = [cartData];
        this.views.storeTransaction.model.set('shoppingCart', cartData);
        this.views.cartContents.update(cartData);
        this.calclulateTotal();
    }
});

},{"../../../models/StoreTransaction":135,"./__proto__":59,"./templates/CheckoutItem":76}],34:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = Object.assign({}, require('./__proto__'), {

    model: require('../models/CollectionManager'),

    Collection: require('../models/Collection'),
    DocumentModel: require('../models/Document'),
    JsonPropertyModel: require('../models/JsonProperty'),
    WebSocket: require('../WebSocket'),

    Views: {
        collections: function collections() {
            return {
                events: {
                    list: 'click'
                },
                model: Object.create(this.Model).constructor({
                    collection: Object.create(this.Collection),
                    delete: true,
                    droppable: 'document',
                    fetch: true
                }),
                itemTemplate: function itemTemplate(collection) {
                    return '<span>' + collection.name + '</span>';
                },
                templateOptions: { heading: 'Collections', name: 'Collections', toggle: true }
            };
        },
        createCollection: function createCollection() {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create(this.Collection).constructor(),
                templateOptions: { heading: 'Create Collection' }
            };
        },
        deleteCollection: function deleteCollection(model) {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create(this.Collection).constructor(model),
                templateOptions: { message: 'Delete \'' + model.name + '\' Collection?' }
            };
        },
        deleteDocument: function deleteDocument(document) {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create(this.DocumentModel).constructor(document, { resource: this.model.git('currentCollection') }),
                templateOptions: { message: 'Delete \'' + document.label + '\' ' + this.model.git('currentCollection') + '?' }
            };
        },
        documentList: function documentList() {
            var _this = this;

            var meta = this.model.meta[this.model.git('currentCollection')];
            return {
                model: Object.create(this.Model).constructor(Object.assign({
                    add: true,
                    collection: Object.create(this.DocumentModel).constructor([], { resource: this.model.git('currentCollection') }),
                    delete: true,
                    draggable: 'document',
                    pageSize: 100,
                    skip: 0,
                    sort: { 'label': 1 },
                    scrollPagination: true
                }, meta)),
                events: { list: 'click' },
                insertion: { el: this.els.mainPanel },
                itemTemplate: function itemTemplate(datum) {
                    return '<div><span>' + _this.getDisplayAttributeValue(meta, datum) + '</span></div>';
                }
            };
        },
        documentView: function documentView(model) {
            var meta = this.model.meta[model.resource] || {};
            return {
                insertion: { el: this.els.mainPanel },
                model: model,
                templateOptions: function templateOptions() {
                    var heading = meta.displayAttr ? meta.displayAttr === 'createdAt' ? this.Format.Moment.utc(model.git('createdAt')).format('YYYY-MM-DD hh:mm:ss') : model.git(meta.displayAttr) : model.git('label') || model.git('name');

                    return Object.assign({ heading: heading }, meta.templateOptions);
                },

                Views: {
                    typeAhead: {
                        Type: 'Document',
                        templateOptions: { hideSearch: true }
                    }
                }
            };
        }
    },

    getDisplayAttributeValue: function getDisplayAttributeValue(meta, datum) {
        return meta && meta.displayAttr ? meta.displayAttr === 'createdAt' ? this.Format.Moment.utc(datum[meta.displayAttr]).format('YYYY-MM-DD hh:mm:ss') : datum[meta.displayAttr] : datum.label || datum.name;
    },
    createDocumentModel: function createDocumentModel() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var collection = this.model.git('currentCollection');

        return Object.create(this.Model).constructor(data, Object.assign({
            meta: this.model.meta[collection] || {},
            resource: collection }, this.views.collections.collection.store.name[collection].schema));
    },
    getDocument: function getDocument(collection, documentName) {
        var meta = this.model.meta[collection] || {},
            queryAttr = meta.displayAttr || 'name';

        return Object.create(this.Model).constructor({}, { resource: collection }).get({ query: _defineProperty({}, queryAttr, documentName) });
    },
    clearCurrentView: function clearCurrentView() {
        var currentView = this.model.git('currentView');
        return currentView !== 'documentList' ? this.views[currentView].delete({ silent: true }) : this.views[currentView].hide();
    },
    createDocumentList: function createDocumentList(collectionName) {
        var _this2 = this;

        var fetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        this.createView('list', 'documentList');
        this.views.documentList.getCount().then(function (count) {
            return _this2.updateCount(count);
        }).catch(this.Error);
        this.Header.enableTypeAhead({ Type: 'Document', Resource: collectionName, templateOptions: { placeholder: 'Search ' + collectionName + ' collection.' } }, function (document) {
            return _this2.onDocumentSelected(document);
        });
        return this.views.collections.unhideItems().hideItems([this.model.git('currentCollection')]);
    },
    createView: function createView(type, name, model) {
        var _this3 = this;

        this.views[name] = this.factory.create(type, Reflect.apply(this.Views[name], this, [model]));

        if (this.events.views[name]) this.events.views[name].forEach(function (arr) {
            return _this3.views[name].on(arr[0], function (eventData) {
                return Reflect.apply(arr[1], _this3, [eventData]);
            });
        });
        this.model.set('currentView', name);
    },


    events: {
        createCollectionBtn: 'click',
        backBtn: 'click',
        resource: 'click',

        views: {
            collections: [['deleteClicked', function (collection) {
                var _this4 = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this4.createView('deleter', 'deleteCollection', collection));
                }).catch(this.Error);
            }], ['fetched', function () {
                this.views.collections.hideItems([this.model.git('currentCollection')]);
            }], ['itemClicked', function (model) {
                var _this5 = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this5.model.set('currentCollection', model.name));
                }).catch(this.Error);
            }], ['successfulDrop', function (data) {
                this.swapDocument({ document: data.dropped, to: data.droppedOn.name, from: this.model.git('currentCollection') }).catch(this.toastError.bind(this));
            }]],
            createCollection: [['deleted', function () {
                this.model.set('currentView', 'documentList');
            }], ['posted', function (collection) {
                this.views.collections.add(collection);
            }]],
            deleteCollection: [['deleted', function () {
                this.model.set('currentView', 'documentList');
            }], ['modelDeleted', function (model) {
                this.views.collections.remove(model);
            }]],
            deleteDocument: [['deleted', function () {
                this.model.set('currentView', 'documentList');
            }], ['modelDeleted', function (model) {
                this.views.documentList.remove(model);
            }]],
            documentList: [['addClicked', function () {
                var _this6 = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this6.createView('form', 'documentView', _this6.createDocumentModel()));
                }).catch(this.Error);
            }], ['itemClicked', function (document) {
                this.onDocumentSelected(document);
            }], ['dragStart', function (type) {
                this.views.collections.showDroppable(type);
            }], ['dropped', function (data) {
                this.views.collections.hideDroppable();this.views.collections.checkDrop(data);
            }], ['deleteClicked', function (document) {
                var _this7 = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this7.createView('deleter', 'deleteDocument', document));
                }).catch(this.Error);
            }]],
            documentView: [['deleted', function (model) {
                this.model.set('currentView', 'documentList');
            }], ['put', function (model) {
                var _this8 = this;

                if (this.views.documentList.fetched) this.views.documentList.updateItem(this.createDocumentModel(model));
                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this8.model.set('currentView', 'documentList'));
                }).catch(this.Catch);
            }], ['posted', function (model) {
                var _this9 = this;

                if (this.views.documentList.fetched) this.views.documentList.add(model, true);
                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this9.model.set('currentView', 'documentList'));
                }).catch(this.Catch);
            }]]

        }
    },

    onBackBtnClick: function onBackBtnClick() {
        this.emit('navigate', '/admin');
    },
    onCreateCollectionBtnClick: function onCreateCollectionBtnClick() {
        var _this10 = this;

        this.clearCurrentView().then(function () {
            return Promise.resolve(_this10.createView('form', 'createCollection'));
        }).catch(this.Error);
    },
    onDocumentSelected: function onDocumentSelected(document) {
        var _this11 = this;

        return this.clearCurrentView().then(function () {
            return Promise.resolve(_this11.showDocumentView(document));
        }).catch(this.Error);
    },
    onNavigation: function onNavigation(path) {
        var _this12 = this;

        this.path = path;

        (this.isHidden() ? this.show() : Promise.resolve()).then(function () {
            return _this12.clearCurrentView();
        }).then(function () {
            return _this12.showProperView(false);
        }).catch(this.Error);
    },
    onResourceClick: function onResourceClick() {
        var _this13 = this;

        if (this.model.git('currentView') === 'documentList') return;

        this.clearCurrentView().then(function () {
            return Promise.resolve(_this13.model.set('currentView', 'documentList'));
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this14 = this;

        if (this.path.length > 0) this.model.set('currentCollection', this.path[0]);

        this.model.on('currentCollectionChanged', function () {
            return _this14.views.documentList.delete({ silent: true }).then(function () {
                return _this14.createDocumentList(_this14.model.git('currentCollection'));
            }).catch(_this14.Error);
        });

        this.model.on('currentViewChanged', function () {
            var currentView = _this14.model.git('currentView'),
                currentCollection = _this14.model.git('currentCollection'),
                currentCollectionMeta = _this14.model.meta[_this14.model.git('currentCollection')] || {},
                displayAttr = currentCollectionMeta.displayAttr || 'name',
                path = currentView === 'documentView' ? '/' + currentCollection + '/' + _this14.views.documentView.model.git(displayAttr) : currentView === 'documentList' ? '/' + currentCollection : '';

            var splitPath = path.length === 0 ? [] : path.split('/').slice(1);
            _this14.path = splitPath;

            _this14.emit('navigate', '/admin/collection-manager' + path, { silent: true });

            (currentView === 'documentList' && _this14.views.documentList.collection.data.length === 0 ? _this14.views.documentList.fetch() : Promise.resolve()).then(function () {
                return _this14.views[currentView].show();
            }).catch(_this14.Error);
        });

        this.WebSocket.on('createDisc', function (data) {
            if (_this14.path.join('/') === 'Disc/undefined') {
                _this14.WebSocket.send({ type: 'proceedWithUpload', userId: _this14.user.git('id'), discName: _this14.views.documentView.els.name.value });
                _this14.status = 'waitingForUpload';
            }
        });

        this.WebSocket.on('imagesUploaded', function (data) {
            if (_this14.path.join('/') === 'Disc/undefined' && _this14.status === 'waitingForUpload') {

                data.uris.forEach(function (uri) {
                    return _this14.views.documentView.views.PhotoUrls.add({ value: uri });
                });

                _this14.onPosted = function () {
                    _this14.WebSocket.send({ type: 'greatJob', userId: _this14.user.git('id') });
                    _this14.views.documentView.removeListener('posted', _this14.onPosted);
                    _this14.views.documentView.removeListener('error', _this14.onError);
                };

                _this14.onError = function () {
                    _this14.WebSocket.send({ type: 'error', userId: _this14.user.git('id') });
                    _this14.views.documentView.removeListener('posted', _this14.onPosted);
                    _this14.views.documentView.removeListener('error', _this14.onError);
                };

                _this14.views.documentView.once('posted', _this14.onPosted);
                _this14.views.documentView.once('error', _this14.onError);

                _this14.views.documentView.els.submitBtn.click();
            }
        });

        this.showProperView(true).catch(this.Error);

        return this;
    },


    requiresLogin: true,

    requiresRole: 'admin',

    showDocumentView: function showDocumentView(document) {
        this.createView('form', 'documentView', this.createDocumentModel(document));
    },
    showProperView: function showProperView() {
        var _this15 = this;

        var path = this.path;
        return (this.views.documentList ? Promise.resolve() : this.createDocumentList(this.model.git('currentCollection'), this.path.length === 2 ? false : true)).then(function () {
            return path.length === 2 ? _this15.getDocument(path[0], path[1]).then(function (document) {
                return Array.isArray(document) ? Promise.resolve(_this15.model.set('currentView', 'documentList')) : _this15.clearCurrentView().then(function () {
                    return Promise.resolve(_this15.showDocumentView(document, false));
                }).catch(_this15.Error);
            }) : Promise.resolve(_this15.model.git('currentView') === 'documentList' ? '' : _this15.model.set('currentView', 'documentList'));
        });
    },
    swapDocument: function swapDocument(_ref) {
        var _this16 = this;

        var document = _ref.document,
            to = _ref.to,
            from = _ref.from;

        return this.Xhr({ method: 'PATCH', resource: 'Document', id: document._id, data: JSON.stringify({ to: to, from: from }) }).then(function () {
            return Promise.resolve(_this16.views.documentList.remove(document));
        });
    },
    toastError: function toastError(e) {
        this.Error(e);
        this.Toast.createMessage('error', 'Something went wrong.  Try again, or bother Mike Baron.');
    },
    updateCount: function updateCount(count) {
        this.els.resource.textContent = this.model.git('currentCollection') + ' (' + count + ')';
    }
});

},{"../WebSocket":5,"../models/Collection":10,"../models/CollectionManager":11,"../models/Document":13,"../models/JsonProperty":15,"./__proto__":59}],35:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), require('./Submitter'), {

    events: {
        cancelBtn: 'click',
        submitBtn: 'click'
    },

    onCancelBtnClick: function onCancelBtnClick() {
        this.delete();
    },
    onSubmitBtnClick: function onSubmitBtnClick() {
        var _this = this;

        if (this.submitting) return;
        this.onSubmitStart();
        this.submit().then(function () {
            return Promise.resolve(_this.onSubmitEnd());
        }).then(function () {
            return _this.delete();
        }).catch(function (e) {
            return _this.handleSubmissionError(e);
        });
    },
    submit: function submit() {
        var _this2 = this;

        return this.model.delete().then(function (keyValue) {
            _this2.emit('modelDeleted', _this2.model.data);
            _this2.Toast.createMessage('success', _this2.toastSuccess || 'Success');
            return Promise.resolve();
        });
    }
});

},{"./Submitter":54,"./__proto__":59}],36:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = Object.assign({}, require('./__proto__'), {

    DiscClass: Object.create(require('../models/__proto__'), { resource: { value: 'DiscClass' } }),
    Manufacturer: Object.create(require('../models/__proto__'), { resource: { value: 'Manufacturer' } }),
    model: require('../models/DiscShopping'),

    Templates: {
        Disc: require('./templates/Disc'),
        DiscType: require('./templates/DiscType'),
        Filter: require('./templates/Filter')
    },

    events: {
        filters: 'click',
        minMaxBtn: 'click',
        views: {
            availableDiscs: [['addToCart', function (model) {
                this.user.addToCart(model);
            }], ['discDetailsClicked', function (model) {
                this.emit('navigate', model.name, { append: true, silent: true });
                this.showDiscDetails(model, this.selectedDiscType);
            }]],
            cartAddition: [['viewCartClicked', function () {
                this.emit('navigate', '/shop/cart');
            }]],
            productDetails: [['addToCart', function (model) {
                this.user.addToCart(model);
            }]],
            discTypes: [['paginate', function () {
                var _this = this;

                window.requestAnimationFrame(function () {
                    return _this.views.discTypes.fetch(true, {
                        query: _this.discTypeQuery,
                        parse: _this.views.discTypes.collection.parse
                    }).catch(_this.Error);
                });
            }], ['seeDiscsClicked', function (model) {
                this.emit('navigate', model.name, { append: true, silent: true });
                this.showAvailableDiscs(model);
            }]],
            typeAhead: [['itemSelected', function (model) {
                this.emit('navigate', model.name, { append: true });
            }]]
        }
    },

    Views: {
        availableDiscs: function availableDiscs() {
            var _this2 = this;

            return {
                events: {
                    addToCartBtn: 'click',
                    discDetailsBtn: 'click'
                },
                model: Object.create(this.Model).constructor({
                    collection: Object.create(this.Model).constructor([], { resource: 'Disc', meta: { key: 'name' } })
                }),
                itemTemplate: function itemTemplate(datum, format) {
                    return _this2.Templates.Disc(Object.assign({}, { datum: datum, typeDatum: _this2.selectedDiscType, ImageSrc: format.ImageSrc, Currency: format.Currency }));
                },
                templateOptions: function templateOptions() {
                    return { name: 'Available Discs' };
                },
                onAddToCartBtnClick: function onAddToCartBtnClick(e) {
                    var listEl = e.target.closest('li');
                    if (!listEl) return;
                    this.emit('addToCart', this.collection.store.name[listEl.getAttribute('data-key')]);
                },
                onDiscDetailsBtnClick: function onDiscDetailsBtnClick(e) {
                    var listEl = e.target.closest('li');
                    if (!listEl) return;
                    this.emit('discDetailsClicked', this.collection.store.name[listEl.getAttribute('data-key')]);
                }
            };
        },
        discTypes: function discTypes() {
            var _this3 = this;

            return {
                events: { seeDiscsBtn: 'click' },
                model: Object.create(this.Model).constructor({
                    collection: Object.create(this.Model).constructor({}, {
                        meta: { key: 'name' },
                        resource: 'DiscType',
                        parse: function parse(response) {
                            if (!Array.isArray(response)) response = [response];

                            return response.map(function (datum) {
                                if (datum.DiscClass) datum.DiscClass = _this3.DiscClass.store._id[datum.DiscClass].label;
                                if (datum.Manufacturer) datum.Manufacturer = _this3.Manufacturer.store._id[datum.Manufacturer].label;

                                datum.collectionName = 'DiscType';
                            });
                        }
                    }),
                    scrollPagination: true,
                    pageSize: 9,
                    skip: 0,
                    sort: { 'label': 1 }
                }),
                initializeScrollPagination: function initializeScrollPagination() {
                    var _this4 = this;

                    var listEl = this.els.list;

                    this.onScrollPagination = function (e) {
                        if (_this4.fetching) return;
                        if (_this4.scrollHeight - (listEl.scrollTop + _this4.offsetHeight) < 100) _this4.emit('paginate');
                    };

                    listEl.addEventListener('scroll', this.onScrollPagination);
                },

                itemTemplate: function itemTemplate(datum, format) {
                    return _this3.Templates.DiscType(Object.assign({}, { datum: datum, ImageSrc: format.ImageSrc, Currency: format.Currency }));
                },
                onSeeDiscsBtnClick: function onSeeDiscsBtnClick(e) {
                    var listEl = e.target.closest('li');
                    if (!listEl) return;
                    this.emit('seeDiscsClicked', this.collection.store.name[listEl.getAttribute('data-key')]);
                }
            };
        },
        typeAhead: function typeAhead() {
            return {
                templateOptions: { placeholder: 'Search Disc Types' },
                Resource: 'DiscType',
                Type: 'Document'
            };
        }
    },

    createLookupStage: function createLookupStage(query, category, pipeline) {
        var lookup = { $lookup: {
                from: category.name,
                localField: category.name,
                foreignField: '_id',
                as: '_' + category.name
            } },
            match = { $match: query };

        pipeline.push(lookup, match);
    },
    insertFilters: function insertFilters() {
        var _this5 = this;

        this.model.meta.filterCategories.forEach(function (filter) {
            _this5.filters[filter.name] = [];
            var model = filter.fk ? Object.create(_this5.Model).constructor({}, { resource: filter.name }) : undefined;

            (model ? model.get() : Promise.resolve()).then(function () {
                var data = model ? model.data : _this5.model.git(filter.name) ? _this5.model.git(filter.name) : [];
                _this5.slurpTemplate({
                    template: _this5.Templates.Filter({ filter: filter, data: data }),
                    insertion: { el: _this5.els.filters }
                });
            }).catch(_this5.Error);
        });
    },
    onFiltersClick: function onFiltersClick(e) {
        if (e.target.tagName !== "INPUT" || e.target.getAttribute('type') !== 'checkbox') return;

        var inputEl = e.target,
            filterCategory = inputEl.closest('.filter').getAttribute('data-name'),
            filter = inputEl.getAttribute('data-name') || inputEl.getAttribute('data-id');

        if (inputEl.checked) this.filters[filterCategory].push(filter);else {
            var index = this.filters[filterCategory].indexOf(filter);
            this.filters[filterCategory].splice(index, 1);
        }

        this.update();
    },
    onMinMaxBtnClick: function onMinMaxBtnClick(e) {
        var filterEl = e.target.closest('.filter');
        if (!filterEl) return;

        var min = filterEl.querySelector('input[placeholder="Min"]').value,
            max = filterEl.querySelector('input[placeholder="Max"]').value;

        var query = {};
        if (min) query.$gte = min;
        if (max) query.$lte = max;

        this.filters[filterEl.getAttribute('data-name')].push(query);

        this.update();
    },
    onNavigation: function onNavigation(path) {
        var _this6 = this;

        this.path = path;

        (this.isHidden() ? this.show() : Promise.resolve()).then(function () {
            if (path.length > 1) {
                var discTypeDatum = _this6.views.discTypes.collection.store.name[path[1]];

                return (discTypeDatum ? Promise.resolve(discTypeDatum) : _this6.views.discTypes.collection.get({ parse: _this6.views.discTypes.collection.parse, query: { aggregate: [{ $match: { name: path[1] } }, { $lookup: {
                                from: 'Disc',
                                localField: '_id',
                                foreignField: 'DiscType',
                                as: '_Disc'
                            } }, { $match: { '_Disc.isSold': 'false' } }] } })).then(function (discTypeDatum) {
                    if (path.length === 2) return _this6.showAvailableDiscs(discTypeDatum);
                    if (path.length > 2) {
                        var discDatum = discTypeDatum._Disc.find(function (discDatum) {
                            return discDatum.name === path[2];
                        });
                        return discDatum ? _this6.showDiscDetails(discDatum, discTypeDatum) : Promise.resolve();
                    }
                }).catch(_this6.Error);
            }

            return Promise.all(Object.keys(_this6.views).map(function (view) {
                return _this6.views[view].hide();
            })).then(function () {
                return Promise.all([_this6.views.typeAhead.show(), _this6.views.discTypes.show(), _this6.showEl(_this6.els.leftPanel)]);
            });
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this7 = this;

        this.filters = {};

        this.discTypeQuery = {
            aggregate: [{ $lookup: {
                    from: 'Disc',
                    localField: '_id',
                    foreignField: 'DiscType',
                    as: '_Disc'
                } }, { $match: { '_Disc.isSold': 'false' } }]
        };

        Promise.all([this.model.get(), this.DiscClass.get({ storeBy: ['_id'] }), this.Manufacturer.get({ storeBy: ['_id'] }), this.views.discTypes.fetch(false, { query: this.discTypeQuery })]).then(function () {
            _this7.insertFilters();
            if (_this7.path.length > 1) _this7.onNavigation(_this7.path);
        }).catch(this.Error);

        this.user.on('addToCart', function (item) {
            return _this7.showCartAddition(item);
        });

        return this;
    },
    showAvailableDiscs: function showAvailableDiscs(datum) {
        var _this8 = this;

        this.selectedDiscType = datum;

        return Promise.all(Object.keys(this.views).map(function (view) {
            return _this8.views[view].hide();
        }).concat(this.hideEl(this.els.leftPanel))).then(function () {
            return _this8.views.availableDiscs.show();
        }).then(function () {
            if (datum._Disc.length) {
                datum._Disc = datum._Disc.filter(function (disc) {
                    return disc.isSold === 'false';
                }).map(function (disc) {
                    disc.DiscClass = datum.DiscClass;
                    disc.DiscType = datum.label;
                    return disc;
                });
            }

            _this8.views.availableDiscs.els.heading.textContent = 'Available ' + datum.label + ' Discs';
            return Promise.resolve(_this8.views.availableDiscs.update(datum._Disc));
        }).catch(this.Error);
    },
    showCartAddition: function showCartAddition(item) {
        this.views.cartAddition.update(item, this.selectedDiscType).show().catch(this.Error);
    },
    showDiscDetails: function showDiscDetails(discModel, discTypeModel) {
        var _this9 = this;

        this.selectedDiscType = discTypeModel;

        return Promise.all(Object.keys(this.views).map(function (view) {
            return _this9.views[view].hide();
        }).concat(this.hideEl(this.els.leftPanel))).then(function () {
            return _this9.views.productDetails.show();
        }).then(function () {
            return Promise.resolve(_this9.views.productDetails.update(discModel, discTypeModel));
        }).catch(this.Error);
    },
    update: function update() {
        var _this10 = this;

        var pipeline = [{ $lookup: {
                from: 'Disc',
                localField: '_id',
                foreignField: 'DiscType',
                as: '_Disc'
            }
        }];

        var discMatch = { $match: { $and: [{ '_Disc.isSold': 'false' }] } };

        pipeline.push(discMatch);

        this.model.meta.filterCategories.forEach(function (category) {
            var query = {};

            if (!_this10.filters[category.name] || !_this10.filters[category.name].length) return;

            var filters = _this10.filters[category.name].map(function (filter) {
                var key = category.fk ? '_' + category.name + '.name' : '_' + category.collection + '.' + category.name;

                var val = category.fk ? _this10[category.name].store._id[filter].name : filter;

                return _defineProperty({}, key, val);
            });

            if (filters.length === 1) query = filters[0];else if (filters.length > 1) query['$or'] = filters;

            if (category.collection === 'Disc') discMatch.$match.$and.push(query);else _this10.createLookupStage(query, category, pipeline);
        });

        this.discTypeQuery = { aggregate: pipeline };

        this.views.discTypes.collection.data = {};
        this.views.discTypes.model.set('skip', 0);
        this.views.discTypes.empty();

        return this.views.discTypes.fetch(false, { query: this.discTypeQuery }).then(function () {
            return _this10.views.discTypes.initializeScrollPagination();
        }).catch(this.Error);
    }
});

},{"../models/DiscShopping":12,"../models/__proto__":18,"./__proto__":59,"./templates/Disc":80,"./templates/DiscType":84,"./templates/Filter":89}],37:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Byop: require('../models/Byop'),

    Team: require('./templates/Team'),

    addTeam: function addTeam(team) {
        this.model.data.players.push(team);

        this.slurpTemplate({
            template: this.Team(Object.assign(team, {
                discs: this.getDiscLabel(team.disc1) + '(' + team.weight1 + 'g), ' + this.getDiscLabel(team.disc2) + '(' + team.weight2 + 'g)',
                shirts: this.getShirtLabel(team.shirtSize1) + ', ' + this.getShirtLabel(team.shirtSize2)
            })),
            insertion: { el: this.els.players }
        });
    },
    getDiscLabel: function getDiscLabel(value) {
        var disc = this.discs.store.value[value];
        return disc ? disc.label : 'Undecided';
    },
    getShirtLabel: function getShirtLabel(value) {
        var shirt = this.shirts.store.value[value];
        return shirt ? shirt.label : 'Undecided';
    },
    notifyIfEmpty: function notifyIfEmpty() {
        if (this.model.data.players.length === 0) this.els.isEmpty.classList.remove('hidden');
    },
    postRender: function postRender() {
        this.model.data.players = [];

        this.discs = Object.create(this.Model, {}).constructor(this.Byop.meta.discs.map(function (disc) {
            return { value: disc.value, label: disc.label.slice(0, disc.label.indexOf('(')) };
        }), { storeBy: ['value'] });

        this.shirts = Object.create(this.Model, {}).constructor(this.Byop.meta.shirtSizes, { storeBy: ['value'] });

        return this;
    }
});

},{"../models/Byop":9,"./__proto__":59,"./templates/Team":106}],38:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Divisions: Object.create(require('../models/__proto__'), { resource: { value: 'division' } }),

    addDivisions: function addDivisions() {
        var _this = this;

        this.Divisions.data.forEach(function (division) {
            return _this.slurpTemplate({ template: '<option value="' + division.id + '">' + division.label + '</option>', insertion: { el: _this.els.division } });
        });

        this.emit('added');

        return Promise.resolve();
    },


    events: {
        division: 'change'
    },

    getModel: function getModel(id) {
        return this.Divisions.store.id[id];
    },
    onDivisionChange: function onDivisionChange() {
        this.emit('changed', this.Divisions.store.id[this.els.division.value]);
    },
    postRender: function postRender() {
        var _this2 = this;

        this.Divisions.get({ storeBy: ['id'] }).then(function () {
            return _this2.addDivisions();
        }).catch(function (e) {
            return _this2.Error(e);
        });

        return this;
    },
    select: function select(id) {
        this.els.division.value = id;
    }
});

},{"../models/__proto__":18,"./__proto__":59}],39:[function(require,module,exports){
'use strict';

module.exports = Object.create(Object.assign({}, require('./__proto__'), {

    Icons: {
        error: require('./templates/lib/error')(),
        success: require('./templates/lib/checkmark')()
    },

    bindEvents: function bindEvents() {
        document.body.addEventListener('mousedown', this.onMouseDown);
        document.body.addEventListener('mouseup', this.onMouseUp);
        document.body.addEventListener('mousemove', this.onMouseMove);
    },
    listen: function listen() {
        this.listeners++;

        if (this.listeners === 1) this.bindEvents();
    },


    name: 'Dragger',

    postRender: function postRender() {
        var _this = this;

        this.listeners = 0;

        this.onMouseDown = function (e) {
            return _this.emit('mousedown', e);
        };
        this.onMouseUp = function (e) {
            return _this.emit('mouseup', e);
        };
        this.onMouseMove = function (e) {
            return _this.emit('mousemove', e);
        };

        return this;
    },
    stopListening: function stopListening() {
        this.listeners--;

        if (this.listeners === 0) this.unbindEvents();
    },


    template: require('./templates/Dragger'),

    unbindEvents: function unbindEvents() {
        document.body.removeEventListener('mousedown', this.onMouseDown);
        document.body.removeEventListener('mouseup', this.onMouseUp);
        document.body.removeEventListener('mousemove', this.onMouseMove);
    }
}), {});

},{"./__proto__":59,"./templates/Dragger":88,"./templates/lib/checkmark":112,"./templates/lib/error":113}],40:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {
    postRender: function postRender() {
        this.on('imgLoaded', function (el) {
            if (!el.parentNode) return;
            el.parentNode.nextElementSibling.classList.remove('hidden');
        });

        return this;
    }
});

},{"./__proto__":59}],41:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Submitter = require('./Submitter');

module.exports = Object.assign({}, require('./__proto__'), Submitter, {

    events: Object.assign(Submitter.events, {
        deleteBtn: 'click'
    }),

    clear: function clear() {
        var _this = this;

        this.inputEls.forEach(function (el) {
            return el.value = '';
        });

        if (this.views) {
            Object.keys(this.views).forEach(function (key) {
                var view = _this.views[key];

                if (view.itemViews) {
                    view.itemViews.forEach(function (itemView) {
                        if (itemView.name !== 'Form') return;
                        itemView.clear();
                    });
                } else {
                    if (view.name !== 'Form') return;
                    view.clear();
                }
            });
        }
    },
    getElementValue: function getElementValue(el, attribute) {
        if (attribute === undefined || !attribute.fk && typeof attribute.range === 'string' && attribute.range) return el.value.trim();

        /*
        if( attribute.fk ) {
            let selectedItem = this.views[ attribute.name ].selectedItem
            return selectedItem
                ? selectedItem._id || selectedItem.id
                : undefined
        } else if( typeof attribute.range === 'object' ) {
            return el.getFormValues()
        } else if( attribute.range === "List" ) { return Array.from( this.views[ attribute.name ].els.list.children ).map( item => this.getElementValue( item, { range: attribute.itemRange } ) ) }
        */
    },
    getFormValues: function getFormValues() {
        var _this2 = this;

        var attributes = this.model.attributes;

        var data = this.reducer(Object.keys(this.els), function (key) {
            return (/(INPUT|SELECT|TEXTAREA)/.test(_this2.els[key].tagName) ? _defineProperty({}, key, _this2.getElementValue(_this2.els[key], attributes.find(function (attribute) {
                    return attribute.name === key;
                }))) : {}
            );
        });

        attributes.forEach(function (attribute) {
            if (attribute.range === 'DateTime') {
                data[attribute.name] = new Date();
            } else if (_this2.model.meta[attribute.name || attribute.fk] && _this2.model.meta[attribute.name || attribute.fk].hide) return;else if (attribute.fk) {
                data[attribute.fk] = _this2.views[attribute.fk].getSelectedId();
            } else if (_typeof(attribute.range) === "object") {
                data[attribute.name] = _this2.views[attribute.name].getFormValues();
            } else if (attribute.range === "List") {
                data[attribute.name] = attribute.itemView ? _this2.views[attribute.name].itemViews.map(function (view) {
                    return view.getFormValues();
                }) : Array.from(_this2.views[attribute.name].els.list.children).map(function (itemEl) {
                    return _this2.getElementValue(itemEl.querySelector('.item input'), { range: attribute.itemRange });
                });
            }
        });

        return data;
    },
    handleValidationError: function handleValidationError(attr) {
        this.Toast.createMessage('error', attr.error);
        this.els[attr.name].classList.add('error');
    },
    initTypeAheads: function initTypeAheads() {
        var _this3 = this;

        this.model.attributes.forEach(function (attribute) {
            if (_this3.model.meta[attribute.name || attribute.fk] && _this3.model.meta[attribute.name || attribute.fk].hide) return;else if (attribute.fk) _this3.views[attribute.fk].setResource(attribute.fk).initAutoComplete(_this3.model.git(attribute.fk));else if (_typeof(attribute.range) === "object") {
                if (!_this3.Views) _this3.Views = {};

                _this3.Views[attribute.name] = {
                    model: Object.create(_this3.Model).constructor(_this3.model.data[attribute.name], {
                        attributes: attribute.range,
                        meta: _this3.model.meta
                    }),
                    klass: attribute.klass,
                    templateOptions: { hideButtonRow: true }
                };
                var el = _this3.els[attribute.name];
                delete _this3.els[attribute.name];
                _this3.subviewElements = [{ el: el, view: 'form', name: attribute.name }];
                _this3.renderSubviews();
            } else if (attribute.range === "List") {
                if (!_this3.Views) _this3.Views = {};

                var view = attribute.itemView ? 'viewList' : 'list',
                    collectionData = _this3.model.git(attribute.name) ? view === 'viewList' ? _this3.model.git(attribute.name) : _this3.model.git(attribute.name).map(function (datum) {
                    return { value: datum };
                }) : [];

                _this3.Views[attribute.name] = attribute.itemView ? {
                    model: Object.create(_this3.model).constructor({
                        add: true,
                        collection: Object.create(_this3.Model).constructor(collectionData, { meta: _this3.model.meta }),
                        delete: true,
                        view: attribute.itemView,
                        range: attribute.itemRange
                    }),
                    templateOptions: { addText: attribute.addText }
                } : {
                    model: Object.create(_this3.model).constructor({
                        add: true,
                        collection: Object.create(_this3.Model).constructor(collectionData, { meta: Object.assign(_this3.model.meta, { key: 'value' }) }),
                        delete: true
                    }),
                    itemTemplate: function itemTemplate(datum) {
                        return Reflect.apply(_this3.Format.GetFormField, _this3.Format, [{ range: attribute.itemRange }, datum.value]);
                    }
                };

                var _el = _this3.els[attribute.name];
                delete _this3.els[attribute.name];
                _this3.subviewElements = [{ el: _el, view: view, name: attribute.name }];
                _this3.renderSubviews();
                _this3.views[attribute.name].on('addClicked', function () {
                    return _this3.views[attribute.name].add({ value: '' });
                });
                if (view === 'list') _this3.views[attribute.name].on('deleteClicked', function (datum) {
                    return _this3.views[attribute.name].remove(datum);
                });
            }
        });
    },
    onDeleteBtnClick: function onDeleteBtnClick() {
        this.delete().catch(this.Error);
    },
    postRender: function postRender() {
        var _this4 = this;

        this.inputEls = this.els.container.querySelectorAll('input, select, textarea');

        if (this.allowEnterKeySubmission) this.els.container.addEventListener('keyup', function (e) {
            if (e.keyCode === 13) _this4.onSubmitBtnClick();
        });

        this.inputEls.forEach(function (el) {
            return el.addEventListener('focus', function () {
                return el.classList.remove('error');
            });
        });

        if (this.model) {
            this.model.on('validationError', function (attr) {
                return _this4.handleValidationError(attr);
            });
            this.initTypeAheads();
            this.key = this.model.metadata ? this.model.metadata.key : '_id';
        }

        return this;
    },
    submit: function submit() {
        var _this5 = this;

        if (!this.validate(this.getFormValues())) return Promise.resolve(this.onSubmitEnd());

        var isPost = !Boolean(this.model.data[this.key]);

        return (isPost ? this.model.post() : this.model.put(this.model.data[this.key], this.omit(this.model.data, [this.key]))).then(function () {
            _this5.emit(isPost ? 'posted' : 'put', Object.assign({}, _this5.model.data));
            _this5.model.data = {};
            _this5.clear();
            _this5.onSubmitEnd();
            return _this5.Toast.createMessage('success', _this5.toastSuccess || 'Success');
        });
    },
    validate: function validate(data) {
        var _this6 = this;

        var valid = true;

        if (!this.model.validate(data)) valid = false;

        if (this.views) {
            Object.keys(this.views).forEach(function (key) {
                var view = _this6.views[key];

                if (view.itemViews) {
                    view.itemViews.forEach(function (itemView) {
                        if (itemView.name !== 'Form') return;
                        if (!itemView.validate(itemView.getFormValues())) valid = false;
                    });
                } else {
                    if (view.name !== 'Form') return;
                    if (!view.validate(view.getFormValues())) valid = false;
                }
            });
        }

        return valid;
    }
});

},{"./Submitter":54,"./__proto__":59}],42:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Views: {
        giftCardTransaction: function giftCardTransaction() {
            return {
                model: Object.create(this.Model).constructor({}, {
                    attributes: require('../../../models/GiftCardTransaction').attributes,
                    data: { total: 0 },
                    meta: {
                        noLabel: true,
                        isProcessed: { hide: true }
                    },
                    resource: 'GiftCardTransaction'
                }),
                templateOptions: function templateOptions() {
                    return {
                        displayTotal: true,
                        heading: 'Contact',
                        prompt: 'Enter your information below.'
                    };
                },
                onCancelBtnClick: function onCancelBtnClick() {
                    this.emit('cancel');
                },

                toastSuccess: 'Thank you for your purchase! You will receive an email confirmation shortly.',
                submit: function submit() {
                    var _this = this;

                    if (!this.validate(this.getFormValues())) return Promise.resolve(this.onSubmitEnd());

                    var isPost = !Boolean(this.model.data[this.key]);

                    return (isPost ? this.model.post() : this.model.put(this.model.data[this.key], this.omit(this.model.data, [this.key]))).then(function () {
                        return _this.Toast.createMessage('success', _this.toastSuccess || 'Success');
                    }).then(function () {
                        _this.emit(isPost ? 'posted' : 'put', Object.assign({}, _this.model.data));
                        _this.model.data = {};
                        _this.clear();
                        _this.onSubmitEnd();
                    });
                }
            };
        }
    },

    events: {
        views: {
            giftCardTransaction: [['posted', function () {
                var _this2 = this;

                return this.reset().then(function () {
                    return _this2.emit('navigate', '/');
                }).catch(this.Error);
            }]]
        }
    },

    postRender: function postRender() {
        var _this3 = this;

        this.views.giftCardTransaction.on('cancel', function () {
            return _this3.reset();
        });
        this.views.giftCardTransaction.on('error', function (e) {
            return true;
        });

        this.views.giftCardTransaction.model.on('totalChanged', function () {
            return _this3.views.giftCardTransaction.els.total.textContent = _this3.Format.Currency.format(_this3.views.giftCardTransaction.model.git('total'));
        });

        this.recipients = this.views.giftCardTransaction.views.recipients;

        this.recipients.itemViews.forEach(function (view) {
            return view.els.amount.addEventListener('input', function () {
                return _this3.updateTotal();
            });
        });

        this.recipients.on('itemAdded', function (view) {
            view.els.amount.addEventListener('input', function () {
                return _this3.updateTotal();
            });
        }).on('itemDeleted', function () {
            if (_this3.views.giftCardTransaction.model.git('total') !== 0) _this3.updateTotal();
        });

        return this;
    },
    reset: function reset() {
        var _this4 = this;

        this.views.giftCardTransaction.clear();
        this.views.giftCardTransaction.model.set('total', 0);

        return this.recipients.reduceToOne().then(function () {
            return _this4.els.container.scrollIntoView({ behavior: 'smooth' });
        }).catch(this.Error);
    },
    updateTotal: function updateTotal() {
        var total = this.recipients.itemViews.reduce(function (memo, view) {
            var val = view.els.amount.value.trim();
            if (!val) return memo;else if (window.parseFloat(val) > 1000 || window.parseFloat(val) < 0) val = 0;
            return memo + window.parseFloat(val);
        }, 0);

        if (Number.isNaN(total) || total < 0) total = 0;

        this.views.giftCardTransaction.model.set('total', total);
    }
});

},{"../../../models/GiftCardTransaction":131,"./__proto__":59}],43:[function(require,module,exports){
'use strict';

module.exports = Object.create(Object.assign({}, require('./__proto__'), {

    Views: {
        typeAhead: {}
    },

    data: ['shop', 'courses', 'events'],

    disableTypeAhead: function disableTypeAhead() {
        var _this = this;

        if (!this.views.typeAhead) return Promise.resolve();

        this.views.typeAhead.removeAllListeners('itemSelected');
        this.els.container.classList.remove('has-typeahead');

        return this.views.typeAhead.delete().then(function () {
            return delete _this.views.typeAhead;
        }).catch(this.Error);
    },
    enableTypeAhead: function enableTypeAhead(meta, method) {
        var _this2 = this;

        (this.views.typeAhead ? this.disableTypeAhead() : Promise.resolve()).then(function () {
            _this2.Views.typeAhead = meta;
            _this2.slurpTemplate({ template: '<div data-view="typeAhead"></div>', insertion: { el: _this2.els.typeAhead } });
            _this2.renderSubviews();
            _this2.els.container.classList.add('has-typeahead');
            _this2.views.typeAhead.on('itemSelected', function (item) {
                return method(item);
            });
        });
    },


    events: {
        logo: 'click',
        logout: 'click',
        shopBtn: 'click',
        shoppingCart: 'click'
    },

    insertion: function insertion() {
        return { el: document.querySelector('#content'), method: 'insertBefore' };
    },


    name: 'Header',

    onLogoClick: function onLogoClick() {
        this.emit('navigate', '/');
    },
    onLogoutClick: function onLogoutClick() {
        this.user.logout();
    },
    onShopBtnClick: function onShopBtnClick() {
        this.emit('navigate', '/shop');
    },
    onShoppingCartClick: function onShoppingCartClick() {
        this.emit('navigate', '/shop/cart');
    },
    onUserLogin: function onUserLogin() {
        this.els.profileBtn.classList.remove('hidden');
        this.els.name.textContent = this.user.data.name || this.user.data.email;
    },
    onUserLogout: function onUserLogout() {
        this.els.profileBtn.classList.add('hidden');
        this.els.name.textContent = '';
    },
    postRender: function postRender() {
        var _this3 = this;

        if (this.user.isLoggedIn()) this.onUserLogin();

        this.updateCartCount();

        this.user.on('got', function () {
            if (_this3.user.isLoggedIn()) _this3.onUserLogin();
            _this3.updateCartCount();
        });

        this.user.on('logout', function () {
            return _this3.onUserLogout();
        });

        this.user.on('cartChanged', function () {
            return _this3.updateCartCount();
        });

        return this;
    },


    template: require('./templates/Header'),

    updateCartCount: function updateCartCount() {
        this.els.cartCount.textContent = this.user.git('cart') ? '(' + this.user.data.cart.length + ')' : '(0)';
    },


    user: require('../models/User')

}), {});

},{"../models/User":17,"./__proto__":59,"./templates/Header":93}],44:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    data: ['boom', 'dga', 'disc-mania', 'discraft', 'dynamic', 'innova', 'latitude', 'legacy', 'millenium', 'westside'],

    events: {
        byopBtn: 'click',
        byopResultsBtn: 'click',
        ezFinder: 'click',
        giftCardBtn: 'click'
    },

    onByopBtnClick: function onByopBtnClick() {
        this.emit('navigate', 'byop');
    },
    onByopResultsBtnClick: function onByopResultsBtnClick() {
        this.emit('navigate', 'byop-results');
    },
    onEzFinderClick: function onEzFinderClick() {
        this.emit('navigate', 'shop');
    },
    onGiftCardBtnClick: function onGiftCardBtnClick() {
        this.emit('navigate', 'gift-cards');
    },
    postRender: function postRender() {
        this.on('imgLoaded', function (el) {
            if (!el.parentNode) return;
            el.parentNode.nextElementSibling.classList.remove('hidden');
        });

        return this;
    }
});

},{"./__proto__":59}],45:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    events: {
        addButton: 'click'
    },

    Model: require('../models/Json'),

    Templates: {
        Key: function Key(key, value, isEditable) {
            return '<li data-js="' + key + '"><div contenteditable="' + isEditable + '">' + (value || '') + '</div><div data-view="buttonFlow" data-name="</li>';
        }
    },

    addItem: function addItem(key) {
        var value = this.model.git(key),
            isEditable = this.model.isEditable(key);
        this.slurpTemplate({ template: this.Templates.Key(key, key, isEditable), insertion: { el: this.els.data } });
        this.views[key] = this.factory.create(this.model.getViewName(value), { model: { data: value, meta: { editable: isEditable } }, insertion: { el: this.els[key] } });
    },
    displayData: function displayData() {
        var _this = this;

        Object.keys(this.model.data).sort().forEach(function (key) {
            return _this.addItem(key);
        });
    },
    onAddButtonClick: function onAddButtonClick() {
        var time = new Date().getTime();
        this.slurpTemplate({ template: this.Templates.Key(time, 'new-attribute', true), insertion: { el: this.els.data } });
        this.views[time] = this.factory.create('literal', { model: { data: 'new-value', meta: { editable: true } }, insertion: { el: this.els[time] } });

        this.els[time].firstChild.focus();
    },
    postRender: function postRender() {
        if (!this.model) return this;

        this.model = this.Model.constructor(this.model.data);

        this.displayData();

        return this;
    },
    update: function update(data) {
        var _this2 = this;

        Promise.all(Object.keys(this.views).map(function (key) {
            return _this2.views[key].delete().then(function () {
                _this2.els.container.removeChild(_this2.els[key]);
                delete _this2.els[key];
                return Promise.resolve();
            });
        })).then(function () {
            Object.assign(_this2, { model: _this2.Model.constructor(data), views: {} });
            _this2.displayData();
            return Promise.resolve();
        }).catch(this.Error);
    }
}

/*
addItem( model ) {
    const type = model.get( 'type' ),
        prototype = this.itemTypes[ type ]
        require('./util/List').prototype.addItem.call( this, model, prototype )
     this.itemViews[ model.cid ]
        .on( 'rowClicked', () => Array.isArray( this.JSONObject ) 
                ? this.addNewLiteral()
                : this.addNewObject() 
        )
        .on( 'addDimension', ( type, model ) => {
            const valueType = this.format.capitalizeFirstLetter( type ),
                key = model.get( 'key' ),
                value = ( type === 'object' ) ? { } : [ ],
                attributes = { key: key, value: value, valueType: valueType, editable: true, expandable: true, newDimension: true }
             this.items.add( new this.models.JSONProperty( attributes, { parse: true } ) ) 
            this.items.remove( model )
        } )
        .on( 'deleteItem', model => this.items.remove( model ) )
        .on( 'addProperty', ( type, model ) => {
            this.addNewObject( model )
            this.items.remove( model )
        } )
 },
 addNewLiteral() {
    this.items.add( new this.models.JSONProperty(
        { value: '', editable: true, newProperty: true }, { parse: true } )
    )
},
 addNewObject( model ) {
    const key = ( model ) ? model.get( 'value' ) : ''
     this.items.add( new this.models.JSONProperty(
        { key: key, value: '', type: 'object', editable: true, newProperty: true }, { parse: true } )
    )
},
 collection() { return { comparator: 'key' } },
 getJSON() {
    const total = { },
        arrayTotal = [ ]
     Object.keys( this.itemViews ).forEach( id => {
        let model = this.itemViews[ id ].model,
            key = model.get( 'key' ),
            value = model.get( 'value' ),
            property
         if( value === 'true' || value === 'false' ) value = JSON.parse( value )
         if( key && Array.isArray( this.JSONObject ) ) {
            let obj = { }
            obj[ key ] = value
            property = obj
        } else property = value
         Array.isArray( this.JSONObject )
            ? arrayTotal.push( ( model.get( 'expandable' ) ) ? this.itemViews[ id ].subItems.getJSON() : property )
            : total[ key ] = ( model.get( 'expandable' ) ) ? this.itemViews[ id ].subItems.getJSON() : value
    } )
     return ( arrayTotal.length ) ? arrayTotal : total
},
 itemTypes: {
    object: require('./Object'),
    array: require('./Array'),
    literal: require('./Literal')
},
 models: {
    JSONProperty: require('../models/JSONProperty')
},
 noItemCheck: function() {
    const container = this.templateData.container
    if( this.items.length === 0 ) {
        container.addClass('no-items')
        if( this.editable ) this.templateData.noItemsMessage.css( 'display', 'block' )
    } else {
        container.removeClass('no-items')
        if( this.editable ) this.templateData.noItemsMessage.css( 'display', 'none' )
    }
},
 postRender() {
    require('./util/List').prototype.postRender.call(this)
     Array.isArray( this.JSONObject )
        ? ( this.newDimension )
            ? this.addNewLiteral()
            : this.processArray( this.JSONObject )
        : ( this.newDimension )
            ? this.addNewObject()
            : this.processObject( this.JSONObject )
     this.templateData.noItemsMessage.on( 'click', () => {
        Array.isArray( this.JSONObject ) ? this.addNewLiteral() : this.addNewObject()
        this.templateData.noItemsMessage.css( 'display', 'none' )
    } )
     this.noItemCheck()
},
 processArray( jsonArray ) {
    jsonArray.forEach( item => {
        if( Object.prototype.toString.call( item ) === '[object Object]' ) return this.processObject( item )
         this.items.add( new this.models.JSONProperty(
            { key: null, value: item, editable: this.editable }, { parse: true } ) )
    } )
},
 processObject( jsonObject ) {
    Object.keys( jsonObject ).forEach( key => {
        this.items.add( new this.models.JSONProperty(
            { key: key, value: jsonObject[ key ], editable: this.editable }, { parse: true } ) )
    } )
},
 template: require('./templates/JSON')
*/

);

},{"../models/Json":14,"./__proto__":59}],46:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = Object.assign({}, require('./__proto__'), {

    Views: {
        Literal: function Literal() {
            return {
                model: { data: this.model.data.value, meta: { editable: this.model.isEditable(this.model.data.key) } }
            };
        },
        buttonFlow: function buttonFlow() {
            return {
                model: {
                    data: {
                        states: {
                            start: [{ name: 'delete', svg: this.Format.GetIcon('garbage', { name: 'delete' }), nextState: 'confirmDelete', emit: true }],
                            confirmDelete: [{ name: 'doDelete', class: 'link', text: 'Delete?', emit: true, nextState: 'start' }, { name: 'cancel', svg: require('./templates/lib/ex')({ name: 'cancel' }), nextState: 'start', emit: true }]
                        }
                    }
                }
            };
        }
    },

    getProposedModel: function getProposedModel() {
        return { key: this.els.key.textContent, value: this.views.Literal.els.container.textContent };
    },
    getTemplateOptions: function getTemplateOptions() {
        return {
            viewName: Array.isArray(this.model.data.value) ? 'Array' : _typeof(this.model.data.value) === 'object' ? 'Json' : 'Literal',

            isEditable: this.model.isEditable(this.model.data.key),

            model: this.model.data
        };
    },
    postRender: function postRender() {
        var _this = this;

        if (!this.model.isEditable(this.model.data.key)) {
            this.views.buttonFlow.disable();return this;
        }

        this.views.buttonFlow.on('doDeleteClicked', this.delete.bind(this));

        this.views.buttonFlow.on('deleteClicked', function () {
            return _this.els.container.classList.add('confirm-delete');
        });
        this.views.buttonFlow.on('cancelClicked', function () {
            return _this.els.container.classList.remove('confirm-delete');
        });

        return this;
    }
});

},{"./__proto__":59,"./templates/lib/ex":114}],47:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Super = require('./__proto__');

module.exports = Object.assign({}, Super, {
    add: function add(datum) {
        var _this = this;

        var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!this.collection) this.collection = Object.create(this.Model);

        var keyValue = datum[this.key];
        var insertion = { el: this.els.list };

        this.collection.add(datum);
        this.collection.store[this.key][keyValue] = datum;

        if (sort && this.collection.data.length !== 1) {
            this.collection.sort(this.model.git('sort'));
            var index = this.collection.data.findIndex(function (datum) {
                return datum[_this.key] == keyValue;
            });

            if (index !== -1) insertion = this.els.list.children.item(index) ? { method: 'insertBefore', el: this.els.list.children.item(index) } : { el: this.els.list };
        }

        this.updateStyle();

        if (this.itemTemplate) {

            this.slurpTemplate({
                insertion: insertion,
                renderSubviews: true,
                template: this.getItemTemplateResult(keyValue, datum)
            });

            //this.els.list.querySelector(`*[data-key="${keyValue}"]`).scrollIntoView( { behavior: 'smooth' } )

            return;
        }

        this.itemViews[keyValue] = this.factory.create(this.model.git('view'), { insertion: insertion, model: Object.create(this.collection.model).constructor(datum) }).on('deleted', function () {
            return _this.onDeleted(datum);
        });

        this.itemViews[keyValue].els.container.scrollIntoView({ behavior: 'smooth' });
    },
    checkDrag: function checkDrag(e) {
        if (!this.dragging) return;

        this.Dragger.els.container.classList.remove('hidden');
        this.Dragger.els.container.style.top = e.clientY + 5 + 'px';
        this.Dragger.els.container.style.left = e.clientX + 5 + 'px';
    },
    checkDragEnd: function checkDragEnd(e) {
        if (!this.dragging) return;

        this.emit('dropped', { e: e, type: this.model.git('draggable'), model: this.dragging.model });
        this.dragging.el.classList.remove('is-dragging');
        this.els.list.classList.remove('is-dragging');
        this.Dragger.els.container.classList.add('hidden');
        this.dragging = false;
    },
    checkDragStart: function checkDragStart(e) {
        var closestList = e.target.closest('.List');
        if (closestList === null || !closestList.isSameNode(this.els.container)) return;

        var el = e.target.closest('.item');

        if (!el) return null;

        var model = this.collection.store[this.key][el.parentNode.getAttribute('data-key')];
        this.dragging = { el: el.parentNode, model: model };
        this.dragging.el.classList.add('is-dragging');
        this.els.list.classList.add('is-dragging');
        if (model.label) this.Dragger.els.container.textContent = 'Move ' + model.label + '.';
        this.emit('dragStart', this.model.git('draggable'));
    },
    checkDrop: function checkDrop(_ref) {
        var e = _ref.e,
            type = _ref.type,
            model = _ref.model;

        if (this.model.git('droppable') !== type) return;

        var el = e.target.closest('.item');

        if (!el) return;

        var localModel = this.collection.store[this.key][el.parentNode.getAttribute('data-key')];

        if (!localModel) return;

        this.emit('successfulDrop', { dropped: model, droppedOn: localModel });
    },
    fetch: function fetch() {
        var _this2 = this;

        var nextPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { query: {} };

        this.fetching = true;
        if (nextPage) this.model.set('skip', this.model.git('skip') + this.model.git('pageSize'));

        return this.collection.get({
            query: Object.assign(opts.query, { skip: this.model.git('skip'), limit: this.model.git('pageSize'), sort: this.model.git('sort') }),
            parse: opts.parse
        }).then(function (newData) {
            _this2.populateList(newData);
            _this2.fetched = true;
            _this2.fetching = false;
            _this2.emit('fetched');
            if (newData.length == 0 && nextPage) _this2.els.list.removeEventListener('scroll', _this2.onScrollPagination);
            return Promise.resolve();
        });
    },
    getCount: function getCount() {
        var _this3 = this;

        return this.collection.getCount().then(function () {
            return Promise.resolve(_this3.collection.meta.count);
        }).catch(this.Error);
    },
    getItemTemplateResult: function getItemTemplateResult(keyValue, datum) {
        var buttonsOnRight = this.model.git('delete') ? '<div class="buttons">' + this.deleteIcon + '</div>' : '',
            selection = this.toggleSelection ? '<div class="selection"><input data-js="checkbox" type="checkbox" /></div>' : '';

        return '<li data-key="' + keyValue + '">' + selection + '<div class="item">' + this.itemTemplate(datum, this.Format) + '</div>' + buttonsOnRight + '</li>';
    },
    hide: function hide() {
        if (this.els.resetBtn) this.els.resetBtn.classList.add('hidden');
        if (this.els.saveBtn) this.els.saveBtn.classList.add('hidden');
        return Reflect.apply(Super.hide, this, []);
    },
    hideItems: function hideItems(keys) {
        var _this4 = this;

        return Promise.all(keys.map(function (key) {
            var el = _this4.els.list.querySelector('li[data-key="' + key + '"]');
            return el ? _this4.hideEl(el) : Promise.resolve();
        })).catch(this.Error);
    },
    hideList: function hideList() {
        var _this5 = this;

        return this.hideEl(this.els.list).then(function () {
            return Promise.resolve(_this5.els.toggle.classList.add('is-hidden'));
        }).catch(this.Error);
    },
    initializeDragDrop: function initializeDragDrop() {
        var _this6 = this;

        this.Dragger.on('mousedown', function (e) {
            return _this6.checkDragStart(e);
        });
        this.Dragger.on('mouseup', function (e) {
            return _this6.checkDragEnd(e);
        });
        this.Dragger.on('mousemove', function (e) {
            return _this6.checkDrag(e);
        });
        this.Dragger.listen();
    },
    initializeScrollPagination: function initializeScrollPagination() {
        var _this7 = this;

        var listEl = this.els.list;

        this.onScrollPagination = function (e) {
            if (_this7.fetching) return;
            if (_this7.scrollHeight - (listEl.scrollTop + _this7.offsetHeight) < 100) window.requestAnimationFrame(function () {
                return _this7.fetch(true).catch(_this7.Error);
            });
        };

        listEl.addEventListener('scroll', this.onScrollPagination);
    },
    empty: function empty() {
        this.els.list.innerHTML = '';
    },


    events: {
        addBtn: 'click',
        checkbox: 'change',
        goBackBtn: 'click',
        resetBtn: 'click',
        saveBtn: 'click',
        toggle: 'click'
    },

    getListItemKey: function getListItemKey(e) {
        var el = e.target.closest('.item');

        if (!el) return null;

        return this.collection.store[this.key][el.parentNode.getAttribute('data-key')];
    },
    hideDroppable: function hideDroppable() {
        this.els.list.classList.remove('is-droppable');
        Array.from(this.els.list.children).forEach(function (child) {
            return child.removeChild(child.lastChild);
        });
    },
    onAddBtnClick: function onAddBtnClick(e) {
        this.collection.model ? this.add(this.collection.model.CreateDefault()) : this.emit('addClicked');
    },
    onCheckboxChange: function onCheckboxChange(e) {
        var el = e.target.closest('LI');

        if (!el) return false;

        var model = this.collection.store[this.key][el.getAttribute('data-key')];
        event = 'toggled' + (e.target.checked ? 'On' : 'Off');

        if (!model) return;

        el.classList.toggle('checked', e.target.checked);

        this.emit(event, model);
    },
    onGoBackBtnClick: function onGoBackBtnClick(e) {
        this.emit('goBackClicked');
    },
    onItemMouseenter: function onItemMouseenter(e) {
        e.target.classList.add('mouseover');
    },
    onItemMouseleave: function onItemMouseleave(e) {
        e.target.classList.remove('mouseover');
    },
    onListClick: function onListClick(e) {
        var model = this.getListItemKey(e);

        if (!model) return;

        this.emit('itemClicked', model);
    },
    onListDblclick: function onListDblclick(e) {
        var model = this.getListItemKey(e);

        if (!model) return;

        this.emit('itemDblClicked', model);
    },
    onResetBtnClick: function onResetBtnClick() {
        this.emit('resetClicked');
    },
    onSaveBtnClick: function onSaveBtnClick() {
        var _this8 = this;

        if (this.model.git('view')) {
            this.emit('saveClicked', Object.keys(this.itemViews).map(function (key) {
                return _this8.itemViews[key].getProposedModel();
            }));
        }
    },
    onToggleClick: function onToggleClick() {
        this.els.list.classList.contains('hidden') ? this.showList() : this.hideList();
    },
    populateList: function populateList(data) {
        var _this9 = this;

        data = data || this.collection.data;

        if (!Array.isArray(data)) data = [data];

        this.updateStyle();

        if (data.length === 0) return;

        if (this.model.git('view')) {
            var viewName = this.model.git('view');
            var fragment = data.reduce(function (fragment, datum) {
                var keyValue = datum[_this9.key];

                _this9.collection.store[_this9.key][keyValue] = datum;

                _this9.itemViews[keyValue] = _this9.factory.create(viewName, { model: Object.create(_this9.collection.model).constructor(datum), storeFragment: true }).on('deleted', function () {
                    return _this9.onDeleted(datum);
                });

                while (_this9.itemViews[keyValue].fragment.firstChild) {
                    fragment.appendChild(_this9.itemViews[keyValue].fragment.firstChild);
                }return fragment;
            }, document.createDocumentFragment());

            this.els.list.appendChild(fragment);
        } else {
            this.slurpTemplate({
                insertion: { el: this.els.list },
                renderSubviews: true,
                template: data.reduce(function (memo, datum) {
                    var keyValue = datum[_this9.key];
                    _this9.collection.store[_this9.key][keyValue] = datum;
                    return memo + _this9.getItemTemplateResult(keyValue, datum);
                }, '')
            });

            if (this.model.git('scrollPagination')) {
                this.scrollHeight = this.els.list.scrollHeight;this.offsetHeight = this.els.list.offsetHeight;
            }
        }
    },
    postRender: function postRender() {
        var _this10 = this;

        this.collection = this.model.git('collection') || Object.create(this.Model);
        this.key = this.collection.meta.key;

        if (this.collection) this.collection.store = _defineProperty({}, this.key, {});

        if (this.model.git('delete')) {
            this.deleteIcon = this.Format.GetIcon('garbage');
            this.els.list.addEventListener('click', function (e) {
                var target = e.target;
                if (target.tagName === 'svg' && target.classList.contains('garbage')) {
                    _this10.emit('deleteClicked', _this10.collection.store[_this10.key][target.closest('LI').getAttribute('data-key')]);
                }
            });
        }

        if (this.model.git('fetch')) this.fetch().catch(this.Error);

        if (this.model.git('draggable')) this.initializeDragDrop();

        if (this.model.git('scrollPagination')) this.initializeScrollPagination();

        this.updateStyle();

        if (this.collection.data.length) this.populateList();

        return this;
    },
    remove: function remove(datum) {
        this.collection.remove(datum);

        this.updateStyle();

        if (this.model.git('view')) {
            delete this.itemViews[datum[this.key]];
        } else {
            var child = this.els.list.querySelector('[data-key="' + datum[this.key] + '"]');

            if (child) this.els.list.removeChild(child);
        }

        return this;
    },
    show: function show() {
        if (this.els.resetBtn) this.els.resetBtn.classList.remove('hidden');
        if (this.els.saveBtn) this.els.saveBtn.classList.remove('hidden');
        return Reflect.apply(Super.show, this, []);
    },
    showList: function showList() {
        var _this11 = this;

        return this.showEl(this.els.list).then(function () {
            return Promise.resolve(_this11.els.toggle.classList.remove('is-hidden'));
        }).catch(this.Error);
    },
    showDroppable: function showDroppable(type) {
        var _this12 = this;

        this.els.list.classList.add('is-droppable');
        Array.from(this.els.list.children).forEach(function (child) {
            _this12.bindEvent('item', 'mouseenter', child);
            _this12.bindEvent('item', 'mouseleave', child);
            child.appendChild(_this12.htmlToFragment('<div class="drag">Drag here to move ' + type + '</div>'));
        });
    },
    unhideItems: function unhideItems() {
        var _this13 = this;

        Promise.all(Array.from(this.els.list.querySelectorAll('li.hidden')).map(function (el) {
            return _this13.showEl(el);
        })).catch(this.Error);

        return this;
    },
    update: function update(items) {
        this.collection.constructor(items, { storeBy: [this.key] });

        if (this.itemTemplate) return this.removeChildren(this.els.list).populateList();

        this.empty();

        Object.assign(this, { itemViews: {} }).populateList();

        //window.scroll( { behavior: 'smooth', top: this.els.container.getBoundingClientRect().top + window.pageYOffset - 50 } )
        this.els.container.scrollIntoView({ behavior: 'smooth' });

        return this;
    },
    updateItem: function updateItem(model) {
        var keyValue = model.git(this.key);

        this.collection._put(keyValue, model.data);

        if (!this.model.git('view')) {
            var oldItem = this.els.list.querySelector('*[data-key="' + keyValue + '"]');
            this.slurpTemplate({
                insertion: { method: 'insertBefore', el: oldItem },
                renderSubviews: true,
                template: this.getItemTemplateResult(keyValue, model.data)
            });
            this.els.list.removeChild(oldItem);
        }
    },
    updateStyle: function updateStyle() {
        this.els.list.classList.toggle('no-items', this.collection.data.length === 0);
    }
});

},{"./__proto__":59}],48:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {});

},{"./__proto__":59}],49:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    events: {
        submit: 'click'
    },

    onSubmitClick: function onSubmitClick() {
        var _this = this;

        if (this.isSubmitting) return;

        this.isSubmitting = true;

        this.validate().then(function () {
            _this.els.submit.classList.add('submitting');
            return _this.Xhr({
                data: JSON.stringify({ email: _this.els.email.value, password: _this.els.password.value }),
                method: 'post',
                resource: 'auth'
            });
        }).then(function () {
            return _this.user.get();
        }).then(function () {
            if (!_this.user.isLoggedIn()) return Promise.reject('Unable to retrieve user');
            _this.els.submit.classList.remove('submitting');
            _this.hide().then(function () {
                return _this.emit('loggedIn');
            }).catch(_this.Error);
        }).catch(function (e) {
            _this.isSubmitting = false;
            _this.els.submit.classList.remove('submitting');
            _this.Error(e);
            _this.Toast.createMessage('error', e.message || 'Unknown server error');
        });
    },
    postRender: function postRender() {
        var _this2 = this;

        this.els.email.focus();
        this.els.container.addEventListener('keypress', function (e) {
            if (e.keyCode === 13) _this2.onSubmitClick();
        });

        return this;
    },


    requiresLogin: false,

    validate: function validate() {
        if (this.els.email.value.trim() === '') return Promise.reject('Email is required');
        if (this.els.password.value.trim() === '') return Promise.reject('Password is required');
        return Promise.resolve();
    }
});

},{"./__proto__":59}],50:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {
    requiresRole: ['superuser', 'manage-byop']
});

},{"./__proto__":59}],51:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Device: Object.create(require('../models/__proto__'), { resource: { value: 'Device' } }),
    DeviceAction: Object.create(require('../models/__proto__'), { resource: { value: 'DeviceAction' } }),

    Templates: {
        Device: require('./templates/Device')
    },

    Views: {
        devices: function devices() {
            var _this = this;

            return {
                events: { action: 'change' },
                model: Object.create(this.Model).constructor({
                    collection: Object.create(this.Model).constructor([], { resource: 'Device', meta: { key: 'name' } })
                }),
                itemTemplate: function itemTemplate(datum, format) {
                    return _this.Templates.Device(Object.assign(datum, format, { actionData: _this.DeviceAction.data }));
                },
                onActionChange: function onActionChange(e) {
                    this.emit('actionChosen', e);
                },
                templateOptions: function templateOptions() {
                    return { name: 'Devices' };
                }
            };
        },
        deviceLog: function deviceLog() {
            return {
                events: { cancelBtn: 'click' },
                model: Object.create(this.Model).constructor({}, {
                    attributes: require('../../../models/DeviceLog').attributes,
                    data: {
                        total: 0,
                        user: { personId: this.user.git('id'), name: this.user.git('name') }
                    },
                    meta: {
                        user: { hide: true },
                        Device: { hide: true },
                        DeviceAction: { hide: true },
                        createdAt: { hide: true },
                        total: { hide: true },
                        denominationValues: {
                            penny: .01,
                            nickel: .05,
                            dime: .1,
                            quarter: .25,
                            halfDollar: .5,
                            dollar: 1,
                            five: 5,
                            ten: 10,
                            twenty: 20,
                            fifty: 50,
                            oneHundred: 100
                        }
                    },
                    resource: 'DeviceLog'
                }),
                templateOptions: function templateOptions() {
                    return {
                        displayTotal: true,
                        heading: 'Log action for device'
                    };
                },
                onCancelBtnClick: function onCancelBtnClick() {
                    this.emit('cancelClicked');
                },

                toastSuccess: 'Device log added.'
            };
        }
    },

    events: {
        views: {
            devices: [['actionChosen', function (e) {
                this.onActionChosen(e);
            }]],
            deviceLog: [['cancelClicked', function () {
                this.reset();
            }], ['posted', function () {
                this.reset();
            }]]
        }
    },

    onActionChosen: function onActionChosen(e) {
        var _this2 = this;

        var listEl = e.target.closest('li');
        if (!listEl) return;

        this.selectBox = e.target;

        var actionDatum = this.DeviceAction.store.name[e.target.value],
            deviceDatum = this.Device.store.name[listEl.getAttribute('data-key')];

        this.toggleTotalVisibility(actionDatum.name);

        this.views.deviceLog.els.heading.textContent = deviceDatum.label + ': ' + actionDatum.label;

        this.views.deviceLog.model.set('Device', deviceDatum._id);
        this.views.deviceLog.model.set('DeviceAction', actionDatum._id);

        return this.views.devices.hide().then(function () {
            return _this2.views.deviceLog.show();
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this3 = this;

        Promise.all([this.Device.get({ storeBy: ['name'] }), this.DeviceAction.get({ storeBy: ['name'] })]).then(function () {
            return _this3.views.devices.fetch();
        }).catch(this.Error);

        this.views.deviceLog.model.on('totalChanged', function () {
            return _this3.views.deviceLog.els.total.textContent = _this3.Format.Currency.format(_this3.views.deviceLog.model.git('total'));
        });

        this.denominations = this.views.deviceLog.views.denominations;
        this.denominationValues = this.views.deviceLog.model.meta.denominationValues;

        Object.keys(this.denominations.els).forEach(function (key) {
            if (_this3.denominationValues[key]) _this3.denominations.els[key].addEventListener('input', function () {
                return _this3.updateTotal();
            });
        });

        return this;
    },
    reset: function reset() {
        var _this4 = this;

        return this.views.deviceLog.hide().then(function () {
            _this4.selectBox.selectedIndex = 0;
            _this4.views.deviceLog.clear();
            _this4.views.deviceLog.model.data = { user: { personId: _this4.user.git('id'), name: _this4.user.git('name') } };
            _this4.views.deviceLog.model.set('total', 0);
            return _this4.views.devices.show();
        }).catch(this.Error);
    },
    toggleTotalVisibility: function toggleTotalVisibility(action) {
        this.views.deviceLog.els.total.parentNode.classList.toggle('hidden', action === 'closeDevice');
    },
    updateTotal: function updateTotal() {
        var _this5 = this;

        var total = Object.keys(this.denominationValues).reduce(function (memo, key) {
            var el = _this5.denominations.els[key];
            if (el.value) memo += window.parseInt(el.value) * _this5.denominationValues[key];
            return memo;
        }, 0);

        this.views.deviceLog.model.set('total', total.toFixed(2));
    }
});

},{"../../../models/DeviceLog":128,"../models/__proto__":18,"./__proto__":59,"./templates/Device":79}],52:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    Templates: { DiscDetails: require('./templates/DiscDetails') },

    events: {
        addToCartBtn: 'click',
        thumbnails: 'click'
    },

    onAddToCartBtnClick: function onAddToCartBtnClick(e) {
        this.emit('addToCart', this.model);
    },
    onThumbnailsClick: function onThumbnailsClick(e) {
        if (e.target.tagName !== 'IMG') return;
        this.els.displayedImage.src = e.target.src;
    },
    update: function update(discModel, discTypeModel) {
        this.model = discModel;

        discModel.DiscClass = discTypeModel.DiscClass;
        discModel.DiscType = discTypeModel.label;

        this.els.discDetails.innerHTML = '';
        this.els = { container: this.els.container, discDetails: this.els.discDetails };

        this.slurpTemplate({
            template: this.Templates.DiscDetails({ discModel: discModel, discTypeModel: discTypeModel, ImageSrc: this.Format.ImageSrc, Currency: this.Format.Currency }),
            insertion: { el: this.els.discDetails }
        });

        this.els.container.scrollIntoView({ behavior: 'smooth' });

        return this;
    }
});

},{"./__proto__":59,"./templates/DiscDetails":81}],53:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('./__proto__'), {

    model: require('../models/Shop'),

    events: {
        categories: 'click'
    },

    insertCategories: function insertCategories() {
        this.slurpTemplate({
            insertion: { el: this.els.categories },
            template: this.Format.GetListItems(this.model.git('collections'), { dataAttr: 'url' })
        });
    },
    onCategoriesClick: function onCategoriesClick(e) {
        if (e.target.tagName !== 'LI') return;
        this.emit('navigate', e.target.getAttribute('data-url'), { append: true });
    },
    onNavigation: function onNavigation(path) {
        var _this = this;

        this.path = path;

        var modelDatum = this.model.git('collections').find(function (collection) {
            return collection.url === path[0];
        });
        if (modelDatum) return this.showView(modelDatum.name);

        if (path[0] === 'cart') return this.showView('cart');

        if (path[0] === 'checkout') {
            return this.views.cart.cartPromise.then(function () {
                return _this.showView('checkout', { shoppingCart: _this.views.cart.views.cartContents.collection.data });
            }).catch(this.Error);
        }

        Promise.all(Object.keys(this.views).map(function (key) {
            var view = _this.views[key];
            return view ? view.hide() : Promise.resolve();
        })).then(function () {
            _this.currentEl = _this.els.nav;return _this.showEl(_this.els.nav);
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this2 = this;

        this.insertCategories();

        this.currentEl = this.els.nav;

        this.views.cart.on('navigate', function (route, opts) {
            return _this2.emit('navigate', route, opts);
        });

        if (this.path.length > 1) this.onNavigation(this.path.slice(1));

        return this;
    },
    showView: function showView(name) {
        var _this3 = this;

        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return this.hideEl(this.currentEl).then(function () {
            _this3.views[name] ? _this3.views[name].onNavigation(_this3.path, data) : _this3.views[name] = _this3.factory.create(name, Object.assign({ insertion: { el: _this3.els.views }, path: _this3.path }, data)).on('navigate', function (route, opts) {
                return _this3.emit('navigate', route, opts);
            });

            _this3.currentView = _this3.views[name];
            _this3.currentEl = _this3.views[name].getContainer();

            return Promise.resolve();
        }).catch(this.Error);
    }
});

},{"../models/Shop":16,"./__proto__":59}],54:[function(require,module,exports){
'use strict';

module.exports = {

    events: {
        'cancelBtn': 'click',
        'submitBtn': 'click'
    },

    handleSubmissionError: function handleSubmissionError(e) {
        this.emit('error', e);
        this.Toast.createMessage('error', e.message || this.toastError || 'Error');
        this.Error(e);
        this.onSubmitEnd();
    },
    onCancelBtnClick: function onCancelBtnClick() {
        this.delete().catch(this.Error);
    },
    onSubmitBtnClick: function onSubmitBtnClick() {
        var _this = this;

        if (this.submitting) return;
        this.onSubmitStart();
        this.submit().then(function () {
            return Promise.resolve(_this.onSubmitEnd());
        }).catch(function (e) {
            return _this.handleSubmissionError(e);
        });
    },
    onSubmitEnd: function onSubmitEnd() {
        this.submitting = false;
        this.els.submitBtn.classList.remove('submitting');
    },
    onSubmitStart: function onSubmitStart() {
        this.submitting = true;
        this.els.submitBtn.classList.add('submitting');
    }
};

},{}],55:[function(require,module,exports){
'use strict';

module.exports = Object.create(Object.assign({}, require('../../../client/js/views/__proto__'), {

    ToastMessage: require('./ToastMessage'),

    name: 'Toast',

    postRender: function postRender() {
        this.messages = {};

        return this;
    },


    requiresLogin: false,

    createMessage: function createMessage(type, message) {
        if (!this.messages[message]) this.messages[message] = this.factory.create('ToastMessage', { insertion: { el: this.els.container } });

        return this.messages[message].showMessage(type, message);
    },


    template: require('./templates/Toast')

}), {});

},{"../../../client/js/views/__proto__":59,"./ToastMessage":56,"./templates/Toast":107}],56:[function(require,module,exports){
'use strict';

module.exports = Object.assign({}, require('../../../client/js/views/__proto__'), {

    name: 'ToastMessage',

    Icons: {
        error: require('./templates/lib/error')(),
        success: require('./templates/lib/checkmark')()
    },

    postRender: function postRender() {
        var _this = this;

        this.on('shown', function () {
            return _this.status = 'shown';
        });
        this.on('hidden', function () {
            return _this.status = 'hidden';
        });

        return this;
    },


    requiresLogin: false,

    showMessage: function showMessage(type, message) {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
            if (/show/.test(_this2.status)) _this2.teardown();

            _this2.resolution = resolve;

            if (type !== 'error') _this2.els.container.classList.add('success');

            _this2.els.message.textContent = message;
            _this2.els.title.textContent = type === 'error' ? 'Error' : 'Success';
            _this2.slurpTemplate({ insertion: { el: _this2.els.icon }, template: type === 'error' ? _this2.Icons.error : _this2.Icons.success });

            _this2.status = 'showing';

            _this2.show(true).then(function () {
                return _this2.hide(true);
            }).then(function () {
                return _this2.teardown();
            }).catch(reject);
        });
    },
    teardown: function teardown() {
        if (this.els.container.classList.contains('success')) this.els.container.classList.remove('success');
        this.els.message.textContent = '';
        this.els.message.title = '';
        if (this.els.icon.firstChild) this.els.icon.removeChild(this.els.icon.firstChild);
        this.resolution();
    },


    template: require('./templates/ToastMessage')

});

},{"../../../client/js/views/__proto__":59,"./templates/ToastMessage":108,"./templates/lib/checkmark":112,"./templates/lib/error":113}],57:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = Object.assign({}, require('./__proto__'), {

    AutoComplete: require('./lib/AutoComplete'),

    Resources: {

        Byop: {
            Model: require('../models/Byop'),
            renderItem: function renderItem(item, search) {
                var value = item.name1 + ', ' + item.name2;
                return '<div class="autocomplete-suggestion" data-val="' + value + '" data-id="' + item.id + '">' + value + '</div>';
            },
            search: function search(term, suggest) {
                var _this = this;

                return Promise.all([this.Xhr({ method: 'get', qs: this.getQs('name1', term), resource: 'byop' }), this.Xhr({ method: 'get', qs: this.getQs('name2', term), resource: 'byop' })]).then(function (_ref) {
                    var _ref2 = _slicedToArray(_ref, 2),
                        name1Data = _ref2[0],
                        name2Data = _ref2[1];

                    if (name1Data.length === 0 && name2Data.length === 0) return Promise.resolve(false);

                    name2Data = name2Data.filter(function (datum2) {
                        return name1Data.find(function (datum1) {
                            return datum1.id == datum2.id;
                        }) === undefined;
                    });

                    _this.resource.Model.constructor(name1Data.concat(name2Data), { storeBy: ['id'] });
                    suggest(_this.resource.Model.data);
                    return Promise.resolve(true);
                });
            }
        },

        Document: {
            Model: require('../models/Document'),
            renderItem: function renderItem(item, search) {
                return '<div class="autocomplete-suggestion" data-val="' + item.label + '" data-id="' + item._id + '">' + item.label + '</div>';
            },
            search: function search(term, suggest) {
                var _this2 = this;

                return this.Xhr({ method: 'get', qs: JSON.stringify({ label: { '$regex': term, '$options': 'i' } }), resource: this.Resource }).then(function (documents) {
                    if (!Array.isArray(documents)) documents = [documents];
                    if (documents.length === 0) return Promise.resolve(false);

                    _this2.resource.Model.constructor(documents, { storeBy: ['_id'] });
                    suggest(_this2.resource.Model.data);
                    return Promise.resolve(true);
                });
            }
        }
    },

    clear: function clear(suppressEmit) {
        this.els.input.value = '';
        if (!suppressEmit) this.emit('cleared');
    },


    events: {
        input: 'input'
    },

    focus: function focus() {
        this.els.input.focus();
    },
    getSelectedId: function getSelectedId() {
        if (!this.selectedModel) return undefined;

        return this.selectedModel._id || this.selectedModel.id;
    },
    getQs: function getQs(attr, term) {
        return JSON.stringify(Object.assign({}, _defineProperty({}, attr, { operation: '~*', value: term })));
    },
    initAutoComplete: function initAutoComplete(initialId) {
        var _this3 = this;

        new this.AutoComplete({
            delay: 500,
            selector: this.els.input,
            minChars: 1,
            cache: false,
            renderItem: this.resource.renderItem,
            source: function source(term, suggest) {
                Reflect.apply(_this3.resource.search, _this3, [term.trim(), suggest]).then(function (found) {
                    return found ? Promise.resolve(true) : suggest([]);
                }).catch(_this3.Error);
            },
            onSelect: function onSelect(e, term, item) {
                var store = _this3.resource.Model.store;
                _this3.selectedModel = (store.id ? store.id : store['_id'])[item.getAttribute('data-id')];
                _this3.emit('itemSelected', _this3.selectedModel);
            }
        });

        if (initialId) {
            this.Xhr({ resource: this.Resource, id: initialId }).then(function (document) {
                _this3.selectedModel = document;
                _this3.els.input.value = document.label;
                return Promise.resolve();
            }).catch(this.Error);
        }
    },
    onInputInput: function onInputInput() {
        if (this.els.input.value.trim() === "") this.emit('cleared');
    },
    postRender: function postRender() {
        this.Resource = this.Resource;
        this.Type = this.Type;
        this.resource = this.Resources[this.Type];

        if (this.resource && this.Resource) this.initAutoComplete();

        return this;
    },
    setResource: function setResource(resource) {
        this.Resource = resource;
        this.resource = this.Resources[this.Type];
        return this;
    }
});

},{"../models/Byop":9,"../models/Document":13,"./__proto__":59,"./lib/AutoComplete":60}],58:[function(require,module,exports){
'use strict';

var Super = require('./__proto__');

module.exports = Object.assign({}, Super, {
    add: function add() {
        var datum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        this.createItemViews([datum]);
        this.itemViews[this.itemViews.length - 1].els.container.scrollIntoView({ behavior: 'smooth' });
        this.updateStyle();
    },
    createItemViews: function createItemViews(data) {
        var _this = this;

        var fragment = data.reduce(function (fragment, datum) {
            var opts = {
                model: Object.create(_this.Model).constructor(datum, {
                    attributes: _this.model.git('range'),
                    meta: _this.collection.meta
                }),
                templateOptions: { delete: true, hideButtonRow: true }
            };

            var view = _this.factory.create(_this.viewName, Object.assign(opts, { storeFragment: true })).on('deleted', function () {
                return _this.onItemViewDeleted(view);
            });

            _this.itemViews.push(view);
            _this.emit('itemAdded', view);

            while (view.fragment.firstChild) {
                fragment.appendChild(view.fragment.firstChild);
            }return fragment;
        }, document.createDocumentFragment());

        this.els.list.appendChild(fragment);
    },


    events: {
        addBtn: 'click'
    },

    onAddBtnClick: function onAddBtnClick(e) {
        this.add();
    },
    onItemViewDeleted: function onItemViewDeleted(view) {
        var viewIndex = this.itemViews.indexOf(view);

        this.itemViews.splice(viewIndex, 1);
        this.els.container.scrollIntoView({ behavior: 'smooth' });
        this.updateStyle();

        this.emit('itemDeleted', view);
    },
    populateList: function populateList() {
        var data = this.collection.data;

        if (!Array.isArray(data)) data = [data];
        if (!data.length) data = [{}];

        this.createItemViews(data);
    },
    postRender: function postRender() {
        this.viewName = this.model.git('view');
        this.itemViews = [];
        this.collection = this.model.git('collection') || Object.create(this.Model);

        this.populateList();
        this.updateStyle();

        return this;
    },
    reduceToOne: function reduceToOne() {
        return this.itemViews.length > 1 ? Promise.all(this.itemViews.slice(1).map(function (itemView) {
            return itemView.delete();
        })).catch(this.Error) : Promise.resolve();
    },
    updateStyle: function updateStyle() {
        var _this2 = this;

        if (!this.model.git('delete')) return;

        this.els.container.classList.toggle('can-delete', this.itemViews.length > 1);

        this.itemViews.forEach(function (view) {
            return view.els.deleteBtn.classList.toggle('hidden', _this2.itemViews.length === 1);
        });
    }
});

},{"./__proto__":59}],59:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = Object.assign({}, require('../../../lib/MyObject'), require('events').EventEmitter.prototype, {
    $: function $(el, selector) {
        return Array.from(el.querySelectorAll(selector));
    },


    Format: require('../Format'),

    Media: {
        mobile: { from: 0, to: 767 },
        desktop: { from: 768 }
    },

    Model: require('../models/__proto__'),

    OptimizedResize: require('./lib/OptimizedResize'),

    Xhr: require('../Xhr'),

    bindEvent: function bindEvent(key, event, el) {
        var _this = this;

        var els = el ? [el] : Array.isArray(this.els[key]) ? this.els[key] : [this.els[key]],
            name = this.getEventMethodName(key, event);

        if (!this['_' + name]) this['_' + name] = function (e) {
            return _this[name](e);
        };

        els.forEach(function (el) {
            return el.addEventListener(event || 'click', _this['_' + name]);
        });
    },
    constructor: function constructor() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


        if (opts.events) {
            Object.assign(this.events, opts.events);delete opts.events;
        }
        Object.assign(this, opts);

        this.subviewElements = [];

        if (this.requiresLogin && !this.user.isLoggedIn()) return this.handleLogin();
        if (this.user && !this.isAllowed(this.user)) return this.scootAway();

        return this.initialize().render();
    },
    delegateEvents: function delegateEvents(key, el) {
        var _this2 = this;

        var type = _typeof(this.events[key]);

        if (type === "string") {
            this.bindEvent(key, this.events[key], el);
        } else if (Array.isArray(this.events[key])) {
            this.events[key].forEach(function (eventObj) {
                return _this2.bindEvent(key, eventObj);
            });
        } else {
            this.bindEvent(key, this.events[key].event);
        }
    },
    delete: function _delete() {
        var _this3 = this;

        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { silent: false },
            silent = _ref.silent;

        return this.hide().then(function () {
            var container = _this3.els.container,
                parent = container.parentNode;
            if (container && parent) parent.removeChild(container);
            if (!silent) _this3.emit('deleted');
            return Promise.resolve();
        });
    },


    events: {},

    getEventMethodName: function getEventMethodName(key, event) {
        return 'on' + this.capitalizeFirstLetter(key) + this.capitalizeFirstLetter(event);
    },
    getContainer: function getContainer() {
        return this.els.container;
    },
    getTemplateOptions: function getTemplateOptions() {
        var rv = Object.assign(this.user ? { user: this.user.data } : {}, this.Format);

        if (this.model) {
            rv.model = this.model.data;

            if (this.model.meta) rv.meta = this.model.meta;
            if (this.model.attributes) rv.attributes = this.model.attributes;
        }

        if (this.templateOptions) rv.opts = typeof this.templateOptions === 'function' ? this.templateOptions() : this.templateOptions || {};

        return rv;
    },
    handleImageEl: function handleImageEl(el) {
        var _this4 = this;

        el.onload = function () {
            _this4.emit('imgLoaded', el);
            el.removeAttribute('data-src');
        };

        if (el.getAttribute('data-img-sm')) this.mobileImages.push(el);else if (el.getAttribute('data-img-lg')) this.desktopImages.push(el);else el.setAttribute('src', el.getAttribute('data-src'));
    },
    handleLogin: function handleLogin() {
        var _this5 = this;

        this.factory.create('login', { insertion: { el: document.querySelector('#content') } }).on("loggedIn", function () {
            return _this5.onLogin();
        });

        return this;
    },
    hide: function hide(isSlow) {
        var _this6 = this;

        if (!this.els || this.isHiding) return Promise.resolve();

        this.isHiding = true;
        return this.hideEl(this.els.container, isSlow).then(function () {
            return Promise.resolve(_this6.isHiding = false);
        });
    },
    hideSync: function hideSync() {
        this.els.container.classList.add('hidden');return this;
    },
    _hideEl: function _hideEl(el, resolve, hash, isSlow) {
        el.removeEventListener('animationend', this[hash]);
        el.classList.add('hidden');
        el.classList.remove('animate-out' + (isSlow ? '-slow' : ''));
        delete this[hash];
        this.isHiding = false;
        resolve();
    },
    hideEl: function hideEl(el, isSlow) {
        var _this7 = this;

        if (this.isHidden(el)) return Promise.resolve();

        var time = new Date().getTime(),
            hash = time + 'Hide';

        return new Promise(function (resolve) {
            _this7[hash] = function (e) {
                return _this7._hideEl(el, resolve, hash, isSlow);
            };
            el.addEventListener('animationend', _this7[hash]);
            el.classList.add('animate-out' + (isSlow ? '-slow' : ''));
        });
    },
    htmlToFragment: function htmlToFragment(str) {
        return this.factory.range.createContextualFragment(str);
    },
    initialize: function initialize() {
        return Object.assign(this, {
            desktopImages: [],
            els: {},
            mobileImages: [],
            slurp: { attr: 'data-js', view: 'data-view', name: 'data-name', img: 'data-src' },
            views: {}
        });
    },
    insertToDom: function insertToDom(fragment, options) {
        var insertion = typeof options.insertion === 'function' ? options.insertion() : options.insertion;

        insertion.method === 'insertBefore' ? insertion.el.parentNode.insertBefore(fragment, insertion.el) : insertion.el[insertion.method || 'appendChild'](fragment);
    },
    isAllowed: function isAllowed(user) {
        if (!this.requiresRole) return true;

        var userRoles = new Set(user.data.roles);

        if (typeof this.requiresRole === 'string') return userRoles.has(this.requiresRole);

        if (Array.isArray(this.requiresRole)) {
            var result = this.requiresRole.find(function (role) {
                return userRoles.has(role);
            });

            return result !== undefined;
        }

        return false;
    },
    isHidden: function isHidden(el) {
        return el ? el.classList.contains('hidden') : this.els.container.classList.contains('hidden');
    },
    onLogin: function onLogin() {

        if (!this.isAllowed(this.user)) return this.scootAway();

        this.initialize().render();
    },
    onNavigation: function onNavigation() {
        return this.show();
    },
    showNoAccess: function showNoAccess() {
        alert("No privileges, son");
        return this;
    },
    postRender: function postRender() {
        return this;
    },
    render: function render() {
        if (this.data) this.model = Object.create(this.Model, {}).constructor(this.data);

        this.slurpTemplate({
            insertion: this.insertion || { el: document.body },
            isView: true,
            storeFragment: this.storeFragment,
            template: this.template(this.getTemplateOptions())
        });

        this.renderSubviews();

        if (this.size) {
            this.size();this.OptimizedResize.add(this.size.bind(this));
        }

        return this.postRender();
    },
    removeChildren: function removeChildren(el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }return this;
    },
    renderSubviews: function renderSubviews() {
        var _this8 = this;

        this.subviewElements.forEach(function (obj) {
            var name = obj.name || obj.view;

            var opts = {};

            if (_this8.Views && _this8.Views[obj.view]) opts = _typeof(_this8.Views[obj.view]) === "object" ? _this8.Views[obj.view] : Reflect.apply(_this8.Views[obj.view], _this8, []);
            if (_this8.Views && _this8.Views[name]) opts = _typeof(_this8.Views[name]) === "object" ? _this8.Views[name] : Reflect.apply(_this8.Views[name], _this8, []);

            _this8.views[name] = _this8.factory.create(obj.view, Object.assign({ insertion: { el: obj.el, method: 'insertBefore' } }, opts));

            if (_this8.events.views) {
                if (_this8.events.views[name]) _this8.events.views[name].forEach(function (arr) {
                    return _this8.views[name].on(arr[0], function (eventData) {
                        return Reflect.apply(arr[1], _this8, [eventData]);
                    });
                });else if (_this8.events.views[obj.view]) _this8.events.views[obj.view].forEach(function (arr) {
                    return _this8.views[name].on(arr[0], function (eventData) {
                        return Reflect.apply(arr[1], _this8, [eventData]);
                    });
                });
            }

            if (obj.el.classList.contains('hidden')) _this8.views[name].hideSync();
            obj.el.remove();
        });

        this.subviewElements = [];

        return this;
    },
    scootAway: function scootAway() {
        var _this9 = this;

        this.Toast.createMessage('error', 'You are not allowed here.').catch(function (e) {
            _this9.Error(e);_this9.emit('navigate', '/');
        }).then(function () {
            return _this9.emit('navigate', '/');
        });

        return this;
    },
    show: function show(isSlow) {
        return this.showEl(this.els.container, isSlow);
    },
    showSync: function showSync() {
        this.els.container.classList.remove('hidden');return this;
    },
    _showEl: function _showEl(el, resolve, hash, isSlow) {
        el.removeEventListener('animationend', this[hash]);
        el.classList.remove('animate-in' + (isSlow ? '-slow' : ''));
        delete this[hash];
        resolve();
    },
    showEl: function showEl(el, isSlow) {
        var _this10 = this;

        var time = new Date().getTime(),
            hash = time + 'Show';

        return new Promise(function (resolve) {
            _this10[hash] = function (e) {
                return _this10._showEl(el, resolve, hash, isSlow);
            };
            el.addEventListener('animationend', _this10[hash]);
            el.classList.remove('hidden');
            el.classList.add('animate-in' + (isSlow ? '-slow' : ''));
        });
    },
    size: function size() {
        if (!this.mobileImages.length && !this.desktopImages.length) return;

        var isMobile = window.matchMedia('(max-width: ' + this.Media.mobile.to + 'px)').matches,
            imageEls = isMobile ? this.mobileImages : this.desktopImages;

        imageEls.forEach(function (el) {
            if (el.src) return;
            el.setAttribute('src', el.getAttribute('data-src'));
        });

        return true;
    },
    slurpEl: function slurpEl(el) {
        var key = el.getAttribute(this.slurp.attr) || 'container';

        if (key === 'container') {
            el.classList.add(this.name);
            if (this.klass) el.classList.add(this.klass);
        }

        this.els[key] = Array.isArray(this.els[key]) ? this.els[key].concat(el) : this.els[key] !== undefined ? [this.els[key], el] : el;

        el.removeAttribute(this.slurp.attr);

        if (this.events[key]) this.delegateEvents(key, el);
    },
    slurpTemplate: function slurpTemplate(options) {
        var _this11 = this;

        var fragment = this.htmlToFragment(options.template),
            selector = '[' + this.slurp.attr + ']',
            viewSelector = '[' + this.slurp.view + ']',
            imgSelector = '[' + this.slurp.img + ']',
            firstEl = fragment.querySelector('*');

        if (options.isView || firstEl.getAttribute(this.slurp.attr)) this.slurpEl(firstEl);

        Array.from(fragment.querySelectorAll(selector + ', ' + viewSelector + ', ' + imgSelector)).forEach(function (el) {
            if (el.hasAttribute(_this11.slurp.attr)) {
                _this11.slurpEl(el);
            } else if (el.hasAttribute(_this11.slurp.img)) _this11.handleImageEl(el);else if (el.hasAttribute(_this11.slurp.view)) {
                _this11.subviewElements.push({ el: el, view: el.getAttribute(_this11.slurp.view), name: el.getAttribute(_this11.slurp.name) });
            }
        });

        if (options.storeFragment) return Object.assign(this, { fragment: fragment });

        this.insertToDom(fragment, options);

        if (options.renderSubviews) this.renderSubviews();

        return this;
    },
    unbindEvent: function unbindEvent(key, event, el) {
        var _this12 = this;

        var els = el ? [el] : Array.isArray(this.els[key]) ? this.els[key] : [this.els[key]],
            name = this.getEventMethodName(key, event);

        els.forEach(function (el) {
            return el.removeEventListener(event || 'click', _this12['_' + name]);
        });
    }
});

},{"../../../lib/MyObject":126,"../Format":4,"../Xhr":6,"../models/__proto__":18,"./lib/OptimizedResize":61,"events":136}],60:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function () {
    // "use strict";
    function autoComplete(options) {
        if (!document.querySelector) return;

        // helpers
        function hasClass(el, className) {
            return el.classList ? el.classList.contains(className) : new RegExp('\\b' + className + '\\b').test(el.className);
        }

        function addEvent(el, type, handler) {
            if (el.attachEvent) el.attachEvent('on' + type, handler);else el.addEventListener(type, handler);
        }
        function removeEvent(el, type, handler) {
            // if (el.removeEventListener) not working in IE11
            if (el.detachEvent) el.detachEvent('on' + type, handler);else el.removeEventListener(type, handler);
        }
        function live(elClass, event, cb, context) {
            addEvent(context || document, event, function (e) {
                var found,
                    el = e.target || e.srcElement;
                while (el && !(found = hasClass(el, elClass))) {
                    el = el.parentElement;
                }if (found) cb.call(el, e);
            });
        }

        var o = {
            selector: 0,
            source: 0,
            minChars: 3,
            delay: 150,
            offsetLeft: 0,
            offsetTop: 1,
            cache: 1,
            menuClass: '',
            renderItem: function renderItem(item, search) {
                // escape special characters
                search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
                return '<div class="autocomplete-suggestion" data-val="' + item + '">' + item.replace(re, "<b>$1</b>") + '</div>';
            },
            onSelect: function onSelect(e, term, item) {}
        };
        for (var k in options) {
            if (options.hasOwnProperty(k)) o[k] = options[k];
        }

        // init
        var elems = _typeof(o.selector) == 'object' ? [o.selector] : document.querySelectorAll(o.selector);
        for (var i = 0; i < elems.length; i++) {
            var that = elems[i];

            // create suggestions container "sc"
            that.sc = document.createElement('div');
            that.sc.className = 'autocomplete-suggestions ' + o.menuClass;

            that.autocompleteAttr = that.getAttribute('autocomplete');
            that.setAttribute('autocomplete', 'off');
            that.cache = {};
            that.last_val = '';

            that.updateSC = function (resize, next) {
                var rect = that.getBoundingClientRect();
                that.sc.style.left = Math.round(rect.left + (window.pageXOffset || document.documentElement.scrollLeft) + o.offsetLeft) + 'px';
                that.sc.style.top = Math.round(rect.bottom + (window.pageYOffset || document.documentElement.scrollTop) + o.offsetTop) + 'px';
                that.sc.style.width = Math.round(rect.right - rect.left) + 'px'; // outerWidth
                if (!resize) {
                    that.sc.style.display = 'block';
                    if (!that.sc.maxHeight) {
                        that.sc.maxHeight = parseInt((window.getComputedStyle ? getComputedStyle(that.sc, null) : that.sc.currentStyle).maxHeight);
                    }
                    if (!that.sc.suggestionHeight) that.sc.suggestionHeight = that.sc.querySelector('.autocomplete-suggestion').offsetHeight;
                    if (that.sc.suggestionHeight) if (!next) that.sc.scrollTop = 0;else {
                        var scrTop = that.sc.scrollTop,
                            selTop = next.getBoundingClientRect().top - that.sc.getBoundingClientRect().top;
                        if (selTop + that.sc.suggestionHeight - that.sc.maxHeight > 0) that.sc.scrollTop = selTop + that.sc.suggestionHeight + scrTop - that.sc.maxHeight;else if (selTop < 0) that.sc.scrollTop = selTop + scrTop;
                    }
                }
            };
            addEvent(window, 'resize', that.updateSC);
            document.body.appendChild(that.sc);

            live('autocomplete-suggestion', 'mouseleave', function (e) {
                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                if (sel) setTimeout(function () {
                    sel.className = sel.className.replace('selected', '');
                }, 20);
            }, that.sc);

            live('autocomplete-suggestion', 'mouseover', function (e) {
                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                if (sel) sel.className = sel.className.replace('selected', '');
                this.className += ' selected';
            }, that.sc);

            live('autocomplete-suggestion', 'mousedown', function (e) {
                if (hasClass(this, 'autocomplete-suggestion')) {
                    // else outside click
                    var v = this.getAttribute('data-val');
                    that.value = v;
                    o.onSelect(e, v, this);
                    that.sc.style.display = 'none';
                }
            }, that.sc);

            that.blurHandler = function () {
                try {
                    var over_sb = document.querySelector('.autocomplete-suggestions:hover');
                } catch (e) {
                    var over_sb = 0;
                }
                if (!over_sb) {
                    that.last_val = that.value;
                    that.sc.style.display = 'none';
                    setTimeout(function () {
                        that.sc.style.display = 'none';
                    }, 350); // hide suggestions on fast input
                } else if (that !== document.activeElement) setTimeout(function () {
                    that.focus();
                }, 20);
            };
            addEvent(that, 'blur', that.blurHandler);

            var suggest = function suggest(data) {
                var val = that.value;
                that.cache[val] = data;
                if (data.length && val.length >= o.minChars) {
                    var s = '';
                    for (var i = 0; i < data.length; i++) {
                        s += o.renderItem(data[i], val);
                    }that.sc.innerHTML = s;
                    that.updateSC(0);
                } else that.sc.style.display = 'none';
            };

            that.keydownHandler = function (e) {
                var key = window.event ? e.keyCode : e.which;
                // down (40), up (38)
                if ((key == 40 || key == 38) && that.sc.innerHTML) {
                    var next,
                        sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                    if (!sel) {
                        next = key == 40 ? that.sc.querySelector('.autocomplete-suggestion') : that.sc.childNodes[that.sc.childNodes.length - 1]; // first : last
                        next.className += ' selected';
                        that.value = next.getAttribute('data-val');
                    } else {
                        next = key == 40 ? sel.nextSibling : sel.previousSibling;
                        if (next) {
                            sel.className = sel.className.replace('selected', '');
                            next.className += ' selected';
                            that.value = next.getAttribute('data-val');
                        } else {
                            sel.className = sel.className.replace('selected', '');that.value = that.last_val;next = 0;
                        }
                    }
                    that.updateSC(0, next);
                    return false;
                }
                // esc
                else if (key == 27) {
                        that.value = that.last_val;that.sc.style.display = 'none';
                    }
                    // enter
                    else if (key == 13 || key == 9) {
                            var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                            if (sel && that.sc.style.display != 'none') {
                                o.onSelect(e, sel.getAttribute('data-val'), sel);setTimeout(function () {
                                    that.sc.style.display = 'none';
                                }, 20);
                            }
                        }
            };
            addEvent(that, 'keydown', that.keydownHandler);

            that.keyupHandler = function (e) {
                var key = window.event ? e.keyCode : e.which;
                if (!key || (key < 35 || key > 40) && key != 13 && key != 27) {
                    var val = that.value;
                    if (val.length >= o.minChars) {
                        if (val != that.last_val) {
                            that.last_val = val;
                            clearTimeout(that.timer);
                            if (o.cache) {
                                if (val in that.cache) {
                                    suggest(that.cache[val]);return;
                                }
                                // no requests if previous suggestions were empty
                                for (var i = 1; i < val.length - o.minChars; i++) {
                                    var part = val.slice(0, val.length - i);
                                    if (part in that.cache && !that.cache[part].length) {
                                        suggest([]);return;
                                    }
                                }
                            }
                            that.timer = setTimeout(function () {
                                o.source(val, suggest);
                            }, o.delay);
                        }
                    } else {
                        that.last_val = val;
                        that.sc.style.display = 'none';
                    }
                }
            };
            addEvent(that, 'keyup', that.keyupHandler);

            that.focusHandler = function (e) {
                that.last_val = '\n';
                that.keyupHandler(e);
            };
            if (!o.minChars) addEvent(that, 'focus', that.focusHandler);
        }

        // public destroy method
        this.destroy = function () {
            for (var i = 0; i < elems.length; i++) {
                var that = elems[i];
                removeEvent(window, 'resize', that.updateSC);
                removeEvent(that, 'blur', that.blurHandler);
                removeEvent(that, 'focus', that.focusHandler);
                removeEvent(that, 'keydown', that.keydownHandler);
                removeEvent(that, 'keyup', that.keyupHandler);
                if (that.autocompleteAttr) that.setAttribute('autocomplete', that.autocompleteAttr);else that.removeAttribute('autocomplete');
                document.body.removeChild(that.sc);
                that = null;
            }
        };
    }
    return autoComplete;
}();

},{}],61:[function(require,module,exports){
'use strict';

module.exports = Object.create({
    add: function add(callback) {
        if (!this.callbacks.length) window.addEventListener('resize', this.onResize.bind(this));
        this.callbacks.push(callback);
    },
    onResize: function onResize() {
        if (this.running) return;

        this.running = true;

        window.requestAnimationFrame ? window.requestAnimationFrame(this.runCallbacks.bind(this)) : setTimeout(this.runCallbacks, 66);
    },
    runCallbacks: function runCallbacks() {
        this.callbacks = this.callbacks.filter(function (callback) {
            return callback();
        });
        this.running = false;
    }
}, { callbacks: { writable: true, value: [] }, running: { writable: true, value: false } });

},{}],62:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var user = _ref.user,
        ImageSrc = _ref.ImageSrc;
    return '<div>\n    <div class="splash" data-js="splash">\n        <div data-js="column0"></div>\n        <img src="' + ImageSrc('hazy-tree.svg') + '"/>\n        <div data-js="column1"></div>\n    </div>\n    <div class="views" data-js="views"></div>\n</div>';
};

},{}],63:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
  var p = _ref.p;
  return "<ol></ol>";
};

},{}],64:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var model = _ref.model;

    var disabled = model.disabled ? 'disabled' : '',
        klass = model.hide ? 'hidden' : '';
    return '' + ('<section class="' + klass + '">') + Object.keys(model.states).map(function (stateName) {
        return '<div data-js="' + stateName + '" class="state ' + stateName + ' ' + (stateName === 'start' ? '' : 'hidden') + '">' + model.states[stateName].map(function (button) {
            return button.svg ? button.svg : '<button class="' + disabled + ' ' + (button.class || '') + ' "data-js="' + button.name + '">' + button.text + '</button>';
        }).join('') + '</div>';
    }).join('') + '</section>';
};

},{}],65:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var selectCaret = p.GetIcon('caret-down');
    var shirts = p.meta.shirtSizes.map(function (ss) {
        return '<option value="' + ss.value + '">' + ss.label + '</option>';
    }).join('');
    var ace = p.meta.aceOptions.map(function (option) {
        return '<option value="' + option.value + '">' + option.label + '</option>';
    }).join('');
    var discs = p.meta.discs.map(function (option) {
        return '<option value="' + option.value + '">' + option.label + '</option>';
    }).join('');
    var playerFields = function playerFields(no) {
        return '<div class="player">' + ('<div>Player ' + no + '</div>') + ('<input data-js="name' + no + '" type="text" placeholder="Name" />') + '<div class="select-wrap">' + ('<select data-js="shirtSize' + no + '">') + '<option value="null">Shirt Size</option>' + shirts + ('</select>' + selectCaret) + '</div>' + '<div class="select-wrap">' + ('<select data-js="ace' + no + '">') + '<option value="null">Ace Fund</option>' + ace + ('</select>' + selectCaret) + '</div>' + '<div class="select-wrap">' + ('<select data-js="disc' + no + '">') + '<option value="null">Would like a...</option>' + discs + ('</select>' + selectCaret) + '</div>' + ('<input data-js="weight' + no + '" placeholder="My preferred weight is" />') + '</div>';
    };

    return '' + ('<section>\n  <div class="featured-event">\n    <img src="' + p.ImageSrc('discs-in-basket.jpg') + '"/>\n    <div class="content">\n        <div class="center">BYOP</div>\n    </div>\n  </div>\n  <div class="event-info">\n      <section class="important-info">\n          <h4>Join us for the 16th Annual Hazy Shade BYOP Doubles Tournament</h4>\n          <div>\n            <span>Sponsored by</span>\n            <a href="https://www.sprint.com" target="_blank">Sprint</a>,\n            <a href="http://www.innovadiscs.com" target="_blank">Innova</a>,\n            <span>and</span>\n            <a href="http://www.discmania.net" target="_blank">Discmania</a>\n          </div>\n          <div>\n              <span>Belmont Park and Belmont Park West, August 11th-13th, 2017</span>\n              <a href="' + p.ImageSrc('byop-map.pdf') + '" target="_blank">Map</a>\n          </div>\n      </section>\n      <ol class="dates">\n        <li>Friday August 11th: Belmont West preview round and Players Party at Hazy Shade in Dayton</li>\n        <li>Saturday August 12th: Rec and Intermediate Divisions</li>\n        <li>Sunday August 13th: All remaining Divisions</li>\n      </ol>\n      <ul class="detailed-info">\n        <li>\n            <div>Check-In</div>\n            <p>Player check-in and Players Pack pick-up starts at 12pm, Friday, August 11th, at Hazy Shade\u2019s Dayton location (723 Watervliet Ave). Players who check-in Friday will not need to check-in Saturday or Sunday before the round. Players who have not checked-in on Friday can do so on the day of their Division\'s event, starting at 8am. A players meeting will be held August 12th and 13th at 9:15am before tee-off at 9:30am.</p>\n            <p>The event will feature two rounds of best-shot doubles: one at Belmont, and one at Belmont West.</p>\n        </li>\n        <li>\n            <div>Players Party</div>\n            <p>Don\'t miss our Friday Night Players Party! It\'s a chance to have a great time with fellow golfers and win prizes with raffle tickets included with registration.</p>\n        </li>\n        <li>\n            <div>Players Pack</div>\n            <p>With help from our friends at Innova and Discmania all amateur divisions will receive an amazing Players Pack. Pro divisions will receive a reduced pack and cash payout.</p>\n        </li>\n        <li>\n            <div>Register Today!</div>\n            <p>The BYOP event can accommodate 108 teams per day and normally sells out. If you have any questions email us at sales@hazyshade.com.</p>\n            <p>\n                <span>See the</span>\n                <span data-js="playersPageLink" class="link">BYOP Players Page</span>\n                <span>to see who is currently registered in each division</span>\n            </p>\n            <p>\n                <span>Checkout last year\'s results</span>\n                <span data-js="lastYearResults" class="link">here.</span>\n            </p>\n        </li>\n      </ul>\n  </div>\n  <div class="registration">\n      <h3>Registration</h3>\n      <div class="sub-heading">Enter your information below.</div>\n      <div class="info">Recreation and Intermediate divisions will play on August 12th.  All other divisions will play August 13th. There must be 3 teams to make a division. If you sign up for a division that is too small you will have the option to move to another division.</div>\n      <div class="division">\n          <div class="select-wrap">\n              <select data-js="divisionId">\n                <option value="null">Division</option>\n              </select>\n              ' + selectCaret + '\n          </div>\n          <div class="spots-left" data-js="spotsLeft"></div>\n      </div>\n      <div class="players">\n          ' + playerFields('1') + '  \n          ' + playerFields('2') + '\n          <div class="info">$5 per player for entry into the ace fund. You can pass for now and still enter your team on the day of the event.</div>\n          <div class="info">We will do our best to match disc weight requests but can not guarantee we can get exactly what you asked for.</div>\n      </div>\n      <div class="contact">\n          <div>Contact</div>\n          <div class="info">We will not release your info to anyone.  Contact information will only be used for us to reach you for purposes related to the BYOP event.</div>\n          <input data-js="email" type="text" placeholder="Email" />\n          <input data-js="phone" type="text" placeholder="Phone Number" />\n      </div>\n      <div class="donation">\n          <div>Belmont Basket Donation</div>\n          <div class="info">Consider making a donation to replace the baskets at belmont park.  Enter a dollar amount below.</div>\n          <input data-js="belmontDonation" type="text" placeholder="5" />\n      </div>\n      <div data-js="payment" class="payment-info">\n          <div>Payment Info</div>\n          <div class="info">We only accept credit, debit cards for online registration.  A $3.50 fee will be added to the cost.  You can also pay in cash in one of our stores.</div>\n          <input data-js="ccName" type="text" placeholder="Name on Card" />\n          <input data-js="ccNo" type="text" placeholder="Number on Card" />\n          <div class="exp-ccv">\n            <div>\n                <div>Expiration</div>\n                <div>\n                    <div class="exp">\n                        <div class="select-wrap">\n                            <select data-js="ccMonth">\n                                <option value="null">MO</option>\n                                <option value="1">01</option>\n                                <option value="2">02</option>\n                                <option value="3">03</option>\n                                <option value="4">04</option>\n                                <option value="5">05</option>\n                                <option value="6">06</option>\n                                <option value="7">07</option>\n                                <option value="8">08</option>\n                                <option value="9">09</option>\n                                <option value="10">10</option>\n                                <option value="11">11</option>\n                                <option value="12">12</option>\n                            </select>\n                            ' + selectCaret + '\n                        </div>\n                        <div class="select-wrap">\n                            <select data-js="ccYear">\n                                <option value="null">YR</option>\n                                <option value="2017">2017</option>\n                                <option value="2018">2018</option>\n                                <option value="2019">2019</option>\n                                <option value="2020">2020</option>\n                                <option value="2021">2021</option>\n                                <option value="2022">2022</option>\n                                <option value="2023">2023</option>\n                            </select>\n                            ' + selectCaret + '\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div>CVC</div>\n                <input data-js="cvc" type="text" />\n            </div>\n          </div>\n      </div>\n      <div data-js="totalWrap" class="total side-by-side">\n          <span>Total:</span>\n          <span data-js="total">' + p.Currency.format(p.model.total) + '</span>\n      </div>\n      <div>\n          <button data-js="submitBtn" type="button">Submit</button>\n      </div>\n  </div>\n  <div data-view="byopSponsors"></div>\n</section>');
};

},{}],66:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<section>\n    <h1 data-js=\"heading\">The Numbers</h1>\n    <div data-js=\"content\" class=\"content hidden\">\n        <div>\n            <label>Player's pack</label>\n            <div class=\"players-pack\" data-js=\"playerPack\"></div>\n        </div>\n        <div>\n            <label>Shirts</label>\n            <div class=\"shirts\" data-js=\"shirts\"></div>\n        </div>\n        <div>\n            <label>Belmont Donations</label>\n            <div class=\"belmont-donation\" data-js=\"belmontDonation\"></div>\n        </div>\n        <div>\n            <label>Payment Type</label>\n            <div class=\"paid-type\" data-js=\"paidType\"></div>\n        </div>\n        <div>\n            <label>Ace Fund</label>\n            <div class=\"ace\" data-js=\"aceFund\"></div>\n        </div>\n        <div>\n            <label>Downloads</label>\n            <div>\n                <button data-js=\"getAceSheet\" class=\"link\">Get Ace Fund Names</button>\n                <button data-js=\"getAllNames\" class=\"link\">Get All Names</button>\n            </div>\n        </div>\n    </div>\n</section>";
};

},{}],67:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
    var user = _ref.user;
    return "<section>\n    <h3>2017 BYOP Registered Players by Division</h3>\n    <div class=\"register-link\"><span class=\"link\" data-js=\"byopRegisterLink\">Register Here!</span></div>\n    <div data-js=\"divisions\"></div>\n    <div class=\"Division\">\n        <h4>Waiting List</h4>\n        <ol class\"waiting-list\" data-js=\"waitingList\"></ol>\n    </div>\n    <div data-view=\"byopSponsors\"></div>\n</section>";
};

},{}],68:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<section>\n    <div class=\"division-results\">\n        <h3>2017 BYOP Results by Division</h3>\n        <ol data-js=\"divisionsList\" class=\"divisions-list side-by-side\"></ol>\n        <div data-js=\"divisionResults\"></div>\n    </div>\n    <div data-view=\"byopSponsors\"></div>\n</section>";
};

},{}],69:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<section>\n    <h4>Give a click to all of our BYOP sponsors</h4>\n    <div data-js=\"sponsors\"></div>\n</section>";
};

},{}],70:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var selectCaret = p.GetIcon('caret-down', { name: 'caret' });
    var byopTeamEdit = p.opts.byopKeys.map(function (key) {
        var meta = p.opts.byopAttributes[key],
            data = 'data-js="' + key + '" data-name="' + key + '"',
            input = meta.type === 'select' ? '<div class="select-wrap"><select ' + data + '>' + p.GetSelectOptions(p.opts.byopMeta[meta.range]) + '</select>' + selectCaret + '</div>' : '<input ' + data + ' />';
        return '<div><label>' + meta.label + '</label>' + input + '</div>';
    }).join('');

    return '<section>\n    <h1 data-js="heading">Team Editor</h1>\n    <div data-js="content" class="content hidden">\n        <div data-view="typeAhead"></div>\n        <div data-js="selectedTeam" class="selected-team hide hidden">\n            <div class="static-data">\n                <div>\n                    <label>Paid in Store:</label>\n                    <span data-js="paidCash"></span>\n                </div>\n            </div>\n            <form>' + byopTeamEdit + '</form>\n            <div class="changes" data-js="changes"></div>\n            <div data-view="buttonFlow" data-name="byopTeamEdit">\n        </div>\n    </div>\n</section>';
};

},{}],71:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var selectCaret = p.GetIcon('caret-down', { name: 'caret' });
    return '' + ('<section>\n    <h1 data-js="heading">Waiting List Swap</h1>\n    <div data-js="content" class="side-by-side hidden content">\n        <div>\n            <div data-view="typeAhead"></div>\n            <div class="waiting-list">\n                <label>Waiting List</label>\n                <div>\n                    <div class="select-wrap">\n                        <select data-js="waitingList"></select>\n                        ' + selectCaret + '\n                    </div>\n                    <div data-view="divisionDropdown"></div>\n                </div>\n            </div>\n        </div>\n        <div class="action">\n            <p data-js="explanation"></p>\n            <div data-view="buttonFlow"></div>\n        </div>\n    </div>\n</section>');
};

},{}],72:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h2>Shopping Cart</h2>\n    <ul class=\"side-by-side\">\n        <li>Product</li>\n        <li>Quantity</li>\n        <li>Item Price</li>\n    </ul>\n    <div data-view=\"list\" data-name=\"cartContents\"></div>\n    <div>\n        <div class=\"subtotal\">\n            <span>Subtotal</span>\n            <span data-js=\"itemCount\"></span>\n            <span data-js=\"subtotal\"></span>\n        </div>\n        <div><button data-js=\"checkoutBtn\" type=\"button\">Proceed to Checkout</button></div>\n    </div>\n</div>";
};

},{}],73:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h4>Added to cart</h4>\n    <div>\n        <div>\n            <div><img data-js=\"itemImage\" src=\"\" /></div>\n            <div>\n                <div data-js=\"label\"></div>\n                <div data-js=\"manufacturer\"></div>\n                <div data-js=\"price\"></div>\n            </div>\n        </div>\n        <div>\n            <div data-js=\"subtotal\"></div>\n            <div data-js=\"cartCount\"></div>\n            <button data-js=\"viewCartBtn\" type=\"button\">View Cart and Checkout</button>\n        </div>\n    </div>\n    <span class=\"close-btn\" data-js=\"closeBtn\"></span>\n</div>";
};

},{}],74:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var datum = _ref.datum,
        ImageSrc = _ref.ImageSrc,
        Currency = _ref.Currency;
    return '<div class="cart-item side-by-side">\n    <div><img src="' + datum.PhotoUrls[0] + '" /></div>\n    <div>\n        <div>' + datum.DiscType + '</div>\n        <div>Weight: ' + datum.weight + 'g</div>\n        <div>Color: ' + datum.color + '</div>\n        <button data-js="deleteBtn" type="button">Delete</button>\n    </div>\n    <div class="form-group"><input type="text" data-js="itemQuantity" value="' + (datum.quantity || '1') + '" /></div>\n    <div class="price">' + Currency.format(datum.price) + '</div>\n</div>';
};

},{}],75:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "" + "<div>\n    <h2>Checkout</h2>\n    <div>\n        <div class=\"forms\">\n            <div data-view=\"form\" data-name=\"storeTransaction\"></div>\n        </div>\n        <div class=\"summary\">\n            <div>\n                <h4>Order Summary</h4>\n                <div data-view=\"list\" data-name=\"cartContents\"></div>\n            </div>\n        </div>\n    </div>\n</div>";
};

},{}],76:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
    var datum = _ref.datum,
        ImageSrc = _ref.ImageSrc,
        Currency = _ref.Currency;
    return "<div class=\"checkout-item\">\n    <div><img src=\"" + datum.PhotoUrls[0] + "\" /></div>\n    <div>" + datum.DiscType + "</div>\n    <div>Weight: " + datum.weight + "g</div>\n    <div class=\"price\">" + Currency.format(datum.price) + "</div>\n</div>";
};

},{}],77:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<section>\n    <div class="left-panel" data-js="leftPanel">\n        <section>\n            <button class="link" data-js="backBtn">' + require('./lib/leftArrow')() + '<span>Back to Admin</span></button>\n        </section>\n        <section>\n            <button class="link" data-js="resource"></button>\n        </section>\n        <section>\n            <div data-view="list" data-name="collections"></div>\n            <button data-js="createCollectionBtn" class="side-by-side link">\n                <span>+</span>\n                <span>Create Collection</span>\n            </button>\n        </section>\n    </div>\n    <div data-js="mainPanel" class="main-panel"></div>\n</section>';
};

},{"./lib/leftArrow":117}],78:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
   var opts = _ref.opts;
   return "<section>\n    <p>" + opts.message + "</p>\n    <div class=\"side-by-side\">\n       <button data-js=\"submitBtn\" class=\"btn\">Delete</button>\n       <button data-js=\"cancelBtn\" class=\"btn\">Cancel</button>\n    </div>\n</section>";
};

},{}],79:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var options = p.GetSelectOptions(p.actionData, null, { valueAttr: 'name' });

    return '' + ('<div class="device side-by-side">\n    <div>' + p.label + '</div>\n    <select data-js="action">\n        <option selected disabled>Choose Action</option>\n        ' + options + '\n    </select>\n    ' + p.GetIcon('caret-down') + '\n</div>');
};

},{}],80:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
    var datum = _ref.datum,
        typeDatum = _ref.typeDatum,
        ImageSrc = _ref.ImageSrc,
        Currency = _ref.Currency;
    return "<div class=\"disc-overview\">\n    <div class=\"side-by-side\">\n        <div><img src=\"" + datum.PhotoUrls[0] + "\"/></div>\n        <div>\n            <div>" + typeDatum.Vendor + " " + typeDatum.PlasticType + " " + typeDatum.label + "</div>\n            <div>Weight: " + datum.weight + "g</div>\n            <div>Color: " + datum.color + "</div>\n            <div>PLH: " + datum.plh + "</div>\n            <div>" + Currency.format(datum.price) + "</div>\n        </div>\n        <div>\n            <button type=\"button\" data-js=\"discDetailsBtn\">See Details</button>\n            <button type=\"button\" data-js=\"addToCartBtn\">Add To Cart</button>\n        </div>\n    </div>\n</div>";
};

},{}],81:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var discModel = _ref.discModel,
        discTypeModel = _ref.discTypeModel,
        ImageSrc = _ref.ImageSrc,
        Currency = _ref.Currency;

    var thumbnails = discModel.PhotoUrls.map(function (url) {
        return '<li><img src="' + url + '" /></li>';
    }).join(''),
        flight = discTypeModel.flight ? '<ul>Flight Stats\n                <li>Speed: ' + discTypeModel.flight.speed + '</li>\n                <li>Fade: ' + discTypeModel.flight.fade + '</li>\n                <li>Glide: ' + discTypeModel.flight.glide + '</li>\n                <li>Turn: ' + discTypeModel.flight.turn + '</li>\n              </ul>' : '';

    return '' + ('<div class="disc-details">\n    <div>\n        <div>' + discTypeModel.label + '</div>\n    </div>\n    <div>\n        <div class="image-viewer">\n            <div><img data-js="displayedImage" src="' + discModel.PhotoUrls[0] + '" /></div>\n            <ul data-js="thumbnails" class="side-by-side">' + thumbnails + '</ul>\n        </div>\n        <div>\n            <div>' + discTypeModel.Vendor + ' ' + discTypeModel.PlasticType + ' ' + discTypeModel.label + '</div>\n            <div>Weight: ' + discModel.weight + 'g</div>\n            <div>Color: ' + discModel.color + '</div>\n            <div>PLH: ' + discModel.plh + '</div>\n            <div>Plastic: ' + discTypeModel.plasticType + '</div>\n            <div>Class: ' + discTypeModel.DiscClass + '</div>\n            <div>' + flight + '</div>\n        </div>\n        <div>\n            <div>Price: ' + Currency.format(discModel.price || discTypeModel.price) + '</div>\n            <div><button data-js="addToCartBtn" type="button">Add To Cart</button></div>\n        </div>\n    </div>\n    <div>\n        <h4>Product description</h4>        \n        <div>' + discTypeModel.description + '</div>\n    </div>\n</div>');
};

},{}],82:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var disc = _ref.disc,
        meta = _ref.meta,
        total = _ref.total;

    var weights = meta.weightClasses.map(function (klass) {
        return '<li>' + klass.min + '-' + klass.max + ': ' + klass.count + '</li>';
    }).join(''),
        unknowns = meta.unknowns.map(function (unknown) {
        return '<li>' + unknown + '</li>';
    }).join('');
    return '' + ('<div>\n    <div>' + disc + ': ' + total + '</div>\n    <ol>' + weights + '</ol>\n    <div>Unknowns</div>\n    <ul>' + unknowns + '</ul> \n</div>');
};

},{}],83:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div data-js=\"inventory\" class=\"inventory\">\n        <div data-js=\"leftPanel\" class=\"left-panel\">\n            <h4>Filter by</h4>\n            <div data-js=\"filters\"></div>\n        </div>\n        <div class=\"main-panel\">\n            <div data-view=\"typeAhead\"></div>\n            <div data-view=\"list\" data-name=\"discTypes\"></div>\n            <div class=\"hidden\" data-view=\"list\" data-name=\"availableDiscs\"></div>\n            <div class=\"hidden\" data-view=\"productDetails\"></div>\n            <div class=\"hidden\" data-view=\"cartAddition\"></div>\n        </div>\n    </div>\n</div>";
};

},{}],84:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
    var datum = _ref.datum,
        ImageSrc = _ref.ImageSrc,
        Currency = _ref.Currency;

    var flight = datum.flight ? "<ul>Flight Stats\n            <li>Speed: " + datum.flight.speed + "</li>\n            <li>Fade: " + datum.flight.fade + "</li>\n            <li>Glide: " + datum.flight.glide + "</li>\n            <li>Turn: " + datum.flight.turn + "</li>\n          </ul>" : "";

    return "" + ("<div class=\"disc-type\">\n    <img src=\"" + datum._Disc[0].PhotoUrls[0] + "\" />\n    <div>" + datum.Vendor + " " + datum.PlasticType + " " + datum.label + "</div>\n    <div>Class: " + datum.DiscClass + "</div>\n    <div>" + flight + "</div>\n    <div>" + Currency.format(datum.price) + " (" + datum._Disc.length + " in stock)</div>\n    <button data-js=\"seeDiscsBtn\" type=\"button\">See Discs</button>\n</div>");
};

},{}],85:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
    var model = _ref.model;
    return "<div>\n    <h4>" + model.label + "</h4>\n    <h5 data-js=\"isEmpty\" class=\"empty hidden\">No registered players.</h5>\n    <ol data-js=\"players\"></ol>\n</div>";
};

},{}],86:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var selectCaret = p.GetIcon('caret-down', { name: 'caret' });
    return '' + ('<div class="select-wrap">\n    <select data-js="division"></select>\n    ' + selectCaret + '\n</div>');
};

},{}],87:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var name = _ref.name,
        data = _ref.data;

    var tableRows = data ? data.map(function (team, i) {
        return '<li>\n            <span class="place">' + (i + 1) + '</span>\n            <span class="team">' + team.player1 + ', ' + team.player2 + '</span>\n            <span class="round1">' + team.rd1 + '</span>\n            <span class="round2">' + team.rd2 + '</span>\n            <span class="total">' + team.final + '</span>\n        </li>';
    }).join('') : '<li><span>No Results.</span></li>';

    return '' + ('<div class="division-result">\n    <h4>' + name + (data && data.length ? '<span>(' + data.length + ')</span>' : '') + '</h4>\n    <ol class="header">\n        <li>\n            <span class="place">Place</span>\n            <span class="team">Team</span>\n            <span class="round1">Round 1</span>\n            <span class="round2">Round 2</span>\n            <span class="total">Total</span>\n        </li>\n    </ol>\n    <ol>' + tableRows + '</ol>\n</div>');
};

},{}],88:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<section class=\"no-select hidden\">Dragging Item</section>";
};

},{}],89:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var filter = _ref.filter,
        data = _ref.data;

    data = filter.minMax ? [] : data;

    var inputs = filter.minMax ? '<div class="form-group">\n              <input type="text" placeholder="Min" />\n          </div>\n          <div class="form-group">\n              <input type="text" placeholder="Max" />\n          </div>\n          <button type="button" data-js="minMaxBtn">Go</button>' : '';

    var checkboxes = data.length ? data.map(function (datum) {
        var dataAttr = filter.fk ? 'data-id="' + datum._id + '"' : 'data-name="' + (datum.name || datum) + '"';

        return '' + ('<li>\n            <label>\n                <input ' + dataAttr + ' type="checkbox" />\n                <span>' + (datum.label || datum) + '</span>\n            </label>\n        </li>');
    }).join('') : '';

    return '' + ('<div data-name="' + filter.name + '" class="filter">\n    <div>' + filter.label + '</div>\n    <ul class="filters">' + checkboxes + inputs + '</ul>\n</div>');
};

},{}],90:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<footer>\n    <div>\n        <img data-src="' + p.ImageSrc('footer-image.jpg') + '" data-img-lg="true" />\n        <img data-src="' + p.ImageSrc('footer-image-mobile.jpg') + '" data-img-sm="true" />\n    </div>\n    <div class="overlay hidden">\n        <div>\n            <img src="' + p.ImageSrc('logo-white-discgolf.png') + '"/>\n            <div class="contact">\n                <div>Hazy Shade Disc Golf</div>\n                <div>723 Watervliet Ave</div>\n                <div>Dayton, OH 45420</div>\n                <div>2113 Park Rd</div>\n                <div>Springfield, OH 45504</div>\n                <div>(937) 256-2690</div>\n                <div>sales@hazyshade.com</div>\n                <div>Mon &ndash; Sat 11am &ndash; 8pm</div>\n                <div>Sun 12pm &ndash; 7pm</div>\n                <a href="https://www.facebook.com/Hazy-Shade-Disc-Golf-And-More-173084619405424" target="_blank">' + require('./lib/facebook')() + '</a>\n            </div>\n        </div>\n    </div>\n</footer>';
};

},{"./lib/facebook":115}],91:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var heading = p.opts.heading ? '<div data-js="heading" class="heading">' + p.opts.heading + '</div>' : '',
        deleteBtn = p.opts.delete ? '<div data-js="deleteBtn" class="hidden delete">' + p.GetIcon('garbage') + '</div>' : '',
        prompt = p.opts.prompt ? '<div class="prompt">' + p.opts.prompt + '</div>' : '',
        fields = p.GetFormFields(p.attributes, p.model, p.meta),
        total = p.opts.displayTotal ? '<div class="total"><span>Total: </span><span data-js="total">' + p.Currency.format(p.model.total) + '</span></div>' : '',
        buttonRow = p.opts.hideButtonRow ? '' : '<div class="btn-row">\n                <button data-js="submitBtn" type="button">\n                    <span>' + (p.opts.submitText || 'Submit') + '</span>\n                </button>\n                <button data-js="cancelBtn" type="button">\n                    <span>' + (p.opts.cancelText || 'Cancel') + '</span>\n                </button>\n            </div>';

    return '<section>\n    ' + heading + '\n    <div class="form-box">\n        ' + prompt + '\n        <form>' + fields + '</form>\n        ' + total + '\n        ' + buttonRow + '\n        ' + deleteBtn + '\n    </div>\n</section>';
};

},{}],92:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div>\n    <div>\n        <img data-src="' + p.ImageSrc('gift-cards.png') + '"/>\n    </div>\n    <div class="content">\n        <div>\n            <h4>Purchase Gift Cards</h4>\n            <p>Share your disc golf joy by purchasing a Hazy Shade gift card for your friends, family, and loved ones!</p>\n        </div>\n        <div>\n            <div data-view="form" data-name="giftCardTransaction"></div>\n        </div>\n    </div>\n</div>';
};

},{}],93:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    //const spans = model.map( item => `<li><span data-js="item">${item}</span></li>` ).join('')
    //<li><ul class="spans">${spans}</ul></li>
    return '' + ('<nav>\n    <ul class="nav">\n        <li>' + p.GetIcon('logoWhite', { name: 'logo' }) + '</li>\n        <li data-js="typeAhead"></li>\n        <li data-js="shopBtn">Shop</li>\n        <li class="side-by-side">\n            <span>' + p.GetIcon('shoppingCart') + '</span>\n            <span data-js="cartCount">(0)</span>\n        </li>\n        <li data-js="profileBtn" class="hidden">\n            ' + p.GetIcon('profile') + '\n            <ul>\n                <li data-js="name"></li>\n                <li data-js="logout">Logout</li>\n            </ul>\n        </li>\n    </ul>\n</nav>');
};

},{}],94:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var model = _ref.model,
        ImageSrc = _ref.ImageSrc;

    /*
    const logos = model.map( item => `<li><img src="/static/img/${item}-logo.jpg"/></li>` ).join('')
    <div class="side-by-side">
        <div class="featured-product">
            <span class="title">Featured Item</span>
            <img src="/static/img/putt-closeup.jpg" />
        </div>
        <div class="featured-product">
            <span class="title">Featured Item</span>
            <img src="/static/img/putt-ahead.jpg" />
        </div>
    </div>
    <div class="disc-doctor">
            <div class="main">
                <div>
                    <div>${require('./lib/logoWhite')()}</div>
                    <div class="heading">Disc Doctor</div>
                    <div class="subtitle">
                        <div>New to disc golf?</div>
                        <div>Find the perfect disc with out interactive guide.</div>
                    </div>
                </div>
                <div></div>
            </div>
        </div>
        <div class="side-by-side">
            <div class="ezFinder">
                <span class="title">E-Z Finder</span>
                <span class="caption">An enlightened search experience awaits you...</span>
            </div>
            <div class="featured-product">
                <span class="title">Featured Item</span>
                <img src="/static/img/basket-close.jpg" />
            </div>
        </div>
    <div class="suppliers">
            <div>We are proud to carry the best names in disc golf</div>
            <ul class="logos">${logos}</ul>
        </div>
    */
    return '' + ('<div>\n    <div>\n        <div>\n            <img data-src="' + ImageSrc('header-image.jpg') + '" data-img-lg="true" />\n            <img data-src="' + ImageSrc('header-image-mobile.jpg') + '" data-img-sm="true" />\n        </div>\n        <div class="overlay hidden side-by-side">\n            <div><img src="' + ImageSrc('logo-white-discgolf.png') + '"/></div>\n            <div>\n                <p>Proud to be the Miami Valley\'s premiere supplier of disc golf gear and accessories since 2002.</p>\n                <!--<button type="button">Visit Our Stores</button>-->\n            </div>\n        </div>\n    </div>\n    <div>\n        <div>\n            <img data-src="' + ImageSrc('homepage-giftcard-bg.jpg') + '" data-img-lg="true" />\n            <img data-src="' + ImageSrc('homepage-giftcard-bg-mobile.jpg') + '" data-img-sm="true" />\n        </div>\n        <div class="overlay hidden side-by-side">  \n            <div class="featured">\n                <div>Holiday</div>\n                <div>Gift Cards</div>\n                <div>\n                    <button data-js="giftCardBtn" type="button">Buy Now</button>\n                </div>\n            </div>\n            <div><img src="' + ImageSrc('gift-cards.png') + '"/></div>\n        </div>\n    </div>\n    <div>\n        <div>\n            <img data-src="' + ImageSrc('homepage-byop.jpg') + '" data-img-lg="true" />\n            <img data-src="' + ImageSrc('homepage-byop-mobile.jpg') + '" data-img-sm="true" />\n        </div>\n        <div class="overlay hidden side-by-side">\n            <div>\n                <div class="featured">2017 Results</div>\n                <div>Where did you place?</div>\n                <div>\n                    <button data-js="byopResultsBtn" type="button">See Results</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
};

},{}],95:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
    var p = _ref.p;
    return "<section>\n    <ol data-js=\"data\"></ol>\n    <button data-js=\"addButton\">+</button>\n</section>";
};

},{}],96:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var viewName = _ref.viewName,
        isEditable = _ref.isEditable,
        model = _ref.model;
    return '<div class="' + (isEditable ? 'editable' : '') + '">\n    <div data-view="buttonFlow"></div>\n    <div data-js="key" contenteditable="' + isEditable + '">' + model.key + '</div>\n    <div data-view="' + viewName + '"></div>\n</div>';
};

},{}],97:[function(require,module,exports){
'use strict';

var getHeading = function getHeading() {
    var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { opts: {} };

    if (!p.opts || !p.opts.name) return '';
    return p.opts.toggle ? '<div data-js="toggle" class="heading side-by-side toggle">\n            ' + p.GetIcon('caret-down') + '\n            <span>' + p.opts.name + '</span>\n          </div>' : '<h3 data-js="heading" class="heading">' + p.opts.name + '</h3>';
};

module.exports = function (p) {
    return '' + ('<section>\n    ' + getHeading(p) + '\n    <ol data-js="list" class="list ' + (p.model.draggable || p.model.droppable ? 'no-select' : '') + '"></ol>\n    ' + (p.model.reset ? '<button class="floating" data-js="resetBtn" type="button">Reset</button>' : '') + '\n    ' + (p.model.save ? '<button class="floating" data-js="saveBtn" type="button">Save</button>' : '') + '\n    ' + (p.model.add ? '<button class="floating" data-js="addBtn" type="button">Add</button>' : '') + '\n</section>');
};

},{}],98:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
  var model = _ref.model,
      meta = _ref.meta;
  return "<div contenteditable=\"" + meta.editable + "\">" + model + "</div>";
};

},{}],99:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h3>Sign in to your account</h3>\n    <div class=\"form\">\n        <input type=\"text\" data-js=\"email\" placeholder=\"Email\" />\n        <input type=\"password\" data-js=\"password\" placeholder=\"Password\" />\n        <button data-js=\"submit\" type=\"button\">Login</button>\n    </div>\n</div>";
};

},{}],100:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div data-view=\"byopTeamEditor\"></div>\n    <div data-view=\"byopWaitingListSwap\"></div>\n    <div data-view=\"byopNumbers\"></div>\n</div>";
};

},{}],101:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div data-view=\"list\" data-name=\"devices\"></div>\n    <div class=\"hidden\" data-view=\"form\" data-name=\"deviceLog\"></div>\n</div>";
};

},{}],102:[function(require,module,exports){
"use strict";

module.exports = function () {
    return "<div class=\"cash\">\n    <label><input data-js=\"paidCash\" type=\"checkbox\">Paid Cash</label>\n</div>";
};

},{}],103:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div data-js=\"discDetails\"></div>\n</div>";
};

},{}],104:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div data-js=\"nav\">\n        <h4>Shop</h4>\n        <ul class=\"side-by-side\" data-js=\"categories\"></ul>\n    </div>\n    <div class=\"hidden\" data-view=\"cart\"></div>\n    <div data-js=\"views\"></div>\n</div>";
};

},{}],105:[function(require,module,exports){
"use strict";

module.exports = function (p, ImageSrc) {
    return "<div class=\"sponsor\">\n    <a href=\"" + p["organization.uri"] + "\" target=\"_blank\">\n        <label>" + p["byopSponsor.year"] + "</label>\n        <img src=\"" + ImageSrc(p['organization.name']) + ".jpg\"\" />\n    </a>\n</div>";
};

},{}],106:[function(require,module,exports){
"use strict";

module.exports = function (team) {
    return "<li>\n    <div>\n        <div>\n            <span>" + team.name1 + ", " + team.name2 + "</span>\n            <span class=\"disc-selection\">" + team.discs + "</span>\n            <span class=\"shirt-selection\">" + team.shirts + "</span>\n        </div>\n    </div>\n</li>";
};

},{}],107:[function(require,module,exports){
"use strict";

module.exports = function () {
  return "<div></div>";
};

},{}],108:[function(require,module,exports){
"use strict";

module.exports = function () {
    return "<div class=\"hidden\">\n    <div data-js=\"icon\"></div>\n    <div>\n        <div data-js=\"title\"></div>\n        <div data-js=\"message\"></div>\n    </div>\n</div>";
};

},{}],109:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div class="' + (p.opts.hideSearch ? 'hiding-search' : '') + '">\n    <input data-js="input" placeholder="' + (p.opts.placeholder || '') + '" "type="text">\n    ' + (p.opts.hideSearch ? '' : require('./lib/search')()) + '\n</div>';
};

},{"./lib/search":122}],110:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<section>\n    <ol data-js="list" class="list"></ol>\n    ' + (p.model.add ? '<button data-js="addBtn" type="button">' + (p.opts.addText || 'Add') + '</button>' : '') + '\n</section>';
};

},{}],111:[function(require,module,exports){
"use strict";

module.exports = function (p) {
	return "<svg class=\"caret-down\" version=\"1.1\" class=\"caret-down\" " + p.IconDataJs(p) + " xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 292.362 292.362\" style=\"enable-background:new 0 0 292.362 292.362;\"\n\t xml:space=\"preserve\">\n<g>\n\t<path d=\"M286.935,69.377c-3.614-3.617-7.898-5.424-12.848-5.424H18.274c-4.952,0-9.233,1.807-12.85,5.424\n\t\tC1.807,72.998,0,77.279,0,82.228c0,4.948,1.807,9.229,5.424,12.847l127.907,127.907c3.621,3.617,7.902,5.428,12.85,5.428\n\t\ts9.233-1.811,12.847-5.428L286.935,95.074c3.613-3.617,5.427-7.898,5.427-12.847C292.362,77.279,290.548,72.998,286.935,69.377z\"/>\n</g></svg>";
};

},{}],112:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg version="1.1" data-js="' + (p.name || 'checkmark') + '" class="checkmark" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t width="97.619px" height="97.618px" viewBox="0 0 97.619 97.618" style="enable-background:new 0 0 97.619 97.618;"\n\t xml:space="preserve">\n<g>\n\t<path d="M96.939,17.358L83.968,5.959c-0.398-0.352-0.927-0.531-1.449-0.494C81.99,5.5,81.496,5.743,81.146,6.142L34.1,59.688\n\t\tL17.372,37.547c-0.319-0.422-0.794-0.701-1.319-0.773c-0.524-0.078-1.059,0.064-1.481,0.385L0.794,47.567\n\t\tc-0.881,0.666-1.056,1.92-0.39,2.801l30.974,40.996c0.362,0.479,0.922,0.771,1.522,0.793c0.024,0,0.049,0,0.073,0\n\t\tc0.574,0,1.122-0.246,1.503-0.68l62.644-71.297C97.85,19.351,97.769,18.086,96.939,17.358z"/>\n</g></svg>';
};

},{}],113:[function(require,module,exports){
'use strict';

module.exports = function () {
    var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return '<svg version="1.1" data-js="' + (p.name || 'error') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 18.978 18.978" style="enable-background:new 0 0 18.978 18.978;" xml:space="preserve">\n<g>\n    <path d="M16.088,1.675c-0.133-0.104-0.306-0.144-0.47-0.105c-0.013,0.002-1.261,0.29-2.594,0.29\n        c-1.788,0-2.789-0.476-2.975-1.415C9.999,0.191,9.779,0.007,9.521,0c-0.257-0.007-0.487,0.167-0.55,0.418\n        C8.727,1.386,7.71,1.877,5.95,1.877c-1.332,0-2.571-0.302-2.583-0.305c-0.166-0.04-0.34-0.004-0.474,0.102\n        C2.76,1.777,2.681,1.938,2.681,2.108v4.869c0,0.04,0.004,0.078,0.013,0.115c0.057,1.647,0.65,8.714,6.528,11.822\n        c0.08,0.043,0.169,0.064,0.258,0.064c0.092,0,0.183-0.021,0.266-0.066c5.74-3.137,6.445-10.115,6.532-11.791\n        c0.012-0.046,0.019-0.094,0.019-0.144V2.108C16.297,1.939,16.219,1.78,16.088,1.675z M15.19,6.857\n        c-0.007,0.031-0.012,0.064-0.013,0.097c-0.053,1.298-0.574,7.832-5.701,10.838c-5.215-2.965-5.646-9.526-5.68-10.83\n        c0-0.029-0.004-0.058-0.009-0.085V2.784C4.322,2.877,5.112,2.982,5.95,2.982c1.911,0,2.965-0.54,3.537-1.208\n        c0.553,0.661,1.599,1.191,3.536,1.191c0.839,0,1.631-0.101,2.166-0.188L15.19,6.857L15.19,6.857z"/>\n    <polygon points="10.241,11.237 10.529,5.311 8.449,5.311 8.75,11.237 \t\t"/>\n    <path d="M9.496,11.891c-0.694,0-1.178,0.498-1.178,1.189c0,0.682,0.471,1.191,1.178,1.191\n        c0.706,0,1.164-0.51,1.164-1.191C10.647,12.389,10.189,11.891,9.496,11.891z"/>\n</g></svg>';
};

},{}],114:[function(require,module,exports){
'use strict';

module.exports = function () {
  var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return '<svg class="ex" data-js="' + (p.name || 'ex') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve"><g><g><polygon points="405,136.798 375.202,107 256,226.202 136.798,107 107,136.798 226.202,256 107,375.202 136.798,405 256,285.798     375.202,405 405,375.202 285.798,256   "/></g></g></svg>';
};

},{}],115:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<svg class=\"facebook\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 90 90\" xml:space=\"preserve\"><g>\n    <path d=\"M90,15.001C90,7.119,82.884,0,75,0H15C7.116,0,0,7.119,0,15.001v59.998\n        C0,82.881,7.116,90,15.001,90H45V56H34V41h11v-5.844C45,25.077,52.568,16,61.875,16H74v15H61.875C60.548,31,59,32.611,59,35.024V41\n        h15v15H59v34h16c7.884,0,15-7.119,15-15.001V15.001z\"></path>\n</g></svg>";
};

},{}],116:[function(require,module,exports){
"use strict";

module.exports = function () {
    var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return "" + ("<svg version=\"1.1\" class=\"garbage\" " + this.IconDataJs(p) + " xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 59 59\" style=\"enable-background:new 0 0 59 59;\" xml:space=\"preserve\">\n<g><path d=\"M29.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C28.5,50.553,28.948,51,29.5,51z\"/>\n    <path d=\"M19.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C18.5,50.553,18.948,51,19.5,51z\"/>\n    <path d=\"M39.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C38.5,50.553,38.948,51,39.5,51z\"/>\n    <path d=\"M52.5,6H38.456c-0.11-1.25-0.495-3.358-1.813-4.711C35.809,0.434,34.751,0,33.499,0H23.5c-1.252,0-2.31,0.434-3.144,1.289\n        C19.038,2.642,18.653,4.75,18.543,6H6.5c-0.552,0-1,0.447-1,1s0.448,1,1,1h2.041l1.915,46.021C10.493,55.743,11.565,59,15.364,59\n        h28.272c3.799,0,4.871-3.257,4.907-4.958L50.459,8H52.5c0.552,0,1-0.447,1-1S53.052,6,52.5,6z M21.792,2.681\n        C22.24,2.223,22.799,2,23.5,2h9.999c0.701,0,1.26,0.223,1.708,0.681c0.805,0.823,1.128,2.271,1.24,3.319H20.553\n        C20.665,4.952,20.988,3.504,21.792,2.681z M46.544,53.979C46.538,54.288,46.4,57,43.636,57H15.364\n        c-2.734,0-2.898-2.717-2.909-3.042L10.542,8h37.915L46.544,53.979z\"/>\n</g></svg>");
};

},{}],117:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg class="left-arrow" data-js="' + (p.name || 'leftArrow') + '" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t viewBox="0 0 31.494 31.494" style="enable-background:new 0 0 31.494 31.494;" xml:space="preserve">\n<path style="fill:#1E201D;" d="M10.273,5.009c0.444-0.444,1.143-0.444,1.587,0c0.429,0.429,0.429,1.143,0,1.571l-8.047,8.047h26.554\n\tc0.619,0,1.127,0.492,1.127,1.111c0,0.619-0.508,1.127-1.127,1.127H3.813l8.047,8.032c0.429,0.444,0.429,1.159,0,1.587\n\tc-0.444,0.444-1.143,0.444-1.587,0l-9.952-9.952c-0.429-0.429-0.429-1.143,0-1.571L10.273,5.009z"/></svg>';
};

},{}],118:[function(require,module,exports){
"use strict";

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	var dataJs = p.name ? "data-js=\"" + p.name + "\"" : "";
	return "<svg version=\"1.1\" " + dataJs + " xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"60 60 390 138\" enable-background=\"new 60 60 390 138\" xml:space=\"preserve\">\n<g>\n\t<path fill=\"#141414\" d=\"M168.437,35.587c-2.143-0.83-12.522,15.673-14.37,17.516c-2.036,2.899-10.258,16.93-10.398,17.202\n\t\tc-3.332,6.446-4.875,11.786-7.644,20.147c-1.065,3.217-6.7,21.27-8.912,26.999c-0.569,1.473-2.58,3.882-5.152,4.556\n\t\tc-5.318,1.393-10.622,3.16-15.696,5.319c-1.061,0.451-2.262,0.979-3.213-0.136c-0.764-0.895-0.191-1.859,0.173-2.783\n\t\tc4.098-10.372,8.332-20.695,12.227-31.143c0.926-3.507,1.425-4.972,2.479-6.978c1.492-2.838,2.999-5.591,4.891-8.073\n\t\tc0.979-1.392,2.187-2.656,3.197-4.04c0.553-0.759,1.444-1.695,0.595-2.627c-0.774-0.85-1.812-0.353-2.595,0.149\n\t\tc-0.204,0.335-2.093,1.174-2.559,1.394c-6.919,3.26-10,5-18.833,10.5c-1.341,1.322-3.913,2.218-6.398,1.047\n\t\tc-3.63-1.709-7.311-1.096-9.583,3.214c0.946,0.212,1.3,0.415,1.56,0.33c1.918-0.628,4.3-2.65,5.669-0.228\n\t\tc1.391,2.462-1.855,3.021-3.224,4.131c-7.963,6.456-14.07,14.25-16.901,24.172c-0.794,2.785-3.181,6.668-0.236,8.771\n\t\tc2.863,2.045,6.526-0.405,9.246-2.098c10.483-6.524,16.599-16.315,17.69-28.399c0.472-5.223,3.344-7.513,6.399-10.385\n\t\tc1.03-0.968,2.264-1.695,3.548-0.756c1.457,1.065,0.446,2.442-0.038,3.594c-2.901,6.903-5.726,13.845-8.839,20.652\n\t\tc-3.06,6.69-4.491,14.536-12.376,18.007c-1.6,0.705-1.412,2.227,0.048,3.138c4.336,2.71,1.631,3.988-1.007,5.322\n\t\tc-5.388,2.728-10.371,6.035-14.537,10.443c-10.982,11.621-9.847,27.705,3.229,36.209c8.279,5.385,9.814,4.549,11.537-5.258\n\t\tc1.67-9.506,3.225-19.016,6.291-28.229c0.958-2.879,2.154-3.681,5.022-3.015c4.03,0.938,6.29,11.224,3.163,15.183\n\t\tc-1.113,1.41-2.394,3.315-4.478,2.03c-2.383-1.469-0.98-3.032,0.445-4.405c0.615-0.593,1.107-1.369,0.542-2.191\n\t\tc-0.589-0.857-1.432-0.545-2.221-0.17c-2.886,1.367-4.586,5.908-2.83,8.551c2.018,3.033,4.685,3.812,8.084,1.594\n\t\tc7.905-5.158,8.231-16.818-0.472-23.756c-1.734-1.383-4.38-1.055-3.795-3.902c0.613-2.979,2.319-4.518,5.041-5.43\n\t\tc5.52-1.852,11.002-3.81,16.498-5.73c1.206-0.421,2.908-1.038,3.664-0.295c1.223,1.201,0.186,2.5-0.231,3.703\n\t\tc-2.522,7.256-4.603,14.646-5.45,22.281c-0.844,7.604-0.958,15.182,5.342,21.982c0.015-5.287-1.875-9.486-1.518-14.008\n\t\tc0.957-12.111,4.833-23.439,8.862-34.749c0.277-0.776,7.252-21.316,9.002-25.688c1.75-4.125,5.432-14.98,6.625-18.25\n\t\tc2.376-6.511,5.961-13.417,19.729-35.805C165.814,45.061,171.043,36.59,168.437,35.587z M80.253,119.751\n\t\tc-0.321,0.081-0.648,0.141-1.058,0.229c-1.806-0.077-2.02-1.264-1.747-2.759c1.974-10.833,8.947-18.2,17.211-24.617\n\t\tc1.363-1.059,2.486-0.498,2.76,1.347C98.522,101.387,87.542,117.908,80.253,119.751z M88.943,147.479\n\t\tc-1.907,9.785-4.54,19.442-4.727,29.521c-0.062,3.373-4.075,1.744-5.339,0.633c-4.763-4.188-9.205-9.094-8.5-15.625\n\t\tc1.086-9.758,6.611-15.188,15.265-17.483C88.34,143.809,89.496,144.643,88.943,147.479z M85.8,141.843\n\t\tc-0.964,0.148-2.343-0.196-1.814-1.436c0.937-2.195,3.076-3.265,5.287-3.845c1.074-0.282,1.728,0.613,1.868,1.715\n\t\tC90.341,140.984,88.079,141.491,85.8,141.843z\"/>\n\t<path fill=\"#141414\" d=\"M236.218,107.563c-4.358,4.424-7.062,7.121-12.177,10.36c-0.7,0.443-1.818,0.748-1.667,1.667\n\t\tc1.106,6.726-2.133,13.557-8.637,15.57c-3.742,1.158-5.763,3.404-7.622,6.525c-8.128,13.637-17.481,26.162-31.852,33.985\n\t\tc-5.385,2.933-10.971,3.738-16.867,1.996c-1.921-0.567-3.662-1.507-2.162-3.881c10.993-17.397,24.177-32.313,44.73-38.611\n\t\tc6.568-2.013,9.249-5.544,9.225-12.904c-0.009-2.628-0.68-4.889-3.226-6.3c-2.515-1.395-4.527-0.254-6.462,1.094\n\t\tc-3.041,2.118-5.331,5-7.559,7.915c-0.729,0.954-1.025,1.926-2.881,1.558c-0.312-0.236-0.346-0.631-0.219-0.938\n\t\tc2.581-6.185,7.385-11.025,10.917-16.483c4.432-6.85,9.08-13.543,12.082-21.202c0.602-1.535,1.953-3.264,0.439-4.554\n\t\tc-1.375-1.17-2.716,0.514-3.879,1.344c-13.117,9.354-23.841,20.367-25.648,37.456c-0.243,2.295-0.246,4.614-0.402,7.778\n\t\tc-3.087-4.5-3.554-8.793-2.652-13.369c0.354-1.796,1.249-3.884-0.606-5.081c-3.506-2.262-2.277-3.751,0.438-5.322\n\t\tc1.94-1.123,3.483-2.719,4.144-4.833c2.055-6.578,5.519-12.439,8.834-18.41c1.912-3.442,3.963-7.126,1.279-11.235\n\t\tc-0.467-0.716-0.583-1.694,0.21-2.248c0.978-0.684,1.877-0.041,2.71,0.55c4.422,3.133,5.146,6.706,2.422,11.6\n\t\tc-0.656,1.181-2.392,2.447-0.566,3.834c1.461,1.109,2.345-0.451,3.316-1.267c5.581-4.684,11.965-8.605,14.864-15.823\n\t\tc0.364-0.905,0.972-1.959,2.199-1.5c1.057,0.396,1.16,1.516,1.197,2.538c0.233,6.439-0.965,12.677-3.694,18.438\n\t\tc-2.908,6.137-5.515,12.49-9.854,17.862c-0.732,0.907-1.492,1.976-1.083,3.167c0.553,1.611,1.937,0.759,2.993,0.676\n\t\tc3.811-0.303,4.973,2.333,5.396,5.249c0.672,4.633,0.833,9.304-1.24,13.733c-0.48,1.026-1.32,2.283,0.091,3.045\n\t\tc1.16,0.626,2.175-0.324,3.053-1.142c4.438-4.121,5.462-7.957,3.319-13.53c-1.521-3.953-1.01-7.774-0.128-11.763\n\t\tc0.82-3.712,3.398-7.497,0.099-11.367c-0.971-1.139,0.039-2.213,1.032-2.904c8.863-6.182,10.062-15.879,11.623-25.387\n\t\tc0.226-1.372-0.887-3.272,1.072-3.885c2.123-0.663,3.384,1.023,4.359,2.588c1.556,2.498,1.127,5.225,0.14,7.72\n\t\tc-1.898,4.794-3.984,9.519-6.153,14.198c-3.181,6.861-6.307,13.729-8.719,20.92c-0.499,1.486-0.746,2.917-0.685,4.246\n\t\tc0.077,1.676,0.112,2.141,0.98,2.82c1.031,0.808,1.823,0.055,2.592-0.616c13.111-11.464,23.907-24.591,29.462-41.41\n\t\tc1.099-3.326,1.603-6.792,0.795-10.335c-0.214-0.938-0.351-2.289,0.84-2.549c0.812-0.177,1.962,0.312,2.705,0.854\n\t\tc2.797,2.043,3.936,4.722,3.201,8.278c-1.268,6.137-4.162,11.568-7.026,17.014c-9.295,17.667-20.115,34.527-27.614,53.146\n\t\tc-6.981,17.33-10.604,35.248-10.318,53.983c-0.347-0.153-0.757-0.215-0.795-0.368c-4.014-16.074-15.559-19.695-29.917-15.392\n\t\tc-11.537,3.459-19.275,11.979-24.108,23.094c-0.438,2.562,0.229,4.334,2.19,6.196c1.979,1.88,4.656,1.99,6.956,0.888\n\t\tc4.633-2.222,6.741-5.589,7.459-10.586c0.449-3.119-1.782-3.769-4.192-2.544c-1.703,0.866-4.101,3.797-5.252,2.889\n\t\tc-1.515-2.092,2.234-4.674,4.735-6.426c1.729-1.213,4.958-1.078,6.468,0.162c1.638,1.348,2.361,3.155,2.063,5.311\n\t\tc-0.948,6.861-4.967,12.211-11.531,15.194c-3.71,1.687-6.474,0.205-9.102-1.979c-2.664-2.215-4.611-5.867-3.544-9.479\n\t\tc3.868-13.095,13.256-20.649,25.417-25.79c4.984-2.105,10.291-3.293,15.863-2.771c4.245,0.397,8.146,1.354,11.451,4.281\n\t\tc2.077,1.84,3.256,1.201,3.187-1.629c-0.396-16.201,6.044-30.517,12.521-44.781c2.746-6.049,5.486-12.13,9.176-17.708\n\t\tC236.964,110.171,237.287,109.188,236.218,107.563z M165.229,175.234c4.373-0.303,8.452-2.102,12.154-4.766\n\t\tc10.465-7.531,18.081-17.523,24.452-28.568c0.572-0.993,1.446-2.147,0.551-3.189c-1.163-1.354-2.438-0.098-3.597,0.337\n\t\tc-15.887,5.957-27.679,16.853-36.958,30.753c-0.812,1.219-1.982,2.486-0.937,4.064\n\t\tC161.842,175.298,163.475,175.152,165.229,175.234z\"/>\n\t<path fill=\"#141414\" d=\"M224.176,218.665c-0.396-0.549-0.044-0.856,0.448-1.033c4.472-1.601,10.115-2.073,14.245-4.62\n\t\tc2.945-1.816,3.585-2.82,1.408-6.021c-10.736-15.787-10.478-33.444,0.078-47.718c1.967-2.659,3.236-3.215,5.692-0.492\n\t\tc8.855,9.816,11.369,21.195,8.737,33.878c-1.002,4.829-2.429,9.715-5.241,13.721c-2.807,3.996-1.284,5.437,2.165,7.479\n\t\tc9.833,5.828,20.056,3.334,25.556-6.592c8.021-14.477,3.709-37.31-9.046-47.679c-3.284-2.672-7.086-2.46-10.933-1.647\n\t\tc-1.402,0.295-2.661,1.467-4.788,0.461c3.51-5.2,0.928-9.741-1.23-14.723c-7.442-17.177-0.989-40.454,13.584-49.607\n\t\tc6.793-4.267,11.502-5.882,15.498,3.314c1.11,2.553,2.463,1.276,3.893,0.287c1.91-1.322,3.812-2.705,5.876-3.744\n\t\tc1.896-0.954,7.131-4.423,7.399-2.701c0.73,1.278-8.218,5.628-11.346,8.589c-2.988,2.83-4.591,5.485-4.186,9.929\n\t\tc0.881,9.623-1.592,18.53-8.088,25.967c-1.342,1.536-2.576,4.241-4.987,3.47c-2.673-0.854-2.153-3.912-2.269-6.107\n\t\tc-0.512-9.844,3.619-18.169,9.295-25.749c2.771-3.702,1.836-6.801-0.266-10.046c-1.273-1.97-3.109-2.438-5.179-1.147\n\t\tc-11.46,7.153-19.914,30.721-9.501,42.849c2.541,2.959,5.724,5.062,8.875,7.23c20.794,14.312,25.672,43.21,10.447,63.555\n\t\tc-9.127,12.194-19.447,13.545-31.63,5.937c-2.962-1.851-4.672-2.152-7.773,0.017C236.031,219.131,225.499,221.382,224.176,218.665z\n\t\t M236.249,185.501c0.453,3.422,0.323,5.978,2.625,11.923c1.25,3.227,2.812,7.6,5.979,7.395c3.293-0.215,4.263-4.555,5.338-7.764\n\t\tc3.552-10.609,3.314-20.94-3.817-30.298c-2.074-2.721-3.534-2.979-5.432,0.257C238.007,172.016,235.911,178.293,236.249,185.501z\n\t\t M277.725,111.399c-4.351,4.732-5.869,10.578-7,16.539c-0.172,0.904-0.574,2.981,0.524,3.443c1.438,0.605,2.224-1.566,2.771-2.482\n\t\tC277.223,123.534,278.107,117.626,277.725,111.399z\"/>\n\t<path fill=\"#141414\" d=\"M314.479,94.111c0.312,0.396-0.654,1.122-0.661,1.13c-11.684,12.338-12.073,28.76-15.365,44.144\n\t\tc-0.272,1.277-1.029,4.62,0.862,3.737c0.248-0.115,1.727-2.955,2.248-4.054c3.625-7.625,6.568-12.636,13.062-16.938\n\t\tc2.292-1.519,4.827-3.07,7.785-1.327c3.235,1.907,2.725,5.104,1.983,8.057c-2.587,10.326-5.308,20.619-7.938,30.935\n\t\tc-0.386,1.513-0.913,3.711,0.31,4.429c1.168,0.687,2.432-1.416,3.277-2.779c1.25-2.104,3.583-8.938,4.83-8.559\n\t\tc1.67,0.37-3.344,12.018-6.918,16.516c-1.949,2.451-3.252,0.258-4.164-1.17c-3.002-4.697-2.595-9.914-1.569-15.008\n\t\tc1.575-7.826,3.499-15.584,5.25-23.375c0.311-1.375,0.593-2.843-0.471-3.468c-1.655-0.974-4.214,2.092-5.125,3.25\n\t\tc-10.625,14.375-17.896,26.979-12.414,46.239c-3.478-0.559-4.366-3.309-5.411-5.749c-1.66-3.884-1.766-8.099-2.302-12.22\n\t\tc-0.462-3.547-0.05-7.494-4.3-9.396c-1.131-0.506-0.992-1.705-0.21-2.535c5.604-5.941,5.071-13.85,6.516-21.035\n\t\tc1.069-5.33,1.713-10.868,0.604-16.38c-0.232-1.152-0.34-2.594,0.922-3.11c6.145-2.521,10.316-7.845,15.961-11.053\n\t\tC312.24,93.824,313.029,93.041,314.479,94.111z\"/>\n\t<path fill=\"#141414\" d=\"M403.249,155.632c-1.286,4.267-3.976,6.36-7.708,7.959c-3.333,1-4.688-1.062-5.105-3.636\n\t\tc-0.612-3.77-1.896-3.531-4.419-1.255c-6.539,5.901-12.618,3.771-14.84-4.896c-1.187-4.63-0.502-9.695-3.332-13.947\n\t\tc-0.623-0.938-0.339-2.105,0.754-2.518c3.632-1.365,4.349-4.72,5.69-7.748c1.555-3.507,3.468-6.821,6.471-9.378\n\t\tc7.589-6.462,12.302-5.52,16.294,2.471c0.758,1.635,0.726,3.343,2.741,3.062c0.829-0.115,1.797-2.11,2.517-3.327\n\t\tc4.238-7.159,8.493-14.309,12.75-21.457c0.255-0.428,0.521-0.869,0.867-1.217c2.369-2.374,17.706-2.946,20.063-1.182\n\t\tc-22.496,12.174-31.067,34.72-41.019,56.226c-0.613,1.327-1.31,3.038,0.173,4.128c1.759,1.292,3.521-0.504,4.479-1.494\n\t\tc0.624-0.646,0.916-1.167,1.392-2.007c0.389-0.685,1.024-3.099,1.712-3.306C404.624,152.382,403.52,154.736,403.249,155.632z\n\t\t M394.453,125.822c-2.163-5.378-3.588-5.756-7.376-2.277c-5.523,5.07-8.092,11.699-9.676,18.76\n\t\tc-0.945,4.209-1.831,8.52-0.88,12.859c0.725,3.311,1.861,4.924,5.809,2.593c6.327-3.735,9.869-9.007,11.711-15.914\n\t\tc0.546-2.049,0.488-2.903-1.68-2.766c-4.897,0.312-7.138-2.294-7.067-6.821C385.358,128.022,389.014,125.49,394.453,125.822z\n\t\t M396.938,131.507c0.046-1.538,0.046-2.448-1.062-2.875c-0.812-0.312-2.312-0.312-3.75-0.062c-1.36,0.236-1.575,0.384-2.875,1.25\n\t\tc-1.5,1-1.089,2.871-0.543,4.816c0.629,2.245,2.604,2.807,4.33,1.764C395.276,135.045,396.76,134.505,396.938,131.507z\"/>\n\t<path fill=\"#141414\" d=\"M138.215,135.425c0.134-3.147,0.662-6.333-0.901-9.32c-0.264-0.504-0.346-1.501-0.038-1.846\n\t\tc7.341-8.21,8.598-15.127,14.848-26.335c3-4.792,2.5-4.833,5.641-8.21c4.029-4.333,8.125-4.091,11.501,0.837\n\t\tc0.718,1.048,0.885,2.846,2.521,2.721c1.938-0.147,1.845-2.047,2.189-3.434c1.389-5.587,6.626-7.518,10.35-10.872\n\t\tc0.628-0.566,1.721-0.452,2.154,0.411c0.508,1.014-0.164,1.96-0.77,2.734c-5.71,7.292-9.092,15.822-12.884,24.133\n\t\tc-3.666,8.036-6.45,16.404-9.257,24.762c-0.522,1.555-1.395,3.508-0.196,5.189c1.635,2.293,0.667,3.861-1.316,4.98\n\t\tc-2.476,1.396-2.788-0.791-3.57-2.546c-0.863-1.937-2.176-1.687-3.551,0.188c-2.253,3.074-4.875,6.062-7.795,8.199\n\t\tc-3.673,2.688-5.749,2.45-7.629-1.77c-0.337-0.755-0.618-1.693-0.763-2.492C138.358,140.602,138.265,138.007,138.215,135.425z\n\t\t M162.924,99.343c1.2,1.414-0.696,2.583-1.3,4.081c-0.723,1.791-0.979,4.238,0.874,5.118c1.771,0.842,2.679-0.44,3.574-1.758\n\t\tc1.96-2.88,2.715-6.036,2.396-9.468c-0.261-2.814-1.218-5.192-4.031-5.871c-2.505-0.604-3.548,1.934-4.61,3.59\n\t\tc-5.622,8.771-9.301,18.465-12.627,28.272c-1.933,5.7-2.744,11.646-2.62,17.692c0.028,1.362,0.392,2.021,1.481,2.383\n\t\tc1.312,0.438,2.773-0.86,3.688-1.812c7.208-7.502,11.19-15.438,13.836-25.388c0.421-1.584,0.63-2.656-1.184-3.677\n\t\tC155.974,108.894,158.291,98.923,162.924,99.343z\"/>\n\t<path fill=\"#141414\" d=\"M346.708,113.59c5.801,0.317,8.338,2.944,10.963,7.146c0.599,0.957,1.704,2.212,2.422,2.2\n\t\tc0.782-0.013,1.551-1.461,1.959-2.556c1.078-2.888,8.729-7.234,11.762-6.621c2.977,0.602,1.819,2.224,0.568,3.481\n\t\tc-9.854,9.908-14.47,22.467-18.123,35.529c-0.505,1.807-0.989,3.523,0.769,5.018c1.83,1.557,1.029,3.052-0.556,4.027\n\t\tc-1.882,1.16-3.188,0.082-3.812-1.729c-1.203-3.497-2.246-3.232-5.369,0.086c-1.834,1.917-2.58,2.703-4.834,4.083\n\t\tc-2.491,1.524-5.597,0.113-7.152-1.836c-2.318-2.908-3.496-4.95-4.431-8.497c-1.462-5.551-1.223-10.445-0.083-18.167\n\t\tc1.068-7.237,4.858-14.062,10.396-19.49C342.636,114.848,345.179,113.403,346.708,113.59z M350.26,124.548\n\t\tc0.614,0.376-0.328,2.38-0.535,3.136c-0.845,3.087-0.087,5.578,3.35,5.759c3.25,0.172,3.848-2.655,4.045-5.232\n\t\tc0.232-3.054-1.546-5.352-3.287-7.586c-3.11-3.99-5.141-4.012-8.102,0.068c-5.218,7.188-7.445,15.506-8.711,24.127\n\t\tc-0.691,4.703-0.27,7.783,1.104,13.104c1.5,3.25,3.172,4.504,5.873,1.799c4.799-4.808,8.454-9.988,9.553-16.986\n\t\tc0.528-3.368,1.233-5.502-3.048-6.582c-2.571-0.649-4.454-3.129-4.701-5.948C345.588,127.786,348.957,121.924,350.26,124.548z\"/>\n\t<path fill=\"#141414\" d=\"M431.152,161.55c0.597-0.323,0.612,0.244,0.472,0.396c-5.764,6.15-11.019,7.593-16.075,5.346\n\t\tc-5.01-2.227-8.575-9.859-7.752-17.033c0.266-2.312,0.946-4.51-0.376-6.762c-0.628-1.07-0.473-2.456,0.944-2.896\n\t\tc5.173-1.613,8.196-6.127,12.403-9.039c4.869-3.371,10.087-5.768,15.953-6.667c3.446-0.529,6.209,0.555,8.165,3.538\n\t\tc1.93,2.941,1.2,5.672-0.521,8.381c-5.729,9.017-14.249,13.531-24.606,13.668c-5.069,0.067-6.009,2.473-6.296,6.244\n\t\tc-0.371,4.883,2.205,8.137,6.353,8.373C423.706,165.318,427.018,163.4,431.152,161.55z M442.084,133.134\n\t\tc0.154-3.506-2.372-5.193-5.87-3.97c-7.987,2.795-12.263,9.104-17.309,15.249c-0.546,0.665-0.679,1.771-0.072,2.485\n\t\tc0.541,0.64,2.697,0.64,3.938,0.344c3.873-0.924,6.14-1.836,9.618-3.688C436.802,141.206,440.709,138.021,442.084,133.134z\"/>\n\t<polygon fill=\"#141414\" points=\"422.348,183.193 422.728,183.367 422.765,183.166 \t\"/>\n</g>\n<text transform=\"matrix(1 0 0 1 317 199)\" font-family=\"'Roboto-Medium'\" font-size=\"18\">DISC GOLF</text>\n</svg>";
};

},{}],119:[function(require,module,exports){
"use strict";

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return "<svg version=\"1.1\" " + p.IconDataJs(p) + " class=\"logo-white\" xmlns:x=\"&ns_extend;\" xmlns:i=\"&ns_ai;\" xmlns:graph=\"&ns_graphs;\"\n\t xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" \n\t viewBox=\"0 0 500 254.307\" enable-background=\"new 0 0 500 254.307\" xml:space=\"preserve\">\n<switch>\n\t<foreignObject requiredExtensions=\"&ns_ai;\" x=\"0\" y=\"0\" width=\"1\" height=\"1\">\n\t\t<i:pgfRef  xlink:href=\"#adobe_illustrator_pgf\">\n\t\t</i:pgfRef>\n\t</foreignObject>\n\t<g i:extraneous=\"self\">\n\t\t<g>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M80.454,175.922c-5.967-9.862-5.778-13.199,3.796-53.727\n\t\t\t\tc-12.216,5.697-26.545,3.676-32.794,17.916c3.413,3.877,6.205,7.076,8.997,10.251c-3.451-1.142-6.908-2.284-11.544-3.827\n\t\t\t\tc-1.417,6.926-2.622,12.786-3.827,18.621c-2.566,9.549-5.12,19.098-7.654,28.559c-14.606-2.195-21.99-9.209-23.766-22.084\n\t\t\t\tc-1.87-13.477,3.896-23.652,16.89-29.086c7.127-2.975,12.931-5.346,11.318-15.782c-0.621-4.091,7.234-8.96,9.781-14.179\n\t\t\t\tc5.163-10.591,9.065-21.809,14.11-32.475c1.581-3.338,5.17-5.722,7.843-8.545c1.129,0.854,2.271,1.693,3.4,2.56\n\t\t\t\tc-6.324,16.802-12.648,33.604-19.167,50.895c26.25-1.167,35.598-11.632,35.617-36.214c0-4.756,5.841-9.223,7.498-14.305\n\t\t\t\tc7.353-22.725,19.405-42.35,38.647-57.908c-10.478,21.269-39.865,85.602-42.857,93.369\n\t\t\t\tC98.329,110.551,81.753,153.035,80.454,175.922z M34.202,190.064c2.228-14.531,4.354-28.472,6.72-43.932\n\t\t\t\tc-12.994,2.962-20.353,9.324-21.589,21.082C18.185,178.27,22.395,186.562,34.202,190.064z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M248.546,234.057c22.577,3.902,33.945-3.877,36.656-25.059\n\t\t\t\tc3.162-24.794-11.331-45.837-32.358-46.991c-2.509-10.44-6.18-20.767-7.303-31.354c-1.964-18.42,2.754-35.096,19.232-45.863\n\t\t\t\tc3.878-2.533,11.883-4.541,14.154-2.509c3.94,3.552,6.726,10.415,6.776,15.911c0.062,9.448-1.531,19.148-4.054,28.283\n\t\t\t\tc-1.367,4.943-6.11,8.971-10.414,14.879c-7.303-13.324-1.656-23.023,2.622-32.697c1.757-3.979,5.496-7.365,6.249-11.395\n\t\t\t\tc0.59-3.187-1.594-7.252-3.563-10.251c-0.477-0.69-5.685,0.678-7.78,2.31c-19.59,15.333-18.862,44.018,1.306,58.395\n\t\t\t\tc27.091,19.324,33.063,54.482,13.526,79.617c-10.201,13.137-21.307,15.207-34.805,6.461L248.546,234.057z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M165.629,175.396c0.257,3.137-27.518,11.306-34.281,12.786\n\t\t\t\tc-0.621-1.317-1.236-2.635-1.857-3.953c12.592-21.494,28.151-39.801,53.36-48.193c3.865-1.279,9.354-3.338,10.352-6.311\n\t\t\t\tc1.794-5.246,0.696-11.457,0.803-17.267c-6.029,1.343-12.071,2.685-17.542,3.902c7.83-13.024,16.814-27.956,25.792-42.901\n\t\t\t\tc-1.186-0.854-2.384-1.693-3.563-2.561c-18.521,10.428-31.508,25.473-35.981,49.302c-6.688-13.603-0.602-23.101,4.298-33.001\n\t\t\t\tc5.044-10.177,9.518-20.629,14.43-31.408c8.853,5.158,2.365,12.687,1.117,20.817c8.438-7.88,16.864-15.747,25.033-23.364\n\t\t\t\tc2.88,12.636,2.88,12.636-15.214,48.184c17.096,5.058,8.068,18.031,8.626,29.902c3.928-3.213,7.09-5.81,10.258-8.395\n\t\t\t\tc0.264,0.238,0.521,0.489,0.785,0.74C196.548,140.926,181.057,158.18,165.629,175.396c2.277-3.362-6.726,5.057-2.905-0.614\n\t\t\t\tc4.737-7.027,21.476-26.904,26.2-33.918c-1.029-0.828-2.039-1.656-3.068-2.497c-22.197,7.88-38.409,22.812-52.049,45.374\n\t\t\t\tC141.562,183.74,149.763,182.484,165.629,175.396z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M413.43,164.516c-3.539-0.74-12.498,0.59-14.192-1.593\n\t\t\t\tc-9.272-11.884-0.526-45.069,13.753-48.983c5.496-1.506,12.987,4.303,20.88,7.265c10.201-11.192,11.682-39.263,41.471-31.972\n\t\t\t\tc-28.271,19.512-41.772,47.543-52.011,78.609c-1.469-1.055-4.43-3.225-7.391-5.396c3.262-7.076,6.512-14.141,9.938-21.557\n\t\t\t\tc-3.25-1.519,7.378-12.972,4.291-14.414c1.782-2.799-14.58-5.798-15.296-4.078c-4.718,11.48-8.796,23.273-12.033,35.256\n\t\t\t\tC402.35,159.473,411.033,161.906,413.43,164.516z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M217.202,110.375c6.261-7.617,13.564-14.605,18.527-23\n\t\t\t\tc8.263-13.967,15.051-28.836,22.922-44.257c6.086,2.233,4.153,9.373,1.129,15.571c-7.506,15.309-15.405,30.455-23.712,45.336\n\t\t\t\tc-16.419,29.35-28.81,59.914-29.99,96.529c-8.156-13.402-18.514-19.299-32.311-16.477c-13.979,2.887-24.926,10.641-32.173,22.951\n\t\t\t\tc-6.713,11.406-3.783,16.137,9.995,19.211c-3.871,0-9.605,1.555-11.18-0.34c-2.867-3.45-5.251-9.398-4.335-13.514\n\t\t\t\tc5.283-23.615,38.886-39.715,61.215-30.002c1.556,0.678,2.999,1.594,1.901,1.004c9.511-26.752,19.01-53.464,28.195-79.301\n\t\t\t\tc-2.334,1.344-6.368,3.664-10.396,5.986L217.202,110.375z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M364.241,165.896c-3.576-0.703,1.808,6.839-13.301,0.101\n\t\t\t\tc-15.521-6.927-5.509-45.308,9.034-54.757c9.65-6.261,15.961,1.105,21.207,7.342c5.634-3.527,11.317-7.078,16.989-10.629\n\t\t\t\tc0.577,0.753,1.13,1.506,1.707,2.259c-5.17,9.122-11.218,17.881-15.233,27.478c-3.877,9.247-5.659,19.386-9.349,32.624\n\t\t\t\tc-2.12-3.563-3.89-6.562-5.659-9.562c6.35-12.197,8.847-42.408,0.979-48.156c-11.217,9.938-18.307,27.34-16.123,41.707\n\t\t\t\tC355.232,159.221,359.648,163.951,364.241,165.896z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M305.78,181.996c-4.881-14.08-14.267-27.154-8.331-43.404\n\t\t\t\tc2.647-7.262,4.742-15.707,3.676-23.135c-2.409-16.738,8.508-22.549,19.663-29.162c-3.99,13.439-9.486,26.264-11.381,39.59\n\t\t\t\tC306.797,144.389,306.859,163.273,305.78,181.996z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M472.668,147.176c-3.764,1.705-7.365,4.277-11.293,4.906\n\t\t\t\tc-6.187,1.016-13.865,0.715-12.284,9.385c0.853,4.681,6.299,8.533,9.549,12.573c-5.973,3.074-12.385-1.017-14.242-7.905\n\t\t\t\tc-2.12-7.792-4.267-19.851-0.163-24.192c9.737-10.361,21.105-22.206,38.108-18.366c2.371,0.539,5.797,8.921,4.542,10.665\n\t\t\t\tc-3.776,5.255-9.611,9.019-14.656,13.373c2.385-7.278,15.773-9.725,7.83-24.265c-9.511,8.256-18.156,15.744-26.777,23.236\n\t\t\t\tc0.703,1.166,1.418,2.32,2.146,3.475C461.162,149.107,466.921,148.141,472.668,147.176z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M248.791,233.793c-7.705,0.604-15.39,1.205-23.283,1.82\n\t\t\t\tc3.733-2.385,7.692-4.906,11.99-7.654c-13.395-22.197-19.086-43.83-0.464-65.463c17.448,10.565,21.968,33.453,10.434,57.118\n\t\t\t\tc-2.968,6.073-2.905,9.888,1.079,14.456C248.546,234.057,248.791,233.793,248.791,233.793z M239.16,173.275\n\t\t\t\tc-13.294,14.367-12.755,32.461,1.512,49.4C253.816,206.075,253.221,186.864,239.16,173.275z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M142.51,79.131c-17.718,18.42-25.717,40.617-25.535,65.961\n\t\t\t\tc0.006,1.845,0,3.689,0,6.137c-6.832-4.856-11.983-22.182-8.137-30.15c6.418-13.263,13.571-26.263,21.651-38.56\n\t\t\t\tc2.064-3.162,8.752-3.274,13.333-4.78C143.388,78.202,142.949,78.666,142.51,79.131z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M143.821,77.738c1.989,1.605,3.99,3.199,5.753,4.617\n\t\t\t\tc5.025-5.635,10.221-11.469,17.931-20.127c-2.974,7.328-5.954,14.668-8.94,21.996c-4.028,9.889-8.037,19.764-12.052,29.639\n\t\t\t\tc-1.989,4.881-3.972,9.762-5.96,14.644c-1.807,4.429-3.927,8.806-5.339,13.373c-0.552,1.782-1.186,2.911-2.849,3.915\n\t\t\t\tc-4.304,2.598-9.982,6.638-15.352,5.609c-0.257-1.87-4.191-3.514-1.192-5.496c2.001-1.318,4.034-2.586,6.205-3.576\n\t\t\t\tc2.491-1.117,4.649-3.05,6.575-4.944c1.888-1.841,3.388-3.511,4.655-5.819c0.991-1.844,1.349-3.84,1.958-5.797\n\t\t\t\tc0.552-1.77,1.198-3.488,1.794-5.245c1.123-3.3,2.158-6.826,1.656-10.364c-0.609-4.33,1.136-10.177,4.285-10.177\n\t\t\t\tc-0.145-6.952-0.289-13.903-0.439-20.854C142.949,78.666,143.388,78.202,143.821,77.738z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M327.965,174.868c-5.771-3.237-6.462-5.885-3.262-22.335\n\t\t\t\tc1.832-9.361,3.864-18.693,6.412-31.003c-5.685,3.688-9.198,5.96-12.699,8.231c-0.502-0.841-13.602,6.613-14.091,5.76\n\t\t\t\tc6.086-3.828,24.795-15.949,30.893-19.764c1.28,0.967,2.548,1.933,3.827,2.898C335.356,137.363,331.667,156.072,327.965,174.868z\n\t\t\t\t\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M216.988,110.074c-1.857,1.48-3.727,2.974-5.584,4.454\n\t\t\t\tc-1.268-0.313-2.541-0.64-3.808-0.954c1.675-11.656,2.095-23.689,5.389-34.857c3.382-11.443,9.587-22.047,14.832-33.629\n\t\t\t\tc7.73,2.785,4.104,9.763,1.97,15.371c-5.132,13.477-11.318,26.552-16.199,40.104c-0.891,2.51,2.302,6.5,3.614,9.812\n\t\t\t\tL216.988,110.074z\"/>\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M46.92,83.108c-1.167-2.409-2.34-4.818-4.411-9.097\n\t\t\t\tc4.718-0.565,25.259-1.744,31.094-2.447c-2.021,5.96-18.245,12.711-19.826,19.437c-4.185,17.769-16.074,29.964-35.26,31.722\n\t\t\t\tc4.573-9.475,8.307-17.229,12.046-24.983c-1.224,6.148-2.453,12.284-3.978,19.938c14.932-5.308,21.45-15.346,24.18-28.195\n\t\t\t\tC51.142,87.713,48.275,85.254,46.92,83.108z\"/>\n\t\t</g>\n\t</g>\n</switch>\n<i:pgf  id=\"adobe_illustrator_pgf\">\n\t<![CDATA[\n\teJzsvWuPHcmRJfgL4j/kfmhAGnSm4uHx0jYayJuZ7NGu1C2o1A+hMShQLKrEaRZZYLHUo/n1a+eY\n23H3e28mM4uURtomAyqRcePh4W5ubzv2N//XL7+4vP7q7W9fXk5X/UX3N39z8+7l8/dv3/30gmcv\nfvb69fffvX+HUz/61Y8vhuWqt4uuf7Z9mS/8l5fvvnv19s1P+dNVsh+f4e4fXX/1/JsfX/zox3bi\n16/ev35pp/778//9x5+//frtl4fXz1/8x9V3f/j6x/FCe8Lt8/d20TD+ZPvJsFxsP52mi1/+Ar8/\nf/OH59999+p/49dl2iY7d3j7/ZuvXr35+vD2f9nJ6eIybfNF2raLy3EZ7ff//upXL787uuhqGpYd\nV6ardU3JLl+vhtnegnuuxm3GjbdvX3z/zcs373/57u2Ll999d/P29dt33/20sw+ev3z26vVL+7Zv\nnr+3UWIarn82jF8evn/1+qt//P6b3760r172AaenL3njP3/3/GsbNP+O0+uXP/vGznzx8v17G9Z3\nP73AVN784jf/b/02G2o+fvTvv3r59StOvk3P//hxfvK7t99+8/zdf+D2i8u57y/wv8sxzVfLPiW/\n6Ncvv/n2tc0nP32c+6vZruD/1f/I19pn8brLIS0Xl8u6XW1pWS8W/mvhP/zKMjkv//Dq5X/+9OIf\n37556XNz/e79F75CKdlw+F//5Vffv3757p/fvHpvA15wavfJ+cXbr16+tsHp/mevn3NOeAzlv37B\nr5+/+/rle1vVt6+/f0962+INNvk/f/5HI0N7u7/gn759+ebXb/+FY7zc+6txWm2Zhz5d9es8XgxX\n9s9hMXIZ+sH+ufFll9PFtOn1Q/mvvwXPxBPjVTYnf/NLW81/evfq61dvfno5Y7bS4uv8D+9efVWW\n2V4w5P/g6Vdb9b89/ucjt0l4//7lm/wlRl43v6jIpb/6xRf22rs3X928/QYr8R32ghHJG6Og12+/\n9t/0d/5it3//rX8C//2lLdov3716g2d2/8hfti9/+fp7++kf3r39/tufvfnd2+5Hvvn/5eUL2+G2\nrl9d/NNv/6f9wzY0Sfji1++ev7AH2L91zdXzV9/++MHH2ce9e3nhP9qd/Gf8/4fvvn35O9t85XY/\ne/fmDy9fv/22eqzOPH/z1cW/Pn/37Ycf/cvXz988f3fB83ryz1/9wX55bjNVnl3OPeKhRibf2uTw\nFl5y9IIHLqh+esSLnr///cXh9cs3X32nZ/s/24H7uQ8/74sXoMF3F4d333/3+4tfv337Wo9tf9LT\n82mexfV/Ge/4JW94809vfIJO35QvOH6T8aK/uLfY1fe/wX78S376zfPXr199/e75t79/9eLcC878\nrjf5b08hrD9+89u3r199902hp+rML5+/e//qxeuXX/zxu/cvv3n04l7cffXKmNw92/jBa774z+fv\nX/z+569+++75u1cvH9x9WIDfvXrzldH+F9+/ev+yTNDbb76FLnPxxe+ff/uSn/H+98945Rd64Pyl\nsf6auV9ePsD1x/7i8Kb6/R/ePf/qlQkU09KePYfSdPHFf/zxx139DxNd48Xhq+7fO5NcHVS9vvu7\nzoTw33fDxd98eXjnv5gsS5Ryvf2ZXOQtpqOYrO1xmQmwLz902eG7+kmUm/zt3APqX+2+w60mI77p\n/Gf+07vnb75++bcXv3n5+vXb/7RPPTphj5v9c+0j5x94LOePrvrr39vzD4fDzeH2cHd4dtPfDDfj\nzXSTbuab5Wa92W72m+ubm5vbm7ubZ7f97XA73k636Xa+XW7X2+12v72+Pdze3N7e3t0+u+vvhrvx\nburu0t18t9ytdxufb1c//kgfPrrqr39vZJDX3yZqeuBITz+6k1PN/PLjNtP9t2Vbt23bt+vtsN1s\nt9vd9mzv92Ef97TP+7Kv+7bv+/V+2G/22/1uf3bdXw/X4/V0na7n6+V6vd6u9+vr68P1TXd9e313\n/ezQH4bDeJgO6TAflsN62A774fpw8Aldn3QsHzq6MyerNTma5PHTHscPfGgNHzw4NWag7dP1dJhu\nptvpbnpmizakMU0ppTktaTX7a0/X6ZBujHru0jNbxmEe5zTP8zKv8zbv8/V8mG/ss+/mZ0vfLcMy\nLpOp1vOyLOuyLftyvRyWG5uju+XZ2q/DOq7TmtZ5XdZ13dZ9vV4P641N/N36bOu3YRu3aUsc3bNn\nz+7suLXjxo6DHdd27HZsdqx2LM9mO5Idkx2jHYMd/bMeN97hz+2dbcY72653193d9Z2R050RnO22\n1fbcYjtvtv2X7ibbiqNtyMG2ZY832ha9u8Uf2822aQ+2dY0YbRNvt+vREj/2z/C4o3vshZ/igU8n\nwL/3Tx5IfIl8c+23fu+ve9uG/U1/azP4zJ49DKMd05CGeTC6GNZhG2yXD9fDYTDGOdxitodneGpn\n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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\tAHm+G+PZdbCYaOTGkIvBv9M4G5cuXBHLluWXXBbkifvqIkaujZXaMjS/7P1Y7U3UQWofSbkqXCnl\nSeFuKW8Mt8yLZmThvilfEG4ehifjS90XVKYinEVlymqnUpnacD5p+sM/pVWqvVhazPB1lfUOd9hp\n2gVe6KkrVXLGgow52BV5upibYZ/o8s648wKevSB7nqM3DjhQ9the3Ljf4wzHZZve5nmorkNSFHif\nPYrm9QKf4Tg161MuMvm6I4Kt5yDZEPp+eV+c8eWJcek6jR0cFYl8J59Y5uHrLofBNhpIu2/Bb9qz\nyQ2vouXCm7aXf0Op4hXUl0+uWtyJXj1HZ/L7XoTmyrOw65gwak/aqaLZVDLjtDzbPm0Zw99hbDLR\nairXxdjLs46/8UU7B4BfrAgAVuq0mQ2qSTTb1ugLGnhMNOzUmR6aekGQDTjBia6zyCNM8IdrcZH3\nt65juyDVZZlQyqOClsora5orQ9N1Gn7Qb/2Bx8sfE7+5IvxNfXKCf3urFn9anI/pBGKKuKJZ/HJV\nnvfynFiI/LYXDa2B6JGbW5Y0Jx2L1kzLnyLaUQgkropP0XOOvi1WHSriSMdsveuRY0edMJ+kxoYo\n4gBFBFmTMJ8magf2TnIZ7t4eIaDBr3M9CB5W90nP2fAaes98bSWG3ZlduJFKgG0CrNMBkVFQM2wo\n1z9MYnB8N9lG9JEg5RfKFc5s1Deg2MAec61udoGHoJHfOGSHF6K4br6axJgQYUeyN6Mie7iZEAkf\nwltnFOquG+jh4KxYgZlGaFqcBMtCLVDN911blA6Qcp0xPEp7PSpnhbdv3JZs0WhkUOCpLmv08CH6\nqKqvxNmZrsuYjNk4as8X5PnCoxgka+YVNzJ6p/mft0hljzWCM9OzdOu1nKHBwALVms+wU6jxB11o\nEDX50OHIrJggM2RQuzswU+LMaHJfhLq76o6v0oOQrbnP1UeDNc57dqVpWGCPDF1q6AgCbHDE6xNr\naV2mAowo5eipTxdStwemPsW0wiePYK3fmQdiWkTqN182X6AePmAwrVjIfXY3hN+X1xsWLCitkITR\nsccMgnJsL/Gz/D6nrx1Z0WREmQLh3W8KRVCxsCYxFL6kXJQpvjwmNkbzMm2gGJM2WQw7tmL9bWXD\nxhSUTR3TVDZ/PZuFScSsF0YSK1MYTqNviTHFShfmFdRQRlFTTWGGQVyn/PKYq4JKmW0blUKH33fn\nM7NRD1iKiR6Tgw1dPNlG9pviH5frBBc5qg9WM5mu8BnMeq5Slv/bP3d/vXnLzUyeS2I+ncmH05Vn\nFrGg6iUKSagAIHFqsf2PupSJySMLRDgcz+BSG3QKsySXfk30LvZR0bMiP2KtnKOIlbKWZZxzAkj4\nbEczVYZdvAU6A3zwUy75AJ+a+g1qwZRTi2g2sloGXpPMIlZoPRiGXTYiIgB2tkXRCAsNyDX4SrPp\nhiVXJsysQzCKHxPuRDB2jTIbVKyAtmdTp2eEXVE4VILvS8p3IryHsh1WwdCXh8DdDB9/xNNGE3rJ\n7FvFdIYYyTZ5kI2GC5zHqB5BNG30wqTdTTTeB8cM6qJ4GbN3bNBeZoP8LAZATpbypntENcRIa66/\n2FkqvBPj81LUPsNvbkwL83qyCdkFr++Hi0sEP3sT7Jfz7J7qy/zbyD25ee3KuiKICW8HSyFwiY11\nx13Ql7lvH3gCs4ln5KzZE1iJUAYwIL61f/D9NqdmTO/OFJ76fj7BXgTgkk9QCfGhSf4LKIU4RxuP\n4SpVb/f/6DwXlvpfrW73q29F2EXMHoUU3N2U7Veq76vX6sEK6/fQs+if312J2nvEEPecAgYFyuRe\nokrLzB3oYnim37j69VTHkLAH+8B14TFFcir9qxjCnCLlE1e5KyksM4Qp+t7zSZadLwy9d/JKplB7\nmZVZXdbHN+pRgyuLR6/ss5qbBwbHuLsDYujG0eaNQ62+EG6EJSucPhHITmM8XZNl/Hjw6asnFSlK\n9EJq8lEXxviqLw94r5fWVWZkddHm/pjyIFMeGFMtLxxyKCfYvQ+MSgbqEjV4aBpo5FC+0ZSVtEQW\nqOYCighz4zRbdh2lVpnVIbseNaucfcRkdvoiYoV6+DCmytCFLtdvc4nl+YKX64IoyrOCeNp3BomV\nsQUZlvEHtTbfKarWfIjyNWfaIfXclp0Ua1DttbxOxzsynAL36EZnCpB/9t2Xv3r57cvn719+BYbT\nMJhdjADFUOMI7zC9wlWtJgQqRadqNdFwQ2WaKHR1jbYu08RZjxRGmSZkHX9Wmab9L8di6jJNSGr3\nn0WZJop17e6xlGnyWYm+8apMc0yruydUpjmm2TOqokpzRMkrdOO6SBPjmOnViyLNcZ49gBU1miP8\n8pyZukhzRAyC2TNRpAmFM21Mgs9FmuMKF9ja1Gia7p19ulGjifvM3B5KReY4hxO/rtHE+HuGW6NG\nE3fm6Eiu0RyRM8mx1kWa45zJWkWarNSlNRRFmqfr/yi95P4yvEdqJ6zSXHKRppHBpZc4zrnEEdrC\nuvagkXWPKs09qyaAfbFRI/Ps0tYPkUTYEmceYbYeKoXpiEK80u1hagdepjnkMs10zwB604iWNco0\nt1ym+fgBGCEh2Y2VUbTNokz0/+/KycfVaZ4gIiAu7xynQkRAUN+TRAMSYUQKhfsiMyQC4/LkDwUR\nARF2h0kISAQE4cl3BImAbAcGompIBIbmmecZkAh4IdX6BhIBRtfIDRqQCCfjD0gE7D/+0EAiwIai\nkSBIhBGyHz4ZQSLApU40hgYSYWQOUpoLJMJIvyw4aEAiwPXO4TWQCAQXgPEiSARmOYCwBXWAvIqc\nX1NBInAdMI3VdZsngAUkAmYEYrKxfvC0/O0ZEQGBCYqJAERAkgM1/wYQAUzbpycAEQaEwsapAkQY\nzFx0J1YNiIDwKFltACJAKiTkbQgQAbSQwKkbQAS8H4Fc4SHAAjQSXwsewulShuDG23ypajserGnd\np2LGI4TcIxNKZjw+ImeqFDMeQpe5B7LjEULeZkxv2PGM5jsyRmXHDzNyvkBNYcdTmIJlyI6H/EvI\nO6jteO4edwtkOx430v8kOx7hYuqSjR0/hKySHe+5GaCNsOMH+EbHtLR2PCPevDPseC4eXJyy43Gn\nexNqO97TrvJIYMdDIWG6Y9jxIKDZd1Nlx2NXb7TRw45H3J8JlrLjT5fyB9vxj8QzOLXj3QgeGiPY\nCMmF25EZz2sGwCFMxg93zyS59wGsmAJIk3Et48AOaHBix3/g/Y0Z/7T3+wM+nRX/l+EX/FMY8SdI\nBsOmiGSFZEAWPs1VxcrIuAii87mohYICil9d+YLND3EZ1TEQKzPgLqJ+BuyS6Yt1lY2uilocyCjP\ndsvVOthvPa6oa3pwW67A9kgSmC35WdQGkc/DhKoriMA3IVOizAhfRrGW65AojTyjqRQrUSDhH1HS\nBB7BusIoeoJpkOAUrUujyINgN0YB1Wi6Hs2RKLHCTJs2PzSFWFAP+h61816tZeadZ2FGORfS8zhB\nTdEXJUPytApkG+Ex3NJRO4awvucxlQIzyE4Px+QyNLBB3B1lai4j59RWs4mFRtEbmCU1nyiLG/iX\nNDbFc3g4fQRRYge2ToEQRXiUGZD9Ta0ezCZmiUVJHwy8fWG6qBf94clM66xLAzEoX8u4ChGpjYXs\n2RKPE3UdYjnpWheS6pikHP9GMiyEXV3vyBkBsUZVJLLGQFBRNhn/rmsr41wUYFIf5IlcoolXk6nW\nhZz4Vk5tlHsi7XIHa8r1oEw8m7apKRplCqf7iyLBOuUSjVx8iiXj6tRQBjSukXGW61ghTuk4qaEM\nMGNMC42SWI4gEUHIi2aRpuHIH1VpLbI+qBdEAS4YSIIXPlfojnCzYQfXZbzkMqhOimJfbGn6+KMc\nGJoQ3SV10TCYyATaidJiSGfEBKP2GHqEJ9iXAmUMIKsTLGLGk9m4NKqc8V3EO6tLoTGzQwVlwGRZ\nBPWiohqECUZZl11jEVnPEcXZeDRlT5RvjwFcVhd5O5NbJpWCMyMa6VZRLE4FBf6suqScDgsQVq47\nh5LH3NwoTKcbggHXqnwdLgbGTqLIfUAMCT0qogweCa1U7OpieVIxB+4V9byLqlYuucf+zmVDUZZP\nfRVutijdl3Iaxf3DHMAQFQTAQNfOPAdOgGfv2kIFkIBO1HADOunvpyfFUzucqTi0nw2mzy9JLmn0\nu9Gnx0n9/vhn8444qZGYMCGIVAwVm4fVzc33ZILTV4NcEUPTvCCTwj1OmjtkbZNKY37hisaJWAAk\nVkKANKtkdzGDXmuJX23zabEhxjDgliQ80110g2pFflUmLNQcEAOooj4k/iF4HiRKnlngOGCE9SZp\najrfJp/q2Azw5rJYIbYLXa27Q5qUTYW3Y05j58Gxw3qTvDUpncalhSLZcxQ08EpGNDsWnAk48dJw\nCbBvCAahokwAkRWjWXsysxZZxSdD8Cuz5wIInwWM217SYLiYjQrNJfPGNWfKB++klG+xYnYm/YsH\nD6FHiEsjMY2ljxVwATRBmvfB8JHoAC94DVywb15RFKIj0rJCtvDNayt/bMEGllpnIWU2MbM5JcXG\n0ZPPG1mHHIa+QPsM0FeIvxMiM040cjVOSvhC0kCKSTrbWlHxamQ4MvwKRgFmglzp5N+1shAnpVIg\nLDBNldKBFPsFpQe1ajJO7nHRVfCObw785CpOzptvFaExuZNA+hJSBbE60qj62ae10buwN2CwSjvD\nfMCmlf6GmBC5SKPmDbPPX2iD0FfwsaEtQtWEN6JWKW1Gx1Tws/ZciJC1UqisbvnXumvoD6HhIqEA\nLqGsAW+5QKvWkk0v5XOFVrD4JwqsIPm+qBXyufcsSkEVrB6hEz6Z6VHT2Or+S/I05sA5W9yjFPYD\nCaoFKTD2xQ8LO2RNDMwIcC15nVdtzKyrT0pYPKjhg1UVJpGJ8OEInCAuKSBxaEZVjC9+w5ZaqDnY\nyGOSFWcfweWTnQcW4S7NOsUajhCmhEUmNt6dpgJLAMDJfj1CJfAnCpRguPI8qJwVPuWwR4tIgAIL\nBuVyjjlZ75xT0JGIQq9sjUawLBHdCzACOPeQO9tgEQyRmJVz46lYgulE+nzfBM70cyAQxP0CIIi3\n1PgDGkvk/GvENfpA/qaCPRAfHTUGmpoGeSDPX8EdyCsm2IG8CE3pQ14oFUhoJaOGoix4XWshulBJ\nRiacUrWRqast7sgkqBqQoFGViWQ6bopJdFEuOYm9UIpS8oZpalfyplKFS2w6FcHkjdkUyvjWLdU0\neWur3iZv/xZiIPMIFe8EEykAA5nTtPgCmR2pVij4VVQTBU9rao6C70VlUvBF1S4V9lnXOAWPVSlU\n5sEqlgo+3dRUBTNX6ZXYvcqzilioqrgkPFTrJfmiejCJoaZuTNJK9WUSaFGCJrFXV6lJOKqaTfJT\nFW8Ss01lnKRxdV0W2Kqyq85U1XjV2Vy1F+pBdSIrEU0BoHQNFQpKHVEtYTlT1xyWsw==\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\tjYgxu4uQM7/gVUuvjuAzsVU2OoeL6nzx0KokqcLIJd0MVlUJHaZLqTXsyJMwRt4wyg1XV+SkMhen\nU0LGq0/OCtBEomt1cb6ju7LnSpaAh7pZqSqyBfghLNFjPK1eUcnP1YqGs6TQ0erq6pTtsJMl6dvv\n+GWemZJMjO6+VxKxYzGF9MPyu1RDrilAyWcThkJfYZOq7KXiJssCfq5RNWn7Nrf6rAdyHMiIKDPc\nvXyenaoUjun9/wwYyjGj2Ek1AfTYH77t6VGkcLpONasGO0E20hHI4LK1YcXRkgwBkmFMzLfv7JhL\ntWnGX7mjTyEqY3crH9WES4Ea8VSp4lx2hZSlRk5LNvZDinEjSXS5CiORDKkAEtRTtuO2sq44bSGY\nR4rAmphPCzoOfrJ0IRmmuQsDl26zW22k582SkOrrP62pSDFBFzXSSRKhloKelQAIca+aWDb2lwE8\nlIYmeDp+2eHhDdoDJExEqccmiIIF56TOqIJIAiZXtFo12xFJvuK29uCmNNplG2gM8ncxbMsxTlMY\nBqOJXjaL+/A5ixO4bWa/TCRxnoaPQA6KOunDa1YlvNpMW+rj5XD5Fs7QafvIUSi2KnUJ/BdcOJLS\n9E+pRmoX+iO6pZyWcdCb5192EmwiNCvAD4J/hCvZx+0emLf+MKPSnGwcubNaySXh2a0FvHH/USZb\nHWbEZ5l2OPEIFalQC6noOCVCvFk4Jbelku/sGdnUC89B7j5hJD6J7ZVJ1m7+1uDDRSqIMbNcDj5Q\npb7A0TTGAIZgW25O8K7ItYKgX4dLpU621Zub8KAtl00LPVPr37kHbfnY7lXMvN7mJDLGBAfZfP0k\n3K/skL6hWCWTu40GFywShPZiLLNEIwxW7duoy9U8vEWsFYvacbAoL4lllKlvLG4Sh3cJEvKXFrVj\nBOr92U7fwW5eLPa1L59qk1RvnObRI/JZCr6rZ+C2mlzJV4+iLEURXL3d8py7lyFhkXOqMMJlh1xe\nTofR5bEXC8sqoayk0en6uJsiCdppLalIhc44bWIoj1LbDvkYEy7zNBLOiPHBohtPv5I5w1oqV6Vh\nyPrYWNx9WUYsYNtM7IIWVgv6RzvhtnvN0H17Wp7g4KrQy+pSf+iv4/pZouYwR1baeCpHn8mBbmrf\nFDHfFmi4rJTeYve79z6RTV0VONk9gUCFr0JSnKnIg09bduJmYpcYFachI6RAHBb9qVoq/RnFVBSp\nGk8bDXvathTNUbZ6jRwA4W3CdqJybPF9tIJYoeDqJcCUwRxer6IYCRZTW8CyezcuVhW4yEq6VzdR\nARA+y0JTa+xXVqkN2YlLIFyamPBk0qS3T3eu/O5NEpybN/BFr1QI835e6ltaNQjeqX4cXSblgShE\n0Nglb8h2wcbq7kUX0tDqdqbFtNUJo4r71dQlBWkMxwPpVnae9xkFirtHSPQb1Lj3mSAVk5Eb7mKm\nG0ur3evor7iiO3eNMBDKd5QwwGhkc2ffeESxEIs8/sfZ5mZxQ92GsknNP9TIjPfx3G3zgNHuhSyb\nWSwdn09UJVKcaW+pSm7Uqba7bCAW5lwsloTBcoXTEwAKlgJrYzrcNeFO2+yKLJgxgq6pzaUSTs3f\nRMdWv1qVI4v+oUgTDpPl1zYTd7aXuUduc1UkQ2X3VrJ0R2nOYYoet5QHxxyg2VLel0rANgvLqcxk\nM4qMJnxEhDgt5lV1A56XhZ626HNhMGrBwgHGiaBAYxTIMuPIhe72pvF+XswzbEstVex3g2Ejdc6I\ntqrxnmCjcowUF6lBIlIvSNupGuuwPG6cZvlErKxVyjC3xS1KNWDxj9ZMZpPN+plbPq8U21qr/z1N\nfgXZcCViSBzyQC/3G2aU/DMkwWbiOKrZh+426naV4cRbVJaQWrbd63h2VghF+/he9L3JjclRowjz\nUlLq9CmE/d4RVfpsgNUGSGErWpqE3LXXWUXFY6rpu9eaMINGXQBlz9JJw5+wXMrmmUm0h9lU85XC\nBqkgbPdXX0XlhiTttsNRm43WrcV1THWxinFhwfEeuTeVR6Fg3w/L7i1SrhWYkJg7ZypgKjrAGUmL\n3aJJRAZIPKton0F6x/JDFTfvxH3a6mBpn0jQLdFZsIZWHttLcl7kUKyqJIQSxpkKXxHLweHeFaVT\nhSqNdhiuWDxXa4D62m/rEjq4osbsctMuC36r6F65ZMk2LybdHnk31UHIykxN44Yt9azOVJ3R8XBY\ncc4+W89Uq67yJYmPkvbpgR+T/6AcsKvi0Sk/wq+0AVn9KYkWwrvcaJW88Q3N2oks5I9DGpOUtWw1\nkw2QQgEW8wf2GHVbj09aZxHovoWCtIpRrTvJopyraXfLctkXyhGMYW7Cry45aomty2pTFIdW14aW\nPL05MchPpamxqYePd8GVZi26SxJUXgWR4SjH2yUY4OpLIv7wQSrlkmzTuVuWzCZ0fNPm5BGzLnac\niit+/jNLrTeTfLruywa57R04ih2nOu7OZjpRalXTdRyne0ZSsSeBdZ42WQljQtLqtOAU63D3fkly\nxAgXnJt3TvFQkRWgC0CvHQ0ydBKdS3bMLmuqp19bhRCfZVXOByF8fHjmaq3ouRxUpT2q3qe0jY31\nFpl72zOwmqtYg9w+Y1bLx+nKkEyHYtmc3Ttob3sn/sq9DJUNUAWqrt6rKarGrGegp9uGE3HtK8p+\n+d2SCVm8DUHfTEE1seJuIiqaBQ4ribEAzOXeqoclCMDYTHRZEE29wYK53/aIvvaMkrzJ5rJ6ijDQ\nL98221C/QsU/ZRz6x6R2/+gPSto6hnCw//nPP3tJDKkcAOoQHqLiYr9yq70yYVXyX68abc+npeZt\nPlP3dizR6lteWUZPGq53NQJ97jJdtpp4l9jop6Qjxs7uh6GOMooMpHkIKGo10xGnjhhhFH0We0Q1\n+aq8bLfo6uH5UgxK52G4fZ9E+5nc/OPUHKy0qKRSFQJulqkjjt6ioxNCDbMXss58O6+8SkCj15jS\nL9XSMV2dUZ+07yZEQicXvd+7ai5vNVja7TlYCSUOX194LX5S7PEiEXEWF2+4lJy2UJWmZB5nWXna\n4l8mxVsCL9Gq7JwzrVPRu0h1LYED5jT11B5ejEV0ZlGQeR9vrQw6ja4U1cDFUdoIEOy+vQ16GDYD\nIdppYVx9UvrMPdqpSmSV29mMKOd/6yTSnPsybFyQAnFCIjBYTpcvoHk4itGwneq98t3e6STozYV9\nMWjBV6AhqqZOF3GRkgdlEKgl4QerRJIVBtE8xQ7PWXi7U1Gt1s3dyylO995ZkvH/xt9LKl4KIx4d\n7Vx7yOohSKMuvMvlWGSIlmtCr8l2LE5XRBgXh34Y8q0fRrIS6iZEcoLp82hqS+HWa4YXfcSxrddp\nIVReMA3z2xuBDwfXqHbo9koBiT9TAISBSYOwBe/U7aBdISf9qWJjDTwdJLVrL7GbQX2Ltx3N392x\nXIwXbbhZSlUuRVUfHgfTCTQ8aqzk94XBHHKrKxoH4RGordopa2ojvOS5tqlQJat5982xwmQ0FUVi\nXiTg+54/f++CAKSVkOkfVS2kqBeDUHXzzZQIiDxKfgKlYfF31XQiBWnbCmmh1HYpL6dksgRQuC0r\nJYMywHckv1bvoXE1njjNwom33GVFNE9rKrWcAx6g2jFuk1b+4oE+k1feLMJC7YJkauiqlfbD5vzH\nzStJLT4YIiKkUk/rO1Pjo3StmpHmLlLNKE0se/Shnebh0CQg/mj3mUPwI5FwPYNLgfnimTKSI/Jo\nMQoIe1nN/B6M3e6dLxhGenJz3QdCdLtFMM0FWkyX/PXQvv4Jx4UyltbLsdgMoSFBasvqIRYnFnKc\nHu7pJQVYVm2ZTo+XRqxyVdXPGRDGw5SLzLAblNUCsliWyBeeIVUn9hXV/lC1VZ96+JYYrSWvwcib\nZEndUOId1l38Cy+51dTMLsDpdbspyNlreQesbvdMAh2Ikla/d99wM2KohpRlKB6whMitoSxTBYbs\n4qQVxnHoi8uy3/ZZikCOnbnqfK8owCRRL+Dl5TF6diPSOAABONrWdqluEEqjflyRnLZ5aSL7GKGP\nhkWZrZi1ptXT9OriV4yU90ihyD5ivm754rvP03Yz47gR1N9tuu/OOJPs0yiDG1bah4hZ60dpvBBx\n17zcoz9l73mu3Ly+HCGRo1vFvsW1JEuhi4gQL1XpZwQ92LNRIquaGol/qBX1MN034kR7jyizkksR\nutCLe9huz7xE+T4S+busfSVZUtXEtJJmV3UfaRWJ+tE9pDvWDoPp+N82Zl3bZR5FwEvAG7bkLKvD\nQBhlG6HgsEpih60r9YWn6Vd7/Ltb/lU6ipcrCHOiFXFRXqSbQ+xM43PcLqJoirFtXg+kSfT2BLOS\nLOrgEXDeeqesMQdQlNpoyb6dMfsSmlXlkwrG5QxtIX29OThdK7vXJO3RsopxNUKyCl0wWBwWizrE\nkIGzRnxaPEeXpSMVtoBzHiGMtgSi9/ZyeVOxjK0hFSWWRtoUfGbxN6FBz769J8qfcnkmZ2zFkhBy\niW1b4dBlpGPmAYP0XaHDxnSptPDtslBY5M0qL0nlvBoHsfbV5DsNqKSJ1pvBbHmOUoI4c8zOAhRy\n4uEzugn73C6AqHRX5F2Vd2ecyzfjUg+ve6PWhUpghGO9xPGYch3sg03YAeiuuCY0pkeJ20WugcIU\nf9+bJZvsUrs1WsvKwJRF4RLCNsaf6uZwYRnbRFnV3YM+1akcczeJHU0BLAX6ztu+UhEou9hbu9J1\nc8gID6RbMM4Rw9PS0nxoVmWNvD6euhopFd3kdIzLqUCl/tSoVET3GkcQWcaZoTZKuYPerXRSDbUt\nlAy8Hx030rIfFMWxS0WHrm+mG6DsYRj0ZaFBEEa6B10AcjFHzyyHt6XHcx9GSayRK6QgRak1bbFV\nitSiaDVtuq1KcbcWm0Vd5oTl1O2/u+TVtGzORg//zK2LN6T3kAAVSVxqBUdoCbglbqlKyOZx1MpL\nADUWepUc2XzXLMBlcaAIbxNzVIJ+PW2AEJlU4ct6uiTl5qymCCB50LC7qAGJHctad8/eEtxQPnfr\nSXRRIejuSzLFY22JFPvqndgaIsT5w2K/crNWclmFa2uHp3kpAlwcJ++W3TIlduawEkHjbhDfNkHX\n1WdC9F62o0+LXexmHNN03OISDGxm92NLFtUQjnqqsDLAtf1eXZ+HelNzIqkYV1l1WGIcqAl+Hoc2\nmNL6RNW25UoW1u3Rp7pFNgQFGSvTPaLIebceAO6tMb7CYle7hsZoHBdtADazhsCj3A75vneSeJQ7\na/INEnQMndAmLX8aUpWqPlxhMc6z/ns+TfUzRHUvZ41pudUxtl5t1hZu77TrRrO3NSlKp83gfBoY\n7W7+2GTx3j2hfpWnDKuqszS9U/5CvW2yeDesnTmsNL+owtAhREtUiNKoT8KK6tVjLDvNXiaMUrhF\nryKUW+VQySJP/HT5mDjRwomihm6nHadlgSjwLax284vCElGTrvrF08DdG7oerLda4Q==\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\tk37H4QVngxTaaek7hgEpC6pm6mHHLayaMv/U9gyDquk5txomwIWCdJ/ejKB7vaBqylmzWtIjZtm0\n+7ZR6/EutfP2OJim5jC7Ug67gxBq3lCm24q9w3Cg4YlTq1Y8484LtsesDRR3wkzs5NnTK6l0glb3\nGrttps/Vq9QhWTcCd+YflbMyVCl4wYZCEz1FJXQCB1xNlU/AN9h3C7o0GaKdPrXwalqEUOGgHSI5\nSWWFCeUpcEJrwP3aw6Uo4aLDaDVsjaNag9BhQZUAtsiPx7BH80YfTTThdzqxMHntTMO6Hz5Awfqg\nDl0rRxVK4NUVsLWBJaGctFTkL5VoxUPPabPd+DeQ/W+Gyf83MNcoY+gK02lDEsw1yhjYPYdK0QJR\nctGVbispYKCTsCdxWsQNuQVVTA8nNaF6OG1MPiI+MLLLvkgpz2lRJ2xaUSbxMKdr2DG3HbMCMnwe\nqVhtyhhnFKllBzM8rSuFrCNKsNfOFqYPmr+7t1T14XazGpDJKXZm8miMHZevNrRt15c4wXjRHe4V\nRyf+rt16JBeCTSsEbGPoXFfjvUpg7OL/DRV2uWQVy1bruOvQYBMlHkte70LPLo6p0xQrr5c11epS\nvdwhCaDl42daFOeIrnB91nQhnui/1+Dv/b8sVG/owWvEQPAaZ+28z/1yLxzb33toH7OPYz9BGP7y\ntvOttI0G26pWgoxjmGKfxjTVFT5pE8PS8FpQNg2v2Eato9ReZiG/w7BsOsRC6YpBR6GdRMrvoLUe\nNlDj9SaF+K4UYwC1uTM6Uj2SN82z88RQo7siONvJip545dwVxqe2M9YD271S5I49QcNNNAlASKP2\nYqvd2txOtQxczQYxA3yoqOmCjXVtTNvpVQVLvODodktvEAjYSr4fW+3DWG2n7ELmsKSBStR0P5gm\ntEkIWttJt+S0+L29D6+vO7XDWLw21Nv3HQSaUTTa0CmoV1CLZMPY3QvZhgisVF2+t38+GV4UWj5f\nQ7whBLVNjxN7+45PuR7q+7asMWORvAFVW2ZlKKHYct8KqvZh+gQWxgL9vCzWDicyaTwMDzJU2z28\nRm6TYgFMDa2KPH+H4P/hnPK/RG4jymbP573RbZNk/7QUIJO2dd841IktF/OutmVqlt3zszJytC+r\npZZ2MppgH2uy9TxesxI4cMcBcJNKFBP1sCYdUgIIpEbUpaV0AEow3Ag8mjNNs+COCjWaNT43ixer\nxAOXIEM/920i4o4wl3Hc6LYzN5bHzB/ojyO3rkLyILmhspCS1YECJCgMNt3dPCkDsVKvvmluSuZY\niKkTpbIWQoLbEuhnUL5n+ofvBOx0kw59tfe0QKqttVSuT7HG52b+x7/4wJCQpc1F6/Cguqmh9qUU\nZLhHN8fhXDW8mkJK04IMJahuqC9VhreHo2FknC7gphKNAOPeULd5u0uhCp7MAQjGmUpLu+/FJ8xU\nmiDy7lwJajzoQtWsbT510022tfUgL6sE0YK6oeIldnluQ4p5psnCjp1+cGHM1O7dZ9r2AAb2tPZ9\ns4nTcaLvoJyvfdZiORASoPb5jKJUWc5RUIyfG1YAbjfxd912Z59GDvY1ipQzUap80Ms1uyXRt0IO\nLga0rXpNAt4JFHDKIOHynnLfK7+b63aSm5kzH7eyC4bwNGGa/9cuAtzqbS6a/Ciel/b6sD2idUfV\nYXsQnV5z3w9jJKBoQTRwCuFLeKyZSv1Au7FR7Kep5sxCNdhlln+KUp3Dw91WcRQhE17fy7aYtviE\nZYu/42mdPUlJZSJbVfEAlY1aKLJrex3ooGtNa0ACPGDIgYHLOopBmVaDCdhtCyA3V0x6qY+BEyiu\n5C3pEYgfljPGQjO4bjrR6te6u5MTueP5XJeL8Ee3TfXiuilISXKcbA/NTQqQXtZWZj1L92Wrd+qx\ngutGhJiiLz2MeKtqo0cpohaa7DihtXo5VmDdEHEnvK26RwLhYBSa567Xm+d0YluNqC/5c0TMri73\nw5NBFWl3jmgtDExjA6oyMstngXRT1NeyRt3TgN+B8t+ct5XZvmzYPDbTTVXqL60A6jTXom88Yb+n\n6YS89esGX1IW102q9VRKxT5T6ygenJiIxutdwCPKIOLMNTpTtqgTLx/RcV/iw6en2VYimCIBajJv\n7AgG7fS6+6rjUVH03y+J6s6xvVG0ySbcPSDO3Fa6cER1H4Q3FdvY+66CilXdpXRMey2ZSCAPxWI0\nr6UDrEynmePi2n+iQi+WpQ7P9uvGRwwBmgr4m6/9yQV6UxUQROjmuzvdEMqeNEASyFmKCnzXeGgq\n6Sv3yhys0OkmVnaJwmDb9tm/eS5VmkTk1o/RSpy1jfaIpDH+LiXt7PQb93CBcBtXrTEtEaOXns2v\nkKljmtUCucyl8AeXdUOo6q+0/e592yLQlMvb+OP2hzhwz1PuUjU1JyuGbkFk1S952W7a0Vud5mnd\nR0AbtMYyd4TuPmVbke95UEy2SpOq+gJHmMCKGnbh7nCF98LYaABdVyrm9nHN+2YVAma+p4qKR0M5\ny2i7QqWXTOMpFQPt9ufk8JodrdxozGnHhsFNoq4EFN1+dxJPJYt+eDZZ4RPyy+1IlpuEv4fPzCqQ\n69GMAiD2MJcMgqdLsV85reUe9caT/oq082G776T0jY1K6mUm6dThYukr4ysGRAV6Vca2FPuymr1m\nOe5wywptgvWIbIVgzioNcxU3WxL8LRyRnlhLdqe0LyWeA5wC9nGqYFaZAaYVmpiWwvS9OnmnZ2Ow\niLZC5SvKvLv1QkyaAZ9rK/ZtWzjMxnHRDGED7LR+XFt9qC89MjsYemq+HmZ3gXlnuMTi+0/LLl1K\no21QnFRzsabL3W0/zUxa1diUNekYK3ZomxWnKk8ahNTM14d3L9y0jl022wxxfrltKN7WOB73r1kq\nVWWM8qcDl5LSNjBuqxPnDH2SLf7mHVWxsjI4zDh5MeP4Hq+VoFsa5e3bt9d8sl9vK6OVr68a2O7t\n6aCg9ehKYXZQnQtz69vjS10bHDdwBtblVMeAfFA07dpEp/Y5K8AK5Tw3O26rNEjoRhBzYFvg/cbj\nxcC9diVTfqBMD+r9uq2ybr3ANax4tAqcr3clOD5Or4jyJlxqPXz40dJcdvojoxnCPjuU/xoBAeyn\n13GC0ltxy+G76aWUkSBU/KpPLEC6uarouinYYS4DJAnvzY8zTyY6X9xuSCaX5rj4HkaQUw7+wKFd\nmfEgyJkPlFtQgIZb2eml/Hdfl/IihXhibYGVwWVzrLqk3quZTfciyJk6Qp23H+fm+rxbptyhPFFn\n4w5nVo9zWHIbD41mPjv824o/2ubHkQJnSlCZSLPDSKBIACCn9flBE74sewIhpyoatwE/DSF3dq9B\n0lX07VEECN6Zdhgjqs5F2RAtRYqVyHPc+6IQDJavybPP47WRSHl7UYb5xo2wDpqbIKccAe4bSm13\n8rHyyHgtFaYQgELwVpPy3IGQ006Im6bnBLdhKWbYS1HLU5S5EXKmPlYJa1uhwz0qZBZFVB/nFaYG\nrGW9lYMKI6uBuMMu0huQFcVkXJMFN6+yzMEWSU6qt/DdZsqIVbdZSsaeQ8M+n65jwvxXqnUE3kZf\nkmAlLvjlDlPsQiuvsuqXYQHq9ZLjEZZhujNmSHYbUU5FPO6vdW+knFQrNUQ97bhJmZNsDqkMf7wr\nlc+KElRUlngK0VBI8vh2aXl48unh6rnXZOxnddwMw8JjhqWAWwOgkIi8UtH0Pk7lJdRpM7+5y5I7\nsVsxtP3bdm63+5n6MaohNfujGZGrUCgWXlvMUNVYgAmQCi0ojFXMsmE/J2zj7cIV9VLDL+E6TBdL\n9S3n9JF0CU+y5AlR1lHauCm8dZtlkq1QVoLi6tuLm2ZgJPq75u1N5BQM8R0DO6BDwpr4tpERTTcD\nAR/iy/MJKMQ6VTH9LkP121/h6/KV1HNYvEz1HgDk5uOdESHYbY/6oXWYTCbIiilDzvJ/KVyXZUUf\nqkqaiCTzB05SczRIUo1CQ8C7TWBVAWVUk1AJ1lr0vXss9XGbDVXWBG1OcWSL6d6e1CVYS8Hb2i4t\nJVxyI8qLdZISFvDmKEFlr9dj7yL2F92149hFS1LNL0MtsbjrqWWsxXE8RdNzcPRLLJDBdFe+w6Bz\nCNhaK7OAM75OtHrrY2PndCetU0h7KNk9USNELuq2LNZW1OgQ8dsQSYK/FNS9Nkk3GlsZGrtVai3F\n3l+HWi+VYs/LnUQpyFiClviBoFvq6pg6cbvTaKyAlBZqGgSvE+/Sa6fJeOpw8lrHyePzcC4XUXbF\njIEO83vOKLFTFe1tIpuU1zu4pVDbxnkaGKUsFB0qdFSt67QplEIQG4VKhb//IM2EsracSqjYmf2/\neAe9ko/qs8IqPATQAms7hTqTry41qO99uoWxMkr0GPe5FZsdo1x/HYe7e7P2CYagkybL04x2g0uH\nIS89FWq9IPco+xDs0VrzvLIsz1nyae0VaLqze18rjRDEp3WbuzWfg52j0opmHJR7x8Rtfl/HzahV\nJfGiIrCltGsD6pJ6WBMQ5T3U2h5u7cLffKE9PBtSR2bfmuainlhAEZyID3efR6F/RTnqlZ+XetnH\nUVjLRzFAUbDoQXLr6z+ejapTmNlMQg/vgKQi6uHKHpEeXErftLqknu5CsjJY4Jlfq5uqip3p+Y50\n3OElDXKQwSCXMonX+gwXsw41OgYXtE6f99oLx6zBMlN5aaWX2b0uBc5wcOu2+jgd66RzpW1XWw0r\nZG3ada85miIECfP0chBZBFNlYcqbxg3b6oTamjcwypqRITmoRdqb2EWhedARdnNGFa88R61Hq3ll\nqcpfSBxq9Y0vIE15zrFTWMLGbnVqy/2Ffl7WgEqUBsxOfWHU4nXtxOlbb1H5rDitpihVK71W4PLs\nlLSCpL4gc1XNMuZ/eTvXLgRVuS+uXYgais5wNDFPwWHl9mpjhWehfd8i29Fq1d3HDbSdkNo0V/QZ\nhia/Met/MyL+/8Dt/q/A7VRv9YXbUYVV4HYUDRa4XccV+Qdup6e7wu3UvVrgdlrHfuF2ChtXuB1K\ngdvZMRVux6dluJ2ECrezhfMv3E6L7gq307tV4XZ6Z75wO+xiKFwJuJ1GgwK36+TMfuF2fVscOtzO\n+DAZbseS6gO3k1rhdkz2/dxwO9qUb3B0CW6HWuB2KOdMcDs+avYCt+thKbfgdpoVIR45uA54xw/c\nrj13gdtpyK5wu61klFpSHW6nGsyTtvvA1oFJ+oXbsSTKcDtM8Qvcrr3mB1HYdojE54Jth1LYdlK+\nbDuplW0npbLtpBhwKbPtIFIVth0ruMK2S0pi22012Hb63ZVtp8nty7ZrQFMz287mTEWLAm6XlHxL\nlmp4O8pkC95ON/uLt2vy0cp4uyaXhOc4K94ONePtEArerslI4eiVbof4HIluJ6XS7dpz/Cd0OxUJ\nVbpdI2Sc6XZaeHzpdr29P3S7Dmc70e1o5f/Q7VAL3c5Mi5570+2+42/MhVaRNVh9/Q==\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\tCzdpiAFQk1vc3nvnosnqNObkgk+D/tuWrVQz65M+LbTG3ws5LbTgpl3W8mfQ0EScOXrN0DQ96MoJ\nhVroXq5hMKBpU1mhaaYqehLQNOVNWIp0wNBUBkrN1MpM0076KkbBwCCmHdFoaQWmHc3nWQem0cDe\n+5rScl7lq8S4V1waS/ByTlqaet5aA2OHpWkLm2QWVtrhLakHK+3YrZXfQKW9VkQ8okRK270xyxC1\nVGNoDk7aEFZM2hShpO3ewmtA0uQGpVprZaTpBCyh3hlp+zWby4JIk4DZvBLSEK97AtIkMI8FH40r\nK2fGo9G5lop7p6P1bs3yBhxtCCsbbYqORsMhoNsXZbdqpQ9bbq3OJSngaJOMRrdflQEEGO3czH2W\nwGhCFFhRoIPRwI6XNnlnKsRixysWjfXdcdepKmvE800cizaV9fOeamDRSr1mygYYGqug13y4ctGs\nrRC1IM5FU6NGYttORSsAc6SsVDRrZOR9FcCdRcA4QdFkM9rXMjajpRcX4FQ0lQvdR+mZimZqC7Wf\nvt3eJhXNlDOUKzJfvEfXoKKhwKMKLhoKCRkrF4249H0OLJr+JpwxsGiynreaoWhKarEYfkDRtMyy\nAT+gaHRCs6Y7CxRNqre1cCialIPK4ICiFeuJtCcqGh0JudlBRUsKBej8cI+a3KCiyXFvbSWciqbS\nbBjLDkWTV9ySRCYUTcsUe2YBRZNiq7aAoi3KAkUz9bwmFE331EIJAUWjm4h1uFugaCT8tGsy0crh\nBbiDiabO0HzEiYkm1SvZnIlGB+nusDNbC2hkb45Ni261Er0wzploUk5rKOhMNLaxtIiFiUbDFULi\nwURTBI2OWoOJpqQamxZWJlrB8XWUyUST0kk7CiZasfrQlploqN4WECQaPyxOkSPRlZ1HT8ppUml+\nYoEfSDTV4VkCdCDRUMiNWZFoc7tAohVmsRK0M3qBs+KcRLQirzrNOH0bJXNeNfoD+QDjLX4WItpU\ng4imhRlOlIE6o+GBVvQJiabUG7uDY7u9eeQ+mGiLskDRphpUNDmeTtzQwUUrETdYuWiI1nnJyWil\neyl1kNG0CJYJsoLRpNnoGGQ0lFImGA2BGO4KRtPe7SsOMJpOdGdAC+KZVue2Al7JaGOUHpsdmyeY\nBRhtKisYbaoBRrMD9ElG0zoZG3sFoyktyZx5oZof9b4HGE2+aFvxrWC0QhOarUwwWrEOmOdc50xl\nBaOZ6glNgNFIC6WCJMBoRSOZVZouYDSp3jTCwWhSrIuzg9EQCI2tYDSpPnY4GQ2F5sxBRisAIp2x\nNshoepSHjUVGRtNdbO72Jbo0hIWLNrTAohFj34GaOe6sABOTW3vFojH90uN1bKfo40FnR8OiTWHF\noi1q+A4poiIF3HFnGgcPil9WLBqvHH0bx3ZKNyU8EFg0uXOpFExcNKl3cQyaOV52r2YOLho/hAy4\nctFQazDPyHyQObP5HSNvQIpFgFYumk7NfykuGqXjxASdizaFlYtmal/7wuJoOD8N3Bk+NSuBXrBo\n5fSs+bGZPKX3ZgUiNgRdtyXUJSwaDWVpaR1YNBkdlPsPLJp8jlh8CYum7SzTwrFouCbpQxq8M3Kf\nthaktHO6q62h/NiuePro4KItysJFm2pw0Ui36f2YXDSOeb9h0Qi3ax0/sGiV5u73PbFoKASRViwa\nqsWKnYvGvrytyxEebCtwX7FocgNbp8vAopGhRPQpsGiLsmDRphpYtDojS447k+s5K2aUXTZ4D1Ve\nePIMBhZNnQO8mnDBoqGSE7Fi0bQ/61oeYDQsTTIGnIs2hBWLNsSgohXAFmXpyqrvjqYDXrhFzmy1\nv7XCsASNgKKZci+DBr8ZakDRaDfIaBxknEJwxgulBhStbJ5VO6Bo1qnaKvyI5sn0JoFtRaKpzQ6F\nFEFEUz2gJoiVh6YONKCAAod2eQZyQM7UHZPqhZWFxjC68NG4Uds+SWhDWEloQwwSWovWeAFC605c\nSBw01TJVb0sGkFIty659UtAeruPv6Zf+/yME7Rtn0D/92//w2z+su9MBf/d7/t/f/t//+KOdyJff\n/fpX//OP/9nPYfv0b//6x7/9xw9+9d//5uuv/urH3//6x9/+YW6/f+sYf/X7H//Tb37806/++nd/\n+mff9etD+da+/7ffvM7mf/zxN//xH/7wzXsRm/7un371uof/w+9/99uf3fbLj3//h//ijXV9rxvy\nmx//+c+4vM+/+8d5efa5/OQ1/u+/+bs//MOHj/Hf//Df/MV/aL/697/9O/+d/t7196/+8ne//avX\ny/qH1/v6i1+Y/O9+/I+v61r+4Ye//Cf9y2X/8u9+/8d//ofYz3/7lz/+6ZP/8bJj/7sftk9/8fq/\n/+NPP/zxB2XfpXy77dP/9PqP/+cl/elT//S/fPo//6/t099p67/+4RevRYZCCyJD3Uqi1GD7Ncn6\n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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t0rKu8NLT7GDQ8eNVABULj3WZx+JpEhNPdcmq3wCUSUsT/ya+iC2oHgKA23AyLsMsVTyqOoVNqTx3\nHT6gKmWqHQyKj8jbGA2baZVLE5TdLk2R0pqVzlAxWeaEfAylJpYnGRUBOJqYTABtC3S6EI/kDHdE\nRCpFSrYiWVUVZBYEqMg8ZEjFFCkwIG0l1dTQmTJMe8mCV6muASwA0SFt1c5Bbz3FzrOdYWpDPiZn\nLEIMbWgqLJMHDExapoxmGKK6Eikl8IXK40kQLCDGx2WZBfLhA5pKhlz1FKKYaUnCbc3wKlZqhmVe\nRdZvYYsMdBKjQtkWahToA6CGKbNiaHw1GrFfjUt2iKupDK/RZmLFEgIBiVWsDRFvhbL6swfkaSkT\nWdGo27RCBFVGjCORUWNCmEJF6zV6oAGzUizHZ0RkzsgkPKRkg0KJlqwRBsvvo6mM26G9S6L8JHxN\neTLXsZIXyOUR6iCTkn2EjgSpqxleZMg6WsxcxyIyAZUAbCrZO1hcAsCPxKukjBXZJCaUowiCn2Ws\nsr4yBs4iOed94hzVNKUetCtaooLHhqOgXYmJLzytJiqIaSYUEVoqVplWHeFA5Aufqbw0GsW+wgmw\nKpKRjQMz05Ad0IJ8hQ9FpWB1JvInbW9zAggCwpki0n0WUIjHgaXytis9Y4VRmbFtGE6mJ7yShJHi\nQT4ZzjhUnq01ScFnJhMhZJ4ljNAEcTnNJWQ8ylQyjZw02VFRWKI9g/QdwhPK7ppmJiem+LAwfIUs\nRtZh4HnY0rQyPNwsD6aKOgUXQoj9KfiK2tjpQ9Cey8gVs0fKBkvnyeQ9nnTFYEo4PmEGAtkqWWvp\nWUnZZCcbJ6lYHtC6VSdQ4rmdZdwtiel0GZZKCoRYlEiYEMtzu2hk0qDTxbIZpXk0Gwo4LCrZGU63\nErbhpHDTdBS5TPZApkKaOqZ7IksndKSz0XSVC/9yhhkQsCOeAizDBRV7OEBxMgQzTY2llkBRiNxo\ndd3Ke6eyTKnYhoRLlsua2TdNJrLhzmkq2WEyPMQLMIGFnaLlhhx3VRRbZaYTyTwdDm4r4TIqRQp9\nl8FxFWY2YtmTM5b8h88ypDKpyBU1ZtVmxw16ZzFroItlWHZz9IUnqJCFLs2esTwCaAqj4ZBUo/5E\npncy3+BljkKWJLJak7c3GjpISrd1NgUVNLIsqqzyiYI9Ms0SZR5aCuyULjNLKE9pnMGYS5nEPhYL\nLRwDM8PFAqQGlP0adSXGIa2a1pY4JfBMsvWyXKYq181BIGQ1qGCHdSYyWuPhjSCGKeJ3Jg9eQIRE\nEMADnowMdTFJdiRLNBBTuDFbHUdyOpIqgSBDiS+AU8oEDFPlsdGofpiawoGZoYBtFCbI6kV3AEh1\nAO0NitBGsydl30AmbKps8zK8xpaByZfIzpXmNB61fkqygFcQVPkTBQt2zg2d1yEzrHsAQLo0FZYz\nKGuowsxu7JrFmSagNPN5R5yRJdaKVWgCiSNDSaItq0USi9YzxojaN5s6K9ou0wliNv8MeaQzux/j\nFhmKRVL5yeOe5RKzV2IrZiPGayVSwa2Dh5cAEkNNtCOxRHao/BAvUa18WDKXs2xylKbk1pZdisXh\nYEkxkjjVtJVSIsUqTPGvUNpAcYoRaFJeFcyNkmY2T7rFkNF0QkXXecoG8SNex0+mMAGZKD+ZsSTi\nCEifLZ1fIlDLhmVcQFRHizDlnUTzNVb/1IjsCaaPDJq5M4Zl+sC6ZHhtRhdhOtcUZSvGFx+gfiVr\nTDjkkEcTqIyXbngQcGgQvuPEPnBLLPMkEEUQp5iBAY3rsDmoDhIy4nUHRnGjvEAp8TmDU5BSSAYH\nH+E5yq68SImCcXwwsGHV9sFYGZmHn+M2yXxBKi/zJzMhlFiUyWgEXs9hn2ZaN7hQQYm97MQsSNuQ\n7OELso3KpDarKitEiJ9k2F0CvmGWWV7TFrrXVQSkYrJsspRvQCOiTzm/UEJGGV1mGUSJ9CnWeVZ4\n6mUBBgozlShW+hhsi3ZalM1Z5miZ1bO24rOY5ELZnkjyYRJIBtND4m9JNh1xB2eE284EObq1JMGB\nh/yT/RzlMlkV7s1UvFhhFBRODCm2qsIuE1GKpIOm4l2Lya7fSK7BB2kGO7R1oYSkKrwalomXUKCh\naah14XzxPoiMmyjN8OnJzNyrsUtYdtFLQ6dZYkz7eg4PKp5ilMVQvQVYwckEjpph8g3iGnbMgnHQ\nfAfoTvV3+VWnyoJ/NWTIBrtSpksyHa9KUexIExoozDCsktmAsplLzErNSDTmZsYHwFHSEpsvTRxt\nlroFO5TKDYkXGkRWIcvMkGryXCsgDJloPgJaYU2O5om2XZ7fJ4ORaXSpwnPgEKlFe6rGzjgMlMaI\nEoOqyGcYWcXLZQNv6PFiEGNWARqGwkKQkAmwCEayyZh05YMBsPCHQUkBKd0hmmxMS+mgLJFAvwzU\nHtgeynQhjnY7VXWAhoKAZjBbS0qn2nTEqJCwShpa5+Anu9fGi0uyo0jM7wBPA6XQJvsgyyqC6fnS\nZEZhR8qK9XPsMxIm78R7T1Nj1+0KXYlo7BYDpmrdkiN/Rtsf3qyrJtpP0G6UwWv0DMVUoiwAo8Wt\nvTXx5tAgxVMiDkJ36nAU0ykWwcXEiTRSVw2dmsjMSxfHJALAfM00k8tkiuZCm4mJJiQruwraUBSm\nDlMmGvhNOXcwgw1ZONOoFmaQ2lFImTCAwbg4mnjRFcZkeeZNLqkjFcawSucDlGlRnzbT7FTib/RS\nwEUj1iNJMgRLmYIBmbCxuAJ0tECJCe+U0XaEgOftnf4Vdm+GT6i9wmQfck1Q4pTDh76m+zBoj4nY\ncWeRoMIbMiugDc0gXmC15/Uo8zEUkjV+NZgmuoymXURHvP1XeTlfg9ehIYsJgRAv+mCrNKK4CmK0\nDLuNdhmSDfGCgqm6Gk/yjBfbZFqz3isyLBttPqgIorOIRmcVNUm8YcOr4TTdqJPuaPBMfGiUoJNr\nH1S0I6FBDZ6AhIPqFnZscIuRinKzpDIrKTmaqAa7NzJ4tjwVDV0qfZHRkE4DP9VN4VSrbCYGGuph\nb1SdwUin2tNptP4R7UbhDoRINgLpJCiiGdCzyis5oNQgw9xVrEoIerROhSjwA52bsxUmLFHxRxBY\ndDRpwaRRr8TwTDJvKxj3Tmouu95jzAWvpQH+SGyR1fNF4GtdsRZB12doo9RplZixkGqqS2l7o9Gs\nYDIwKSyyFmUm9J5TJVYvSWOFgFXEc5mYj0IGdzIxSGyHgVAwSxqgmIbxqGn8iQlYVVQjiIxhTk3U\ngqn4KeEp3YjjFYOCLJYX5UbQ4DiE2Ux2QBu5QYybQvNVHnJpGdBUld3fkdGNxtQZ6qA4lGFrVdCD\nJ80sn454Ipvk5YNPKO0l/kaFV+X8X0bRS9LYftKlM3p0oUCP4EYDlsYsZirVpTHpN5IP9xBY3UdF\nBxCTyAO6FyCw8ZTaa5AZ0GnVpLmiXIToqPAMuBSErxAUyC9CkdjNIH2BshH+Rnqhsbs+pFyAtGhD\nQUsQ/iRHGCs7LTmBqiTaqHgbChOjS3QcF/OqwG/KU0sUQ8OqLCyTHaEepcCl7HGIehmGCCgxArfD\nL0wyTypMokbxUE2zDaNizkqG7CpoM5HJyq+YlJ8bDR/I6akjZoolpYBhEpolDJL1UDVFribrTIZE\npRd3QdYZ40YfAYmYQ8ZgVt8Mo4ky3ZTG6doPPTtNlizDsmKjeVUlRELXArxlNbgXGNWeA8EQpkDm\nCJWbWGTOIitIAliQkILx7jIdA5JZkzQZiSSyDBla0LKQJg8C1HIobp083RQiXpbbQZqMBdZAguKJ\n5AxXi955KmZmwot+Sh1o0u0dXVsxRcZRy9AuytLoyszsr6HcTz/TRAY05vuB0qHENEBNZWoR2aPo\nmDOLr8wzBFqUHNV7EtdpPaRUkymIJD+NZ6BSeOljVHh0Lmrzm38kWZQnQeE+YrpsGUp4xiN0BSL9\nCQ1xuuVQxKV6vLtDm7VtHkUdAe83TF7mWSHPQPwmw/PHUvIKaII8SE4zs6CGPlco+WncjKMoTMSx\nrGJ4YvHqDm/xqWwR3iDgda1hlyjXmDWGu+5QSUWdsx7ZMuxnWMGrgUubPOUHKoBIlUaZyiZq7zE0\nc6GxUaUM6ul4hvgwkiw4GxkWve4QTaBxtGtUWBWkAryDUqkByTPe7unqKs1yeVgH7D2mcAcmeGIi\nHcTfaUZETKTEQBGo7gimZdKJJ5OViYQZA6hLnFJKw1xluvIx4t4hcNgz23eXObJaagkthWUiMlnW\nJ8R4RWLWJsrqhDzf5JZZciYgpiTpXD8jNQGpEmERkhkkB6rp2EldI7FbXCa8ksKAlyPv9Mi6t+Yl\namRKRUt+WBlhOgYa73RmnsabSwAAPiLnGErBjdKQxC+0vAPlWXB+kE+35QQtxSut93ar36zGuy/l\ndi3+3qqKftDf4hWOrBtzn2KEALnyyIAnEmjLeJBVFFT+evdw6T/lHq7jz/sfreZhp97swXyTSfaY\nnMbFF7EfbXyTZm8OG3349+DxFaAYm8lWW4+1eK7T777E98vN8nOtEz/oVGud2fB3cfYyX2406s+d\ncvulXuEtT2H1i3E93u6l4se44YuDbWfjydiM+wM5/At3YzXepi7gg4Pfyo2h7Vnf3qbURUj7UqPc\ns9oDah40YadeXO3y1MVLuVNplRvxZLxUgxa1TvhHhfpvgAh2I+qiyhqIzfZbbasJxxC/CfR78a0a\nddGpLc7GU2yjATNc2/zN6DIwW0AImC78K8XRWKnHkV3DP6A30l8gZ8SNeHb7PteBI9Oo0Zd79Uc4\n5vf5E2ip3+PGM1Dcl8rN/9RKAjAGViLiI/5EBMX/YhYOycqoR/8Lm+unhlZtbKWBQVwDhhRHazJN\ngcd4fPuwDtLTsKDN0Soz9F/+n79oUHutOKhMAyYN1GNosX8FjL27ywZ29jbCer8TD/0oBcwrP0Ba\n4KESX4yfNZvl91o1bizGrf8gpBbjcav6kxUHJNt/wd+fBGPA7Dgh80yJNYHWcdmZHBKDNF0Po2+n\ngRZ6UrNR+FukYx80czRM439D5/6dWxFEbHE7iNp2anzFP2q/W63jmvunLA/+Zpsk4SbRisN26nsR\nL8PewDae9P5s1Lqxxd1m6/cm/QAxaybbbAHFXfwB+weix2IWRLDfatbbxTwX3Er1BqwF2wNa1ptx\n1oA9nWUr400WQCRePK936yD1YIeDPZz0ypW3EXrIlbv1ijCBVrPar/eifLociy8eljs9n15Oep3W\nWy36LBR60Tjo8A+hR1FcBQC2ese1SgtEpCq+ZM04HOMYYEn+/eiRipI3nAdkj6AWg0IjxXf9g/cU\nTOJkB+9JGLyHrS6rMHjtKb4cj8VnhIFQdlyO07zi4tK/voke4LHDwiFx8PTUrfVmaf4B3/MPthuN\nPgnNrU6q3AYpbpFhN3xU4/g34+o0vge4GC8+odAPrU/rvc/sxcx2s1tHhQM3BQ5GHA==\n\t]]>\n\t<![CDATA[\n\tiFe33Sj/yX7OBmwX346ArQFNffTNscNH2XO2SGt2/nvngXyuUQMtKvrGheIodeasGbR5//hRzCMm\nLtNZn9NDwPz/UjREJPgmWNia21m3Vvyt1jyoVgkvcAgHQgfBMbZeGGFDQIXcI2DrjMUeQRqp1mug\n+6XZTJMZh/Jb/+YwkDeXE4Bsz+FvxxF0TzD/Uhz5r9lhWZq1JOjv3+F/L1g05RvB8jfRyYiAGOkE\nxBaLf9QqfZwDvaBv/US1uGzq/wvi2v+6zHLQ731GaGGmFyNIcpEBV1kqD9DKRhJdpH+06GLRkl+C\ny1/N1oxfkssvJBGQxFKTci/++JKZjbstHHyElP6Pxxf9r2D0/4UynSL/EnX9UP+XpPtpSTdX+60G\n29566v2rZN3/tFExMp6ObjP8vBQfuoT/iHny30szdCQaGGqNErxMji+SSum70GHrm0krU3BK/f/7\nvz/j++Xu23epQ9ZtlaP8hIJY5l4Z8ZljgEK/+3fIWmxxXIHDu59wWLCG2C5VrvsDwdVXNEBoFhze\nG/V3hIJpPWg9dXuzjF6Q58hrs9f+r+efusZVDY2OgfK9bPR/jaMWOq12/OSlXG39/oul/ttY6j/p\nfH8WQF8QcRl1dmFwGHXGhqxdIHV2n4ZobMqCTrtc73BizKjzb7VOL4AQMkL1NjJJdMDWrTRoNN3m\nktVy5801/kur839kokPjn8Ux2uWK68ax360dnuzlGn3qTbXaPfIHlk9ipdupiL8fG01CAtmwnBZp\nL5h5M178o10GUpmrPbU6tfh5rdOtozPBP8Ac+HdR2T6KUb/I67+XvP6PKiNDzHgaqSXoFI5R08w1\nDwPMMn+RUnLaKTe7QFTewym93SyQ0AsdRSPzNpl9b/1W27o/7HVdtx+d2lMDKN/VrLfpudCUPe20\neuVe7b5Qe+7UmOs3+hfyl91KuYHf1DoVgK/fEJd+naGGBAvy62zLvzOgz633+v9Z7ieuD0plTCru\nak9v9upNPmHPdJ0PNM4O2vXmYatuD0rPmv33fKtdr7kh17N2grvFBel5vxDiF0L8G8wWSjSzxX/W\ngcvU/gLJ5xdzHMIc5VmqyiqzmrQq5vbHzcBI1l/s8Rc1/MUefyHE/x57/IdxR/UvMQr8Yo3I17B0\nCUZwy0EcUmcMElNlYWXvtKkwBTKT/qtutX4RxF8E8S+nKTKF8vwiK/95r7I0l7gxhx1K3DLF0qXk\nTFr9RVB+EZR/NUH55ab6NxAUzSWhqKaiEkFRMWPPv8fLmfxqlb8Uf/4Ju8/+85Vb1S9cRv9X3luW\nWo16+bl2v3ny6/by33x7+fefTguVZjm5FNIaxG/IRI0EFnlcUtEyGcodh6maMKOvoaVv4+2/8Fj/\nA+CDIGBQ+UW/vo9+UczdMRNT45e/aNgvGvYvdHD7H1Qx5X+Viqn6qJjyv0zF/BuJ9CGQznK11e/8\nEjP/5ST6n2xEkKMKqjY6+oqqgtL/n5VJ/0rr0r81oDXqnmICeZSvmU3+l4D9fbSbkiXG861Os9bp\nxpV4+y8NzPQVj1xTCBeRqGmgeOTpaMT77E7offa/nvdYic/kwMRnPvj2maR0/x3Kwi9z5F9BbW7g\nabnf6N0KROak/t5u2ETGC/lPoi3bh0OgTj1hNpQ1s9isOjkzhybePARVASR8msXhY4yl95TjMzdi\novBb3JrLbsz7NHZYERYzc/FS79WEhxhABKAFMsIfWvajmfz+1W78uFa1G4vPr2qNRut3eiV7Xm2C\ncta030jCm/yfZeuF7HqRa/Rr9vDii/3yM+hfZfYOWS9eYmXIyoVNVuHJ/irqbVerGSm+C39as6VW\naZ33tQqbgy2uVuHR7qrTCrPFZlyt0tSZu5VuL5Ca6NgERxXbqPrAgPDIPWBKIuEB58Za4fTtyVuN\nFAGgq4rEm7jGS+liG92/jelqZOq+jdK6ZTO0YJpmMLVbWjAliKocXvAHNc7QOm2Qqa6x+f+5hzdF\neFCyXsvRgY0uWaNrYkNTlLywO2qG8B1YjNCKlkK75bSSrRVI9pi4zn1cwNWqLrSTWTYr+kdox9BN\nwZaK7ixXFibnYKV7z4Q2uuTbRmUorurOfqhOb6ou7gebobAKu53uRk1aruI6CrhWxYV0urVazUY9\nHFjBlprYUuP7leJApLYa9qrp1ti6g6YpnjPMhqJuHyFDEmGoWw0NNgvWGOdgUGNcu+aarsYbC9PV\n7KY2RMW08RZI7SmYLoiq1hTSwnxVewpp13yt0dm5EOFg6NaRVsXGJt8vp6HpnDJdONmE7Wn6fwdi\npj0DkzVlke1EzxfijILHLZruf6vsbuz0cdApN5/hOSfqw3rxNHf6KYH02nyOn7z9ObQPoSn/3uJR\n7BL9pN8G+QJztLDZxs/rz01kgkN7Dv4SBwq9QfKo5XZb+nAkjV5ozWjJzGan/CcpFofPIudlx9Gi\nAoAKIr+mwnEZbbBdxt3MhFbp9GCztLuZgb2Zg81MdzMdm/lMzvA0G2yhu1uoAbPX3M2UgNmr7mZy\nwOwVdzMpYPayp5nmP6hu7VeuU39+6Tk75ohFqw6d9coApkdQMHWfRhYDEjvziBwCV/bnyQIrc1gK\nZ2NelmJwEiVhuhfZ+YO+MXw+OczZIqkleY6SBH4PhE9RynYHxPtq+wN3bK4kTTzy2eVI4DH4DkjV\nNInPZLSXJfaKlcPBbv4/GKvTqtS6XZhgpQe0r4F5+s9raLkHabf+jj/Ry/293iz3QNlhBHIW70rq\n7yDDdt668Z8zv9d7L/FMkgoB/ZxFQNQfH1sgEM9s1jqPtU551luMh40evAoO+EKr0n8HMblQ7pWx\n2JH1m+ocuXQyn9+qYdkeAJqkhAqVht7JxZ+XFeLXGe1Wz9Oq3Kjz4kOqZDnFVdv1FHtm1TeqtFiu\ngcT9MlYnimf7vVb8uNwFPZJfprhLHMnxqrWOt2ar8tbq9+LPnVa/Hdq03m01YA/ij6gs8lSmrsaZ\neLuMDKJbf+83SEViTRS7blImThcr7XKn1qz8CWPWq9DamqIstAO187FV7lTjsLYWX5yuaEo6sA2g\n+yPqOtGaPpMmFa1tp8Y3z9CxkHZgS1mYwNCmwgSGtrUnIBtqWrVbWsiYLzd/K3dPRDgK+3fYqXVr\nHSABp7U/evFitd4rP9Yb9Z5TI4vh6Gaj9VhuHNfa/UbX3jr71i7XqNWqx0i3z8v2It1vT1ttv3eH\nQIraNbI0YnGu+1Kj1epYeXypAJieNi0nUN/Gmw6oND2o273aU69UrtSyREMY3hmKHNQxNt90b0FI\ny+Oac3x9G50163w1aRlYZBprjtJE6b6RKpZ5Pznp0RGxLyRhcelAoJ3Xa7/DkSsA1So3KxaSB7en\nnSr+0as1e35blWv1eq13YbeQHw6bL96qug+0t4lTB01Ead+5DYUotco5Bzp4rbhB4lJVxTTMMHwS\neg0H4EG7XLEPSli31DoSmlJLD54GzwKX5pqEQyJl5f4E+EUeScS+XZZPJN1S/KmBt9cgC8SBwjfq\nzVq8BzTA4idBg+ZB9zjx5RuG0GMZmGUc2FOZ86cZLOKZkoS812/Z7VK/0bCoFM8yA2/ZBwPcM9sB\nOZ7+BC52UmtslXvw7V4L8A5tiV16z7/1bwugqXW2C2JL8fUpFvTDUQfJpB+sumQL58vTBPpcYk1x\nkUf9MpLS+B6KVMN2k1E+13YG4gluQh6kOT5XJbjXrRYw+VZzq4aYFfEE2KcPK8nKIYQvJ9LzYNQ/\nbJSbNTJWE2dB0mZ/ltQt349g2nJcQ3nhtxpN7rzcrHdfALoCaQzaq0qj3qYilY3aH8AmnwGf+IaZ\nQvFH8YsOiUXJ35iICRzPoadpDUT3NNZXHzZde824TSLtCZpn22LCrd9qnTZKml2BXZiZ4ewCd4OG\nBDYrAMY0ZaxEn4n0vR9kI0/AWbR7BoGI0W/UOgeg6tWb281q7Y+TWqXVrI7IJO1VM44lLjyjR9ss\nuwvvXkWehLPygVlEXXyp3ulawxpmtB3j0tbglgUNSqcn7CgGn/Pgr2Zu9mvVev8dFDSQ//v8OmQR\nBJ4KcB2L1pOkaStHJ7Vev22RScB+EkF7caTiFt2zyRkS1P1a98XWV0gqEkYT1B/ni4N+rw1KS/g3\nkkMBBia3B2pkHxTe+GGrbek9i5f7ez9gUb7KHDCSP94bTXidhGV16o/9nsUbBG70V3fxDf0LrSov\n9Ua1U/OoadZb/KdnS3QzU83u/W/lTndZYPFi098caZKedwPaNW0s4DPpun79S6HzWCedWI4AHAAi\n4CA7DMMhJLb+JiT97BqbrWbQlMX1NVqVN5Qvhq/NavlN2//F1cuhq4+0r3WUMKMg/tCd/Dcd9KXf\nIh91bPo3YzEur9LvAh//eynZX4eHS90yCsRoswTSERUd//JzcYIGn3/MVP4bTmn36fd/MDf+m49B\nFy8D/uW7rGgZ05Z7gxb6Z5SttQwnf9tS0lomPWwlf0RC0r97JbaOH7SMR9ISyXZHGmCUVQ1+8/cu\nMok2JGPYhr1wo9Pw9b0I5ql/+qp+r1ep+MPQRfGG/wCeT8TupNXvVGo5vAP+25k+sKa/ewrvtV65\nCjLQV+eR+eI8Jqwb1CgoJTTmJgzh2obZ8AZMsvlOq53t1MrMnX+QSXtOmE2/trtZftPIHQocLXPG\neoPVsLzGHqcZ2Q3TctpIGRlV8xq0BCOYe8K8IuY+T4hPU+LG7ewxe4JGY4/l+LjWOG0ds/6o/8NW\nt25foSnWEElF073TCf9U9qCBtXbXNcKi4G/tganXHTvQaCZYy5R4djvMQua+dsE7fbxvyeJ9i331\nLhqbqb88WsPz3Bp+LFrDB5oe8EuOE/GSQwpqdWpfG4lmdWrCTHCL3GUjJ9rTZU/TA4/teziU5Hjx\n8CQ6mLDxEDixHqMBirUdCil3M39QsTbRYMX78wBLFv0smi3nIiFeb9INCGK0dfjDsdMB8aLDqxZf\nW4+pdvm5xhxsXJMaaIbjlhuN8Fbdt3r7EZb45j783madGqykW8PpdcJbVlqNhmOXHqRL3vaWH8UI\nK7I+cbQg7kOBgN5pPW43n1px5wpxCKAVn9Eq7ynoqybebPm1sS6MKu9/hsBPaNhiST7D4PdY772X\nsb3XSs5or9i8/fz+lnpEntN6ekox4ZQ1NwKbv6Mzlre53/Lcnfe7tUKrQvzNpgtCGEnIHiM+1Aj+\nws2Cz3jdXiNVZT3SPltwGoJC+Blv77DoKN+0q+/wutGMPKl2NXLnzHJlf+G31e12hzcL2QJow0fn\n2yorvhsL7QQp18wEthIFfH+Ugkb1dyAwqUbtKVrDXqs9dHasZccZPGSOrK2InjOAaUC1q/HHP+OF\nDkhPnfAtwF6aIvcZHKjigVlwo6EgY121BF+pkM48zQZpBbYi97twKlGtdevPTR/3PV+a+ci1jaHE\ntfVUb9TCR2ZEuMvIVGQq79qOwVU3Oik8jeEtKq0mFoNCB8wQ6GBLm+0+sqgAwjjFtw==\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\t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\nDEkiV32e6/fRTq5/FNDteKpfJv+pgG7bc/06D60hdtHzuX51HWk61a+HE0BanuvXeUCtVqj2cq5f\ny+2Inb5q3j1hut4p2/Jb0D2c69f5y19JTrzPc/06GroZtmL/4Fy/zmHhT32BqsO5fp1d3ZaroHs4\n16/VNsma6PV3Ht8/2PP+qXP9OteCOP+/ONevc0Il03U9/Wx8b9yR2uu5fi2gZupUv/TpDG4f5/o1\niKFbf6pf3Te7Pr09xU3O9ftw3+s/Odev86l+CSf3ea5f5wXXqR2pfZ3rV9u/1YoXG75z1fO5fp0J\nyAj2H5zr10HWXm+9f3Qe31DnWro+j++D4+S6Po+vr3P9klpais9nd3M0nevXYd/Dh6ttrz97rl9n\nJI8vHvyLc/3a2fDd5kxib/u3uoDzcSbxIzH86Fy/zvnm+lUEvZ/rV0/tRm+x1/P4PrdIo/15fP9A\nfJJT/fo/j6+bTUwffb2hea3G547ia9yR2t+5fnWB7aZT/cyOof7P9Uu2SnU6V7Tvc/06w5w2PPbp\nc/06n+rX91eb7Ll+fcb6ujzXr4t9r//gXL/Op/p9+jy+nnbhNmjL5nP9et8MnzrVL9VKX+f6NYeS\n06f6tfvK2WfP9eu8vKvBivV8rl/nhU4NMaWez/VrMS+pU/06fxeu+3P9eo9b1lPs83ue2viVfZzr\nV1NcrU7163n1YMO5fh05InUCSH/n+nUGhsZ77f9cv84bYq1F7vtcv/pBNp7q14THuv6SVf25fu1B\nkMEwH3zJqstz/brCMH2f65eeyeYETofdtW3ks/W5fp2NQ8ddnP9sQ6yx+5UW5uGwE0Zb32m94qPx\nu1K/zRcVG2wllbYP7XZeeN+wbbGOm2Ieq2Vvxsee0vvgTWzKNlWos5DOY40wbmX9OkjouVbnia68\nYu+bfP2dI7OylCsdrQ24lf3b0DyE/VS5gdXxRcctPOQql0dPynv5vVQdvzuONneGCuX74uD087S7\ncLM29fX5fTrI/Ty/8ujqbDLv6+8L31bXn7f859uDo0w+9B11qVer+86y85LzV+bV2fTW7c7E1Y/V\nYO/39vWa/7xbuP41sDdVVLN/v2xvLd+O3I3uP15PFB6eT8Pn/MvkQ7CW21ubGBzwCvNB/tfR4mLx\n/ffXI/X483rEyj7v7Rzf2f6xm3NKJ5M5efO8Wxr1Bifd6vTytFv9dbnkzgfftl5ezqLCy6veW3z9\nehJcvPoXRxvJTsvt0lilvOd4K9GXeNvb38rL689HHDYXfTV7q5t1SN3+0u+HK6fR1OXmExzq5AhI\nnCf5fibyQ1OTK0utiMXEoOG+fcO8eAO5tmPlHY2F88Hrja+7h9vjAw8vleo3qW7ev95d5a6wk3Qp\n3hyaex9+UmtYr7b6wHsSc1PV7e28O3B9xf7+xmM9ZH9qEB8a2sZMatNcLd6aGhqptVZ0GA/yM++Z\n/Oxh9XqfD9CcOZ7f2g/WZq6+TFbeRpcmK69X36vR19uNub1J74TI9jA+f7e7/3NqIchdUD27z3G1\n5vjMgijdhtjKeHAy+X0l98Kjmrp/BCdPLe/tnZbmdvcXcEUD3rhzsGl32Lj14/7BC3tObuWtgNUI\np29GE1d8ZzC+EgWOHRNFwgf6GQ7xrl9SOItP9HNsmDXM10GyYkcvVDDjxC9WK9U5uaqp2gW3NDuc\nf68WFhYXxfDg7/u5y9vnyK2Mh0XuKDp3LIZmxPeZP+cVQTfGSqkb5wMzY5l8fGumXLslpw93JuIb\ni0l7y+n2ygOLv2PCrBVJZTzeivmVL+dJWan2cCYv5k+cy+RWOVXP/NOIi7KKxUf+motdRvdiIViR\n+ClN3Rcn+aTuzZJ55OJJAKFvllMx2AE5OF7AcqtNxzx0Gcygnk0Xi8NexOXCOv+01V4eHgk7VwfV\nUmX1x61Hd7eH+a4sBiNXcaPbTtyKWxzQrrz7kZ8bjorEHe7uQNrfPyvZrwIaZqiPHzXEfajaiuH4\n+koz+X6rdVPVisrX19HSzveXYHxHrU2Fx1cFyB/Osyge/shZtjk4kgkLnHkDo6Nn1dPi0bIsvl/d\nxkTYG65NnZxdGAN37zmGWLOHiwImfUDOXq779upuR5r1lnT9fnTCUEXOFc9P7ZW88VGFb6o4PZxE\njYcOdm48ytO7Fde8e/q+Zes+K+4nfHco0zwmz75f/U1uqUQ+L1JjOdvLzcDmfMeCha3pO+dmaGrj\n8tfK7PJi7kdNpSRpnZkkTPCtbk9irMKmvfz74nXc6HGFh+F9kzuKe+t9+37k26vZ8z/Jc559bvd+\nqrE36zPbx5l8dfbuy+XU1vbPwbmL8uQezPYor2yzWuDtKTBSWQ8i6tPB3+o0aKLgYg2aXjde06EN\nGnTkeP2xMLc3vbo0Xbx7wecKgoXpOdfZbtagjQcQD/LASfaHpjR/rrYYi/jGox3G/m3JzOr0/smr\nW7n94lT+fNn45g1E92+uW3BeLWuS3uQl4Rx5pZ+qyBuexdzPSfwcIdQnyIqMQykOJxP/k97ZhXJZ\ncBjhYRGOwzEJqCPEHBYqbaJLC26L2d9iK7ZcwDrYZzHsPpzFE7o8ZLTJ8Ez+IikbtmU7Ajy9TLwR\n7i7MnN1OXdXp1xXX9S+WMQ3LgtmZZt9oxulnwKmbdWhBauDgkY0Mhv5zyiKu+ZlhU2bsxvyieQTE\n+jt99+WhKhbKVYEKRErnLkxseTyWzaEGLNgaCabRo98YWKnZ63przixFrYz9mLtyr/IPsy8vY5ff\n0kCGT70eXd5LcMaCnNm+UDXkyWU40ng1ruAs31jB+8XGM5/2q98Njvx2KJdSYJrLcmMHWCqx9QYM\nulP3rYmVV3ypYCNdgf9YbazAWzy6Z+/VVPGj/uxeo72sKa+eDsri/XQIOFwgRrtxwedFW3b+PGTL\nbr+USKIv/IRdr+ryyKjRjJq/ulE7Qntyb+icGL9UpRtOmaWp+asTsQpLToxOQOcx403MC5/Wfbez\nho5+wa2D+o9wFGrzsp97rMwZmPcyfXAUIzwChhcDWz+J+dR847nV8A1qFHvPodmcIQ==\n\t]]>\n\t<![CDATA[\n\t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\n\t]]>\n\t<![CDATA[\n\tUQDJcUMjaYpGLwW3QaxI44CchFSmrTyHWossjd0HEeg9QZJKrEdT6nmslqQRbCIaMYJWLJYeiSN1\nnDiKqoDkeEQfn/RQczcxgKEdVpvE9TS5ILEKiWQ+DUGSuhIS7RAxSRa8LHWMZhe0U8xxKPHjSkmB\nkTRhBqWG8CjPqAQdUW2S2FiHLNw0vdqnjklfmqlkgoRQYjR8n2baQ7e9CPxOrCRJMQUBCO/pgKSD\neEqSZuKp8MKAJMiHLEkScJ/UHeYQNPTxJklo5IOdIdfUJDE8SSwKSGkoLbm3JOqBz5oBxFckIZKq\nDfzACmuk6KYMSbKI++xTIfUCA5VQ2ixSpNolNQWCBD5mx6MJ92ATUEQGAD2jPmqtNL8KfRAERvgw\nnZIETYTMcqRrXM+jfuhE2ZCKEoF50SXu8djAhEb6SZYcHiU9Ljy0SDMnPe6/JkWgAsgxaUFDPbZM\noSQNJCHRkF9qkqRcespMlK9Zv5F2gNKnNqkB5ngqpPnBPEriEs/niaL5ITuAoZMMu6yGyEpEvi9s\nd4MoZHoQX5FyZFL6AqrfAyO6nmCCkyRi7MStTCy0SkYu4Pqo0MUbktQSmVQuIqppQZNM0xcGcW38\nFJiBFEEI3uIOKxJ7FEUuTzN1nRr1uDY3iDxjS5SRJCgdEUAFQ7xYz3pkewTpByqCEonIJrN+iXzI\nNxHMxcyjw14sc8SpIiCxMMoJRkaxcaLawJUhl1A/6EGP+9sgfStQLWQySJKV0SGu1hEJJQpZjVEh\nybMkU0xTDj7QRtS5A4LY0VNQaMqD4MHiC2L5kGbSPMY2FEXCiLgHw0ejhgq1Ig5zLtkECJpPV3sW\n9kAKBMCJMlDENTpXQBh8ERg+ZJUJvUTaVhhOJImDcAmAEDdg6SUJATVJ81ORYU1CBQJ8LoBnIm1M\nkYCdx1M6iqyARIGLImJbN9DGGgtIMfVWQ0BD39gnhTV4gnoUGVNHlllTOeGIwJhcKqLRwVbgVQUb\nxSxMTCKJN7hvodbGtrlUMWlkaFRuVQA8SZgQSdrZDdmYC6gdmC0yPowfYbsV2iRbEkTGLBPDR0Jz\nmxiftPrHFRFNHwEDobm7oDwgI3GTMcjUXeKAyAMYIyAGqUUhKVNJTIXHhMs0ojdD9D8AFGBCehb4\nEHFDO2RGHoxUQA9fmt5KA5lANRJKVEaDU5BxapPmW0YMet3A8IAgYdAuqwcBHYaJ0dJaOzRAr2v7\nakT23jynJM9pZJAH1+b7CtQlhKfRYSIizRozryQESmoMHSZI6IdQjs1FYC163gIx5kpMDDURitAQ\nSYTQjy54kdUDEZMnkKfPtVqVNSHeJBZkIw6NqYVLFoQEwMW8MZgnQEuGVghjqBg0BiTt3F/YA55p\nKiR5lfxcqBmnktoleUURTYNidqMiD2AUVIIuDCNj7xinYSJcPxQWBoeY1SbdQG/SVJM4hQZBhwAd\nNLNUxEZWkkoir8NwklQWwqtQMUMEgFrQjoRHiTZoArJgXQuYVhdFMIIsMzow82vETUdMdNg0yD2k\nXmufnRkioQvMAk+HIRyKXJ+dCVIMZN8YkkYQULA+HBPFThcxhA5JhwqoMDcMjEpSnmF9BV8KbJgU\nCgUDI1k1kjIIoaZakelXhsdo0BkxEdjvPqPcyKj2Mq4YdirAUw8aDY+FEGl4S9ILrSoMiJZwNjRc\nICYLwCWbDKBG4Vpd5cMCM1qLmJ6klgLYE/gb2tgAo8Co8wqIw2gvNthEWKPDjZkODJ4iR0ypWN/4\nsKIkVgqwyGfmJE0SkAHIAqd5yrXai1ERXiUWD9mpIBuvIGFogjSadY/M6CVwiSsMS/geA16QkaCr\nBZ+KpD6LIfAUM5U8wUW+mU2mEkMSepV0JUmZNEDWxdwpuD0G/xOLQdtj9JpRFhhMmyalw7MK9nID\nz3SWLG5k5DIQ1DY7kayRLVCi98ikRT7TOxYu9MvXLFpESA8kJWxnuIwF1dWRmRXX+MSMFZj1wY3E\ng5ZVaWpQRPqU5t5IpYWhKGTUxG60COBmCoPmGOf6UYSiRv4DV0p4eK5RVEA+NBsEwmkWVMCokDAC\nE0vCkAccPiAh4JvSs5LHuIhfNYg4YlPOZsolRga8DkPWVaTbDBzxtcWYgO3kcbK6BVBmAElGBSoq\nYiSjXZgMqGV2NkjroTbP1EaMw/gUliiMXU/2CMihImIrw4OaSEr9TaAdhJb0Ct7E80rHCA2DgC0g\np9czQskyI3kiWBsgYqGMYQmtJwVoozET0Eo+mIUVH6N6AdjLkBsqgyMjpPgwBrhZ/GoAlhNEaK0g\nHoo8NOJzUkHQNhGrUV8a7EyvYjQIy5QJR5DsEicQ+jR2goq0QaoESojnNEM7YQA4tBfpZ8HjigvR\nRKQx0UCUhBZJ3aJ5DtzgKW4frYbG90ELQuFNDzaM1T6sf+TTm6BvyIjV18ZFv2SVSbqCAaAy2EeE\npBR8tClsvAOklIYepETdUPObkY5dNSoM4UzChErNJomIGYTWlgttA0E26kPiz55dmeUC2kTCVY1Y\n57NXATNI2oqsgme5QQvGU6QJXN8oKfihZHuhwgUDR8QrFI1TCvgeOlaCQcjeSrMcAU7DxZHs+EMi\nGWHATSf3JIhDXMDV0AyuYn8bupnGmIUPESmj4cghi1xIF7wNZYZLzM8eCKkA0qaMgKFeIA9Q9VGo\nbGSBJ5peJX3EpgsVB3D5QAqLTzFfpGKy7MxpU5ky4ZKZDLSiFuzrIcKkYJDgkkfG6xVwtGB6GIMx\nmQIVQKDZHrGFglcXRYotmeeyZfAtBvIYr7J6pKKIACK/SaNzLVRyARARZgsC14Y4Q0QyYNMDxd6g\n9mJNAMTPU8JxR1JTGCfZCo3+gx/YG8TQpeXBwIB5apQqFibQCjND/JoF3iIlbFUBWT/qCOjoMeOT\nUmCGwKvUdWNRI8X6AY0qbbAY2UyqKAufInZotXHQ6E2aK45osimQcJWAGD1X20gtYzs2mZFkQ0Bz\nG3HYEPRibcrMwGFYNvKszVh1gTgtOBB63yNDQcCQwyUIH0YIvtDUwNmxgIx8HVKGpIqN3wxgwgaZ\nI2SKhQloDVGwS37VjYIwhWU9F4pB2KH5kGpAemFi1zasBN9Xx2FLUtms+bxY73I8I4ARQazOqExE\nPVj8iHg0eWHEvAMpgI8IWM7I3xCZ+obKyAhKg559o1wA/MOIA4yRy3oDJcbLB3yIAmKJFjRiIEfW\nPmCzjxA5TDwBuQB4RFkG8EMlsyQD1BPGEPDuIRIEduEqmJIwZP9dQRA0W9HI+OhASr5xnqhEAb0p\nOIaRa8NWHCmgNxFcAJfyzGoALlRG4IDBo2+8PujiwDNFHJaESMOgBMaflwbmsl1jeAMNFALNAOx5\nEfvuqF8y4ZSSJgDNTEfuM/pLwMVzbUiRYSReJRZgZAdQaFAKaYbI+ETEIjKk20wjL7KCzuhEaWAZ\naT0WGUQwmMTS1CfPxoM1hAOhDcHjgqgJ6EfFHgArHLLlkcdOBuKIwjUgE5Sm+hQ3z7IJ38L3aAyh\nTVIwKPRAEaQrSMEIDqvpwDjmaNW4J4jFaBQQ+/gsrNQzlwO7igTdOlNoCRAeM08T6RmZCWHDQA6p\nGUsjOAFIM2NopJlwkTU3JsYZ2eisgXK+5XYqQlTVA5ZDExz+4ec0tKwiixAZRxdhDHBDE+9yOPY9\n0xwgIhio4L5wgAijhOqQHmJWDD84xgagRTbTN4EaDdlj/0ySNbZah2OYIuJXjWunEAUBeJdI2mD2\ngT4CG9KQyiQ/lElYGePNasFEdiUcZ3qR4G1osb6RTAklqY07CcAA/IhcATdJQ+GwgYSrFzD/snwa\n4w3FE7HrQCrCA7xCkXX1SLczvmmIlwUcvGkKojUT8sBG7KUXJUE+aBitGWqT7xFwTA/BRQSJpAR5\n/JgEEAqp2GYrA8Cszy59xAe4aXrORDnBU9INU+G2Fq2mIvAIslldQ3TXyH/dZwRdmpwNgXlOTAhW\ntJ4VU4SmUWIxRgTN7JvEGZCRSNne9GPK+P3poiAJ9sH5saE9BJ84T4NYnFEX1B+OEyKMb0A9cXYM\npknTcaqBoQdxIlI30mJYckNtEcfeOaJGaFIiqAVYCyJxWBvAD6yIFI9hXBCEA0ECAXRpMmaewVoA\n04Ac3IT0TCgCtIyMXZTIcQGHN5OX8zfNNRLVyYQRjBe2M0AMQOzsHFFRQGoUMS4VGfPC42DMiJCc\nVQwmpwckwC6GSXwh6gcwjnCL7zKOc8OE8AQPfM9EEEFHekrAn7f5QcYLiOf4gUmikV41kVI06XHm\nw4NG5rCPi2CeNoias8lk9Qg9sA2k/nDsBi6BQpgqMtBIGRJLm1uB10x+Hrshvs+IJ7QhIcwXAKVv\ndX5gnJ/AwlpSyK6LeCdhZKKttT0cojNuk8nzIm7CDgmKXBN7jFwTaAQ/UJ9CY8nYHaJXQefAqlUX\nuXWwF8NNNtACwUiBIGps6zleO8PSQG6LMlqaoZ0QcUaaw1sYJ1FdS/Y4qEmGOmDpEI9p0zVOvAik\nVE3qgwbgIhuObnASgM2YTQdAdn3jryBxBSEQ4J1QWdtDBh2vAlZxmh9kQ8r3MpMSER0H5mOsVYtJ\nCI6D+LFxC0TslZJmFdkkls4Ed7m/8Cw57FqbGMDqQBnP0o/jCgDWsR9JiIOLEFQHa0Hfu8xaJPhU\nWWi5weIOckEjAXXDys4mib3IM3kKm8jzEQz0ffum6xskblNoeDM0oX+SwwAB25Q8x0UmK8GLJxia\nmnCnkrFrQuRiWNdS7lvqhxZapIW2IbyOBCCH+xTnZgXjdSlNAru2esEjf9V32aMXWDcCGAt1joQX\nsyunhQkAE1Mwmmfm0fDCoVB8Ex/BZCN6hAEJ47LQVJDlRWegnpTHyziwcoABO7VqVTWhLU2PecKs\nVTEMATMOuB4aN4VlOhDwpkjJk8lmtpbGbeawjjQ9Q7Sbgy0e4u6C5TeE3w6fmfPuJkCJ5RbEQx5z\nmGETYeJW9CrYKbIpF7Am4YaE5UB+D0WRCTixSvLMqhPU5tnoMQkJlBfoYXCzK0wdLebFhNWaYgRk\n60nWLcOS3wwvkebZiBB7K7xCABF7ZTwJ8rYlDcdmIgQ7nezbQ6oR5dABg1OoVi5BpC+wsV4ZMIZF\nIkKGIl4mwplb14bIOHnJDhFyAsZFBrMowdoWY/ACdpxwG7BRwiSEDGMRWkHziKOQqo8QonOTOAoq\nVqYQMd4AWE8Ai7L1cU3eFSCRoTDnYTgacMn4L/B9NkiR0fEMAANts0mcqAXhbFCVHRc/4g6TIEaM\nbgHCMD0guY6YSRBD4yBSc6RmptV8IXyDLLPgQAfJhoZbSa6eHy/SIBHyeE0PPD5jfYHeAbOlQR08\nBg6T8+InopUwZey5BOBDhksQDKQWW627gdPOBo4qZ+aGj2eS5bDGoIuPNVcm3U2qnnxC+D1YqiLj\ncHvA8Z5YDQSBDToiJ86xksBIK2bOOppgSLMIITAKzITEkNbF2qfArDyChpL8XhQ7cg==\n\t]]>\n\t<![CDATA[\n\taBgGBekQYdYs+cahhMrRvk1PcEIfAfq4C4hBcaBdG7eSJ5Gtmp+EnhF0RITmMoO+KHZ22CMJ4InB\np+RsvmuWhDXPHkRz58MVgAtThwenPxamZudOV9bn10/FacfFgPtbvPZv/yoTZAvF7P5eZmXarFOc\ne7ji1YTlciaf3zi/ud5+Of9zd/2SuXk9/5/r7PnDw+Pb+dv1E93J3rxcv749vlxnX38//gcl9Er8\neD4/t17N/H+SLInI\n\t]]>\n</i:pgf>\n</svg>";
};

},{}],120:[function(require,module,exports){
"use strict";

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	var dataJs = p.name ? "data-js=\"" + p.name + "\"" : "";
	return "" + ("<svg version=\"1.1\" " + dataJs + " xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 528.899 528.899\" style=\"enable-background:new 0 0 528.899 528.899;\" xml:space=\"preserve\">\n<g>\n\t<path d=\"M328.883,89.125l107.59,107.589l-272.34,272.34L56.604,361.465L328.883,89.125z M518.113,63.177l-47.981-47.981\n\t\tc-18.543-18.543-48.653-18.543-67.259,0l-45.961,45.961l107.59,107.59l53.611-53.611\n\t\tC532.495,100.753,532.495,77.559,518.113,63.177z M0.3,512.69c-1.958,8.812,5.998,16.708,14.811,14.565l119.891-29.069\n\t\tL27.473,390.597L0.3,512.69z\"/>\n</g></svg>");
};

},{}],121:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<svg " + p.IconDataJs(p) + " xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" class=\"profile\" x=\"0px\" y=\"0px\" viewBox=\"0 0 563.43 563.43\" style=\"enable-background:new 0 0 563.43 563.43;\" xml:space=\"preserve\">\n<path d=\"M280.79,314.559c83.266,0,150.803-67.538,150.803-150.803S364.055,13.415,280.79,13.415S129.987,80.953,129.987,163.756  S197.524,314.559,280.79,314.559z M280.79,52.735c61.061,0,111.021,49.959,111.021,111.021S341.851,274.776,280.79,274.776  s-111.021-49.959-111.021-111.021S219.728,52.735,280.79,52.735z\" />\n<path d=\"M19.891,550.015h523.648c11.102,0,19.891-8.789,19.891-19.891c0-104.082-84.653-189.198-189.198-189.198H189.198  C85.116,340.926,0,425.579,0,530.124C0,541.226,8.789,550.015,19.891,550.015z M189.198,380.708h185.034  c75.864,0,138.313,56.436,148.028,129.524H41.17C50.884,437.607,113.334,380.708,189.198,380.708z\" /></svg>";
};

},{}],122:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg class="search" data-js="' + (p.name || 'search') + '" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n viewBox="0 0 30.239 30.239" style="enable-background:new 0 0 30.239 30.239;" xml:space="preserve">\n<g>\n\t<path d="M20.194,3.46c-4.613-4.613-12.121-4.613-16.734,0c-4.612,4.614-4.612,12.121,0,16.735\n\t\tc4.108,4.107,10.506,4.547,15.116,1.34c0.097,0.459,0.319,0.897,0.676,1.254l6.718,6.718c0.979,0.977,2.561,0.977,3.535,0\n\t\tc0.978-0.978,0.978-2.56,0-3.535l-6.718-6.72c-0.355-0.354-0.794-0.577-1.253-0.674C24.743,13.967,24.303,7.57,20.194,3.46z\n\t\t M18.073,18.074c-3.444,3.444-9.049,3.444-12.492,0c-3.442-3.444-3.442-9.048,0-12.492c3.443-3.443,9.048-3.443,12.492,0\n\t\tC21.517,9.026,21.517,14.63,18.073,18.074z"/>\n</g></svg>';
};

},{}],123:[function(require,module,exports){
"use strict";

module.exports = function (p) {
   return "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg class=\"cart\" " + p.IconDataJs(p) + "\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   viewBox=\"0 -256 1792 1792\"\n   id=\"svg2989\"\n   version=\"1.1\"\n   inkscape:version=\"0.48.3.1 r9886\"\n   width=\"100%\"\n   height=\"100%\"\n   sodipodi:docname=\"shopping_cart_font_awesome.svg\">\n  <metadata\n     id=\"metadata2999\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <defs\n     id=\"defs2997\" />\n  <sodipodi:namedview\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1\"\n     objecttolerance=\"10\"\n     gridtolerance=\"10\"\n     guidetolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:window-width=\"640\"\n     inkscape:window-height=\"480\"\n     id=\"namedview2995\"\n     showgrid=\"false\"\n     inkscape:zoom=\"0.13169643\"\n     inkscape:cx=\"896\"\n     inkscape:cy=\"896\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"25\"\n     inkscape:window-maximized=\"0\"\n     inkscape:current-layer=\"svg2989\" />\n  <g\n     transform=\"matrix(1,0,0,-1,68.338983,1209.4915)\"\n     id=\"g2991\">\n    <path\n       d=\"M 640,0 Q 640,-53 602.5,-90.5 565,-128 512,-128 459,-128 421.5,-90.5 384,-53 384,0 384,53 421.5,90.5 459,128 512,128 565,128 602.5,90.5 640,53 640,0 z m 896,0 q 0,-53 -37.5,-90.5 -37.5,-37.5 -90.5,-37.5 -53,0 -90.5,37.5 Q 1280,-53 1280,0 q 0,53 37.5,90.5 37.5,37.5 90.5,37.5 53,0 90.5,-37.5 Q 1536,53 1536,0 z m 128,1088 V 576 q 0,-24 -16,-42.5 Q 1632,515 1607,512 L 563,390 q 1,-7 4.5,-21.5 3.5,-14.5 6,-26.5 2.5,-12 2.5,-22 0,-16 -24,-64 h 920 q 26,0 45,-19 19,-19 19,-45 0,-26 -19,-45 -19,-19 -45,-19 H 448 q -26,0 -45,19 -19,19 -19,45 0,14 11,39.5 11,25.5 29.5,59.5 18.5,34 20.5,38 L 268,1152 H 64 q -26,0 -45,19 -19,19 -19,45 0,26 19,45 19,19 45,19 h 256 q 16,0 28.5,-6.5 12.5,-6.5 20,-15.5 7.5,-9 13,-24.5 5.5,-15.5 7.5,-26.5 2,-11 5.5,-29.5 3.5,-18.5 4.5,-25.5 h 1201 q 26,0 45,-19 19,-19 19,-45 z\"\n       id=\"path2993\"\n       inkscape:connector-curvature=\"0\"\n       style=\"fill:currentColor\" />\n  </g>\n</svg>";
};

},{}],124:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = Object.assign({}, require('./MyObject'), {
    CreateDefault: function CreateDefault() {
        return this.reducer(this.attributes, function (attr) {
            return _defineProperty({}, attr.name, typeof attr.default === 'function' ? attr.default() : attr.default);
        });
    },


    attributes: [],

    data: {},

    constructor: function constructor() {
        var _this = this;

        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        Object.assign(this, { store: {}, data: data }, opts);

        if (this.storeBy) {
            this.storeBy.forEach(function (key) {
                return _this.store[key] = {};
            });
            this._store();
        }

        return this;
    },


    meta: {},

    sort: function sort(opts) {
        var attr = Object.keys(opts)[0],
            value = opts[attr];

        this.data.sort(function (a, b) {
            return value ? a[attr] < b[attr] ? -1 : 1 : b[attr] < a[attr] ? -1 : 1;
        });

        return this;
    },
    _resetStore: function _resetStore(storeBy) {
        var _this2 = this;

        this.store = {};
        storeBy.forEach(function (attr) {
            return _this2.store[attr] = {};
        });
        this.storeBy = storeBy;
    },
    _store: function _store(data) {
        var _this3 = this;

        data = data || this.data;
        data.forEach(function (datum) {
            return _this3.storeBy.forEach(function (attr) {
                return _this3._storeAttr(datum, attr);
            });
        });
    },
    _storeAttr: function _storeAttr(datum, attr) {
        this.store[attr][datum[attr]] = this.store[attr][datum[attr]] ? Array.isArray(this.store[attr][datum[attr]]) ? this.store[attr][datum[attr]].concat(datum) : [this.store[attr][datum[attr]], datum] : datum;
    },
    _storeOne: function _storeOne(datum) {
        var _this4 = this;

        this.storeBy.forEach(function (attr) {
            return _this4._storeAttr(datum, attr);
        });
    }
});

},{"./MyObject":126}],125:[function(require,module,exports){
"use strict";

module.exports = function (err) {
  console.log(err.stack || err);
};

},{}],126:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = {

    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    getIntRange: function getIntRange(int) {
        return Array.from(Array(int).keys());
    },
    getRandomInclusiveInteger: function getRandomInclusiveInteger(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    },
    omit: function omit(obj, keys) {
        return Object.keys(obj).filter(function (key) {
            return !keys.includes(key);
        }).reduce(function (memo, key) {
            return Object.assign(memo, _defineProperty({}, key, obj[key]));
        }, {});
    },
    pick: function pick(obj, keys) {
        return keys.reduce(function (memo, key) {
            return Object.assign(memo, _defineProperty({}, key, obj[key]));
        }, {});
    },
    reducer: function reducer(arr, fn) {
        return arr.reduce(function (memo, item, i) {
            return Object.assign(memo, fn(item, i));
        }, {});
    },
    shuffleArray: function shuffleArray(arr) {
        var _this = this;

        var rv = Array.from(arr);

        rv.forEach(function (item, i) {
            if (i === rv.length - 1) return;
            var int = _this.getRandomInclusiveInteger(i, rv.length - 1),
                holder = rv[i];

            rv[i] = rv[int];
            rv[int] = holder;
        });

        return rv;
    },


    Error: require('./MyError'),

    P: function P(fun) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var thisArg = arguments[2];
        return new Promise(function (resolve, reject) {
            return Reflect.apply(fun, thisArg || undefined, args.concat(function (e) {
                for (var _len = arguments.length, callback = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    callback[_key - 1] = arguments[_key];
                }

                return e ? reject(e) : resolve(callback);
            }));
        });
    },

    constructor: function constructor() {
        return this;
    }
};

},{"./MyError":125}],127:[function(require,module,exports){
'use strict';

module.exports = {
    attributes: [{
        name: 'ccName',
        label: 'Name on Card',
        range: 'String',
        error: 'A credit card name is required'
    }, {
        name: 'ccNo',
        label: 'Number on Card',
        range: 'String',
        error: 'A credit card number is required'
    }, {
        name: 'ccMonth',
        label: 'MO',
        metadata: {
            options: [{ name: '1', label: '01' }, { name: '2', label: '02' }, { name: '3', label: '03' }, { name: '4', label: '04' }, { name: '5', label: '05' }, { name: '6', label: '06' }, { name: '7', label: '07' }, { name: '8', label: '08' }, { name: '9', label: '09' }, { name: '10', label: '10' }, { name: '11', label: '11' }, { name: '12', label: '12' }]
        },
        range: 'String',
        error: 'A credit card month expiration is required'
    }, {
        name: 'ccYear',
        label: 'YR',
        metadata: {
            options: [{ name: '2017', label: '2017' }, { name: '2018', label: '2018' }, { name: '2019', label: '2019' }, { name: '2020', label: '2020' }, { name: '2021', label: '2021' }, { name: '2022', label: '2022' }, { name: '2023', label: '2023' }]
        },
        range: 'String',
        error: 'A credit card year expiration is required'
    }, {
        name: 'cvc',
        label: 'CVC',
        range: 'String',
        error: 'A credit card cvc is required'
    }]
};

},{}],128:[function(require,module,exports){
'use strict';

module.exports = {
    attributes: [{
        name: 'user',
        label: 'User',
        range: [{
            name: 'personId',
            label: 'Person Id',
            range: 'Integer'
        }, {
            name: 'name',
            label: 'Name',
            range: 'String'
        }]
    }, {
        fk: 'Device'
    }, {
        fk: 'DeviceAction'
    }, {
        name: 'denominations',
        label: 'Denominations',
        prompt: 'Enter the number present for each currency denomination.',
        range: [{
            name: 'penny',
            label: 'Penny',
            range: 'Integer'
        }, {
            name: 'nickel',
            label: 'Nickel',
            range: 'Integer'
        }, {
            name: 'dime',
            label: 'Dime',
            range: 'Integer'
        }, {
            name: 'quarter',
            label: 'Quarter',
            range: 'Integer'
        }, {
            name: 'halfDollar',
            label: 'Half-Dollar',
            range: 'Integer'
        }, {
            name: 'dollar',
            label: '$1',
            range: 'Integer'
        }, {
            name: 'five',
            label: '$5',
            range: 'Integer'
        }, {
            name: 'ten',
            label: '$10',
            range: 'Integer'
        }, {
            name: 'twenty',
            label: '$20',
            range: 'Integer'
        }, {
            name: 'fifty',
            label: '$50',
            range: 'Integer'
        }, {
            name: 'oneHundred',
            label: '$100',
            range: 'Integer'
        }]
    }, {
        name: 'total',
        label: 'Total',
        range: 'Integer'
    }, {
        name: 'createdAt',
        label: 'CreatedAt',
        range: 'DateTime'
    }]
};

},{}],129:[function(require,module,exports){
'use strict';

module.exports = {
    name: 'email',
    label: 'Email',
    range: 'Email',
    error: 'A valid email address is required',
    validate: function validate(val) {
        return (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(val)
        );
    }
};

},{}],130:[function(require,module,exports){
'use strict';

module.exports = {
    attributes: [{
        name: 'amount',
        label: 'Gift Card Amount',
        range: 'String',
        validate: function validate(val) {
            val = Number.parseFloat(val);
            return val && val > 0 && val <= 1000;
        },
        error: 'Please choose a valid gift card amount.'
    }, {
        name: 'name',
        label: 'Recipient Name',
        range: 'String',
        validate: function validate(val) {
            return val !== '';
        },
        error: "Please enter your recipient's name"
    }, {
        name: 'street',
        label: 'Street',
        range: 'String'
    }, {
        name: 'cityStateZip',
        label: 'City/State/Zip',
        range: 'String'
    }, {
        name: 'note',
        label: 'Personal Note',
        range: 'Text'
    }]
};

},{}],131:[function(require,module,exports){
'use strict';

module.exports = {
    attributes: [require('./Name'), require('./Email'), require('./Phone'), {
        name: 'isProcessed',
        label: 'Is Processed',
        range: 'Boolean'
    }, {
        name: 'recipients',
        label: 'Recipients',
        range: 'List',
        itemView: 'form',
        addText: 'Add Recipient',
        prompt: 'You may purchase a gift card (maximum $1000) for one or more people. Enter the info for each recipient and leave a note if you please! Amounts should be entered without dollar sign.',
        itemRange: require('./GiftCardRecipient').attributes
    }, {
        name: 'payment',
        label: 'Payment Info',
        klass: 'CreditCard',
        prompt: 'We accept credit and debit cards.',
        range: require('./CreditCard').attributes
    }]
};

},{"./CreditCard":127,"./Email":129,"./GiftCardRecipient":130,"./Name":132,"./Phone":133}],132:[function(require,module,exports){
'use strict';

module.exports = {
    name: 'name',
    label: 'Name',
    range: 'String',
    error: 'Name is a required field',
    validate: function validate(val) {
        return val !== '';
    }
};

},{}],133:[function(require,module,exports){
'use strict';

module.exports = {
    name: 'phone',
    label: 'Phone Number',
    range: 'String',
    error: 'A valid phone number is required',
    validate: function validate(val) {
        return (/^\(?(\d{3})\)?[-. ]?(\d{3})[-. ]?(\d{4})$/.test(val)
        );
    }
};

},{}],134:[function(require,module,exports){
'use strict';

module.exports = {
    attributes: [require('./Name'), {
        name: 'street',
        label: 'Street',
        range: 'String'
    }, {
        name: 'cityStateZip',
        label: 'City/State/Zip',
        range: 'String'
    }, require('./Email'), require('./Phone')]
};

},{"./Email":129,"./Name":132,"./Phone":133}],135:[function(require,module,exports){
'use strict';

module.exports = {
    attributes: [{
        name: 'shipping',
        label: 'Shipping Info',
        range: require('./Shipping').attributes
    }, {
        name: 'payment',
        label: 'Payment Info',
        klass: 'CreditCard',
        prompt: 'We accept credit and debit cards.',
        range: require('./CreditCard').attributes
    }]
};

},{"./CreditCard":127,"./Shipping":134}],136:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],137:[function(require,module,exports){
//! moment.js
//! version : 2.18.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isUndefined(input) {
    return input === void 0;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null,
        rfc2822         : false,
        weekdayMismatch : false
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.
    this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
            '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    ss : '%d seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return isArray(this._months) ? this._months :
            this._months['standalone'];
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return isArray(this._monthsShort) ? this._monthsShort :
            this._monthsShort['standalone'];
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    // can't just apply() to create a date:
    // https://stackoverflow.com/q/181348
    var date = new Date(y, m, d, h, M, s, ms);

    // the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    // the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return isArray(this._weekdays) ? this._weekdays :
            this._weekdays['standalone'];
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('k',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);
addRegexToken('kk', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['k', 'kk'], function (input, array, config) {
    var kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;

// date and time from ref 2822 format
function configFromRFC2822(config) {
    var string, match, dayFormat,
        dateFormat, timeFormat, tzFormat;
    var timezones = {
        ' GMT': ' +0000',
        ' EDT': ' -0400',
        ' EST': ' -0500',
        ' CDT': ' -0500',
        ' CST': ' -0600',
        ' MDT': ' -0600',
        ' MST': ' -0700',
        ' PDT': ' -0700',
        ' PST': ' -0800'
    };
    var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
    var timezone, timezoneIndex;

    string = config._i
        .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
        .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
        .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
    match = basicRfcRegex.exec(string);

    if (match) {
        dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
        dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
        timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');

        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
        if (match[1]) { // day of week given
            var momentDate = new Date(match[2]);
            var momentDay = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][momentDate.getDay()];

            if (match[1].substr(0,3) !== momentDay) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return;
            }
        }

        switch (match[5].length) {
            case 2: // military
                if (timezoneIndex === 0) {
                    timezone = ' +0000';
                } else {
                    timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
                    timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
                        (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
                }
                break;
            case 4: // Zone
                timezone = timezones[match[5]];
                break;
            default: // UT or +/-9999
                timezone = timezones[' GMT'];
        }
        match[5] = timezone;
        config._i = match.splice(1).join('');
        tzFormat = ' ZZ';
        config._f = dayFormat + dateFormat + timeFormat + tzFormat;
        configFromStringAndFormat(config);
        getParsingFlags(config).rfc2822 = true;
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    configFromRFC2822(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    // Final attempt, use Input Fallback
    hooks.createFromInputFallback(config);
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear != null) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// constant that refers to the RFC 2822 form
hooks.RFC_2822 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }
    if (config._f === hooks.RFC_2822) {
        configFromRFC2822(config);
        return;
    }
    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (isUndefined(input)) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (isObject(input)) {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

function isDurationValid(m) {
    for (var key in m) {
        if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
        }
    }

    var unitHasDecimal = false;
    for (var i = 0; i < ordering.length; ++i) {
        if (m[ordering[i]]) {
            if (unitHasDecimal) {
                return false; // only allow non-integers for smallest unit
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                unitHasDecimal = true;
            }
        }
    }

    return true;
}

function isValid$1() {
    return this._isValid;
}

function createInvalid$1() {
    return createDuration(NaN);
}

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    this._isValid = isDurationValid(normalizedInput);

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime, keepMinutes) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString() {
    if (!this.isValid()) {
        return null;
    }
    var m = this.clone().utc();
    if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
    if (isFunction(Date.prototype.toISOString)) {
        // native implementation is ~50x faster, use it when we can
        return this.toDate().toISOString();
    }
    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$2 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    // TODO: Remove "ordinalParse" fallback in next major release.
    return isStrict ?
      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
      locale._dayOfMonthOrdinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$2;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    if (!this.isValid()) {
        return NaN;
    }
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    if (!this.isValid()) {
        return NaN;
    }
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[units + 's']() : NaN;
}

function makeGetter(name) {
    return function () {
        return this.isValid() ? this._data[name] : NaN;
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    ss: 44,         // a few seconds to seconds
    s : 45,         // seconds to minute
    m : 45,         // minutes to hour
    h : 22,         // hours to day
    d : 26,         // days to month
    M : 11          // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds <= thresholds.ss && ['s', seconds]  ||
            seconds < thresholds.s   && ['ss', seconds] ||
            minutes <= 1             && ['m']           ||
            minutes < thresholds.m   && ['mm', minutes] ||
            hours   <= 1             && ['h']           ||
            hours   < thresholds.h   && ['hh', hours]   ||
            days    <= 1             && ['d']           ||
            days    < thresholds.d   && ['dd', days]    ||
            months  <= 1             && ['M']           ||
            months  < thresholds.M   && ['MM', months]  ||
            years   <= 1             && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    if (threshold === 's') {
        thresholds.ss = limit - 1;
    }
    return true;
}

function humanize (withSuffix) {
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.isValid        = isValid$1;
proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.18.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

})));

},{}],138:[function(require,module,exports){
/*
 * smoothscroll polyfill - v0.3.5
 * https://iamdustan.github.io/smoothscroll
 * 2016 (c) Dustan Kasten, Jeremias Menichelli - MIT License
 */

(function(w, d, undefined) {
  'use strict';

  /*
   * aliases
   * w: window global object
   * d: document
   * undefined: undefined
   */

  // polyfill
  function polyfill() {
    // return when scrollBehavior interface is supported
    if ('scrollBehavior' in d.documentElement.style) {
      return;
    }

    /*
     * globals
     */
    var Element = w.HTMLElement || w.Element;
    var SCROLL_TIME = 468;

    /*
     * object gathering original scroll methods
     */
    var original = {
      scroll: w.scroll || w.scrollTo,
      scrollBy: w.scrollBy,
      elScroll: Element.prototype.scroll || scrollElement,
      scrollIntoView: Element.prototype.scrollIntoView
    };

    /*
     * define timing method
     */
    var now = w.performance && w.performance.now
      ? w.performance.now.bind(w.performance) : Date.now;

    /**
     * changes scroll position inside an element
     * @method scrollElement
     * @param {Number} x
     * @param {Number} y
     */
    function scrollElement(x, y) {
      this.scrollLeft = x;
      this.scrollTop = y;
    }

    /**
     * returns result of applying ease math function to a number
     * @method ease
     * @param {Number} k
     * @returns {Number}
     */
    function ease(k) {
      return 0.5 * (1 - Math.cos(Math.PI * k));
    }

    /**
     * indicates if a smooth behavior should be applied
     * @method shouldBailOut
     * @param {Number|Object} x
     * @returns {Boolean}
     */
    function shouldBailOut(x) {
      if (typeof x !== 'object'
            || x === null
            || x.behavior === undefined
            || x.behavior === 'auto'
            || x.behavior === 'instant') {
        // first arg not an object/null
        // or behavior is auto, instant or undefined
        return true;
      }

      if (typeof x === 'object'
            && x.behavior === 'smooth') {
        // first argument is an object and behavior is smooth
        return false;
      }

      // throw error when behavior is not supported
      throw new TypeError('behavior not valid');
    }

    /**
     * finds scrollable parent of an element
     * @method findScrollableParent
     * @param {Node} el
     * @returns {Node} el
     */
    function findScrollableParent(el) {
      var isBody;
      var hasScrollableSpace;
      var hasVisibleOverflow;

      do {
        el = el.parentNode;

        // set condition variables
        isBody = el === d.body;
        hasScrollableSpace =
          el.clientHeight < el.scrollHeight ||
          el.clientWidth < el.scrollWidth;
        hasVisibleOverflow =
          w.getComputedStyle(el, null).overflow === 'visible';
      } while (!isBody && !(hasScrollableSpace && !hasVisibleOverflow));

      isBody = hasScrollableSpace = hasVisibleOverflow = null;

      return el;
    }

    /**
     * self invoked function that, given a context, steps through scrolling
     * @method step
     * @param {Object} context
     */
    function step(context) {
      var time = now();
      var value;
      var currentX;
      var currentY;
      var elapsed = (time - context.startTime) / SCROLL_TIME;

      // avoid elapsed times higher than one
      elapsed = elapsed > 1 ? 1 : elapsed;

      // apply easing to elapsed time
      value = ease(elapsed);

      currentX = context.startX + (context.x - context.startX) * value;
      currentY = context.startY + (context.y - context.startY) * value;

      context.method.call(context.scrollable, currentX, currentY);

      // scroll more if we have not reached our destination
      if (currentX !== context.x || currentY !== context.y) {
        w.requestAnimationFrame(step.bind(w, context));
      }
    }

    /**
     * scrolls window with a smooth behavior
     * @method smoothScroll
     * @param {Object|Node} el
     * @param {Number} x
     * @param {Number} y
     */
    function smoothScroll(el, x, y) {
      var scrollable;
      var startX;
      var startY;
      var method;
      var startTime = now();

      // define scroll context
      if (el === d.body) {
        scrollable = w;
        startX = w.scrollX || w.pageXOffset;
        startY = w.scrollY || w.pageYOffset;
        method = original.scroll;
      } else {
        scrollable = el;
        startX = el.scrollLeft;
        startY = el.scrollTop;
        method = scrollElement;
      }

      // scroll looping over a frame
      step({
        scrollable: scrollable,
        method: method,
        startTime: startTime,
        startX: startX,
        startY: startY,
        x: x,
        y: y
      });
    }

    /*
     * ORIGINAL METHODS OVERRIDES
     */

    // w.scroll and w.scrollTo
    w.scroll = w.scrollTo = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scroll.call(
          w,
          arguments[0].left || arguments[0],
          arguments[0].top || arguments[1]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        ~~arguments[0].left,
        ~~arguments[0].top
      );
    };

    // w.scrollBy
    w.scrollBy = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollBy.call(
          w,
          arguments[0].left || arguments[0],
          arguments[0].top || arguments[1]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        ~~arguments[0].left + (w.scrollX || w.pageXOffset),
        ~~arguments[0].top + (w.scrollY || w.pageYOffset)
      );
    };

    // Element.prototype.scroll and Element.prototype.scrollTo
    Element.prototype.scroll = Element.prototype.scrollTo = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.elScroll.call(
            this,
            arguments[0].left || arguments[0],
            arguments[0].top || arguments[1]
        );
        return;
      }

      var left = arguments[0].left;
      var top = arguments[0].top;

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
          this,
          this,
          typeof left === 'number' ? left : this.scrollLeft,
          typeof top === 'number' ? top : this.scrollTop
      );
    };

    // Element.prototype.scrollBy
    Element.prototype.scrollBy = function() {
      var arg0 = arguments[0];

      if (typeof arg0 === 'object') {
        this.scroll({
          left: arg0.left + this.scrollLeft,
          top: arg0.top + this.scrollTop,
          behavior: arg0.behavior
        });
      } else {
        this.scroll(
          this.scrollLeft + arg0,
          this.scrollTop + arguments[1]
        );
      }
    };

    // Element.prototype.scrollIntoView
    Element.prototype.scrollIntoView = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollIntoView.call(
          this,
          arguments[0] === undefined ? true : arguments[0]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      var scrollableParent = findScrollableParent(this);
      var parentRects = scrollableParent.getBoundingClientRect();
      var clientRects = this.getBoundingClientRect();

      if (scrollableParent !== d.body) {
        // reveal element inside parent
        smoothScroll.call(
          this,
          scrollableParent,
          scrollableParent.scrollLeft + clientRects.left - parentRects.left,
          scrollableParent.scrollTop + clientRects.top - parentRects.top
        );
        // reveal parent in viewport
        w.scrollBy({
          left: parentRects.left,
          top: parentRects.top,
          behavior: 'smooth'
        });
      } else {
        // reveal element in viewport
        w.scrollBy({
          left: clientRects.left,
          top: clientRects.top,
          behavior: 'smooth'
        });
      }
    };
  }

  if (typeof exports === 'object') {
    // commonjs
    module.exports = { polyfill: polyfill };
  } else {
    // global
    polyfill();
  }
})(window, document);

},{}]},{},[8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
